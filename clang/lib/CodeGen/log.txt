      ptr[1] = 3;
    }
    // ldrh    w8, [x9, x8]  // the shadow memory load may not be aligned by 2
    ```
    
    Infer the shadow memory alignment from the load/store alignment to set the
    correct alignment. The generated code now uses two ldrb and one orr.
    
    Fix https://github.com/llvm/llvm-project/issues/63258
    
    Differential Revision: https://reviews.llvm.org/D152663
--
    be useful when 1) analyzing individual instructions in a function
    and 2) if the original caller is later inlined, as if the attributes are
    not propagated, they will be lost.
    
    This patch implements propagation in a new class/file
    `InferCallsiteAttrs` which can hypothetically be included elsewhere.
    
    At the moment this patch infers the following:
    
    Function Attributes:
        - mustprogress
        - nofree
        - willreturn
--

commit c6d8b51ba5da7530332815a545c72ebd54fca7f6
Author: Amir Ayupov <aaupov@fb.com>
Date:   Fri Jun 9 12:40:37 2023 -0700

    [profi][NFC] Refactor SampleProfileInference::initFunction
    
    Initialize and return `FlowFunction` from initFunction->createFlowFunction.
    Aligns the interface to `createFlowFunction` in D144500, intent to reuse
    in a follow-up.
    
--
    There are likely numerous ways of improving hash computation but already this
    simple variant provides significant perf benefits.
    
    **Perf testing** on the clang binary: collecting data on clang-10 and using it
    to optimize clang-11 (with ~1 year of commits in between). Next, we compare
    - //stale_clang// (clang-11 optimized with profile collected on clang-10 with **infer-stale-profile=0**)
    - //opt_clang// (clang-11 optimized with profile collected on clang-11)
    - //infer_clang// (clang-11 optimized with profile collected on clang-10 with **infer-stale-profile=1**)
    
    `LTO-only` mode:
    //stale_clang// vs //opt_clang//: task-clock [delta(%): 9.4252 ± 1.6582, p-value: 0.000002]
    (That is, there is a ~9.5% perf regression)
    //infer_clang// vs //opt_clang//: task-clock [delta(%): 2.1834 ± 1.8158, p-value: 0.040702]
    (That is, the regression is reduced to ~2%)
    Related BOLT logs:
    ```
    BOLT-INFO: identified 2114 (18.61%) stale functions responsible for 30.96% samples
    BOLT-INFO: inferred profile for 2101 (18.52% of all profiled) functions responsible for 30.95% samples
    ```
    
    `LTO+AutoFDO` mode:
    //stale_clang// vs //opt_clang//: task-clock [delta(%): 19.1293 ± 1.4131, p-value: 0.000002]
    //infer_clang// vs //opt_clang//: task-clock [delta(%): 7.4364 ± 1.3343, p-value: 0.000002]
    Related BOLT logs:
    ```
    BOLT-INFO: identified 5452 (50.27%) stale functions responsible for 85.34% samples
    BOLT-INFO: inferred profile for 5442 (50.23% of all profiled) functions responsible for 85.33% samples
    ```
    
    Reviewed By: Amir
    
    Differential Revision: https://reviews.llvm.org/D146661
--
Author: Amir Ayupov <aaupov@fb.com>
Date:   Tue Jun 6 13:41:43 2023 -0700

    [profi][NFC] Get rid of afdo_detail::TypeMap
    
    Parametrize SampleProfileInference and SampleProfileLoaderBaseImpl by function
    type (Function/MachineFunction) instead of block type
    (BasicBlock/MachineBasicBlock). Move out specializations to appropriate
    locations.
    
    This change makes it possible to use GraphTraits instead of a custom TypeMap and
    make SampleProfileInference not dependent on LLVM types, paving the way for
    generalizing SampleProfileInference interfaces to BOLT IR types
    (BinaryFunction/BinaryBasicBlock) in stale profile matching (D144500).
    
    Reviewed By: hoy
    
    Differential Revision: https://reviews.llvm.org/D152187
--
    revisions behind release. As a result, a certain percentage of functions is
    considered stale and not optimized. This diff adds an ability to match profile
    to functions that are not 100% binary identical, which increases the
    optimization coverage and boosts the performance of applications.
    
    The algorithm consists of two phases: matching and inference:
    - At the matching phase, we try to "guess" as many block and jump counts from
      the stale profile as possible. To this end, the content of each basic block
      is hashed and stored in the (yaml) profile. When BOLT optimizes a binary,
      it computes block hashes and identifies the corresponding entries in the
      stale profile. It yields a partial profile for every CFG in the binary.
    - At the inference phase, we employ a network flow-based algorithm (profi) to
      reconstruct "realistic" block and jump counts from the partial profile
      generated at the first stage. In practice, we don't always produce proper
      profile data but the majority (e.g., >90%) of CFGs get the correct counts.
    
    This is a first part of the change; the next stacked diff extends the block hashing
--
    elements, and the 32-bit flags (the latter two being the 3rd and 4th
    wards of the resource), and combines them into a ptr addrspace(8).
    
    This intrinsic is lowered during the early phases of the backend.
    
    This intrinsic is needed so that alias analysis can correctly infer
    that a certain buffer resource points to the same memory as some
    global pointer. Previous methods of constructing buffer resources,
    which relied on ptrtoint, would not allow for such an inference.
    
    Depends on D148184
    
    Reviewed By: arsenm
    
--
    
    For the legacy format, we mostly rely on the `Code Type` line, since the
    architure is an optional field on the `Binary Images` sections.
    
    However for the json format, we first try to get the architecture while
    parsing the image dictionary if we couldn't find it, we try to infer it
    using the "flavor" key when parsing the frame's registers.
    
    If the architecture is still not set after parsing the report, we raise
    an exception.
    
--

commit 95279d7670cd54a50cf72d1fbc99701ef1faa72b
Author: Jan Svoboda <jan_svoboda@apple.com>
Date:   Thu May 25 14:02:32 2023 -0700

    [clang][lex] NFCI: Use DirectoryEntryRef in ModuleMap::inferFrameworkModule()
    
    This patch changes the argument type of `ModuleMap::inferFrameworkModule()` from `const DirectoryEntry *` to `DirectoryEntryRef` in order to remove the deprecated uses of `DirectoryEntry::getName()`.
    
    Depends on D127647.
    
    Reviewed By: bnbarham
    
--

commit e0ca7e99914609bbed0f30f4834a93d33dcef085
Author: max <maksim.levental@gmail.com>
Date:   Fri May 26 14:39:03 2023 -0500

    [MLIR][python bindings] Fix inferReturnTypes + AttrSizedOperandSegments for optional operands
    
    Right now `inferTypeOpInterface.inferReturnTypes` fails because there's a cast in there to `py::sequence` which throws a `TypeError` when it tries to cast the `None`s. Note `None`s are inserted into `operands` for omitted operands passed to the generated builder:
    
    ```
        operands.append(_get_op_result_or_value(start) if start is not None else None)
        operands.append(_get_op_result_or_value(stop) if stop is not None else None)
        operands.append(_get_op_result_or_value(step) if step is not None else None)
--

commit 98aad40806f18cd1d8f248d15efc75fe26840bd4
Author: Spenser Bauman <sbauman@mathworks.com>
Date:   Thu May 25 16:06:50 2023 -0700

    [tosa] Improve inferred shapes of TOSA operations
    
    The TosaInferShapes pass avoids updating the shapes of tensor operators
    when the consumers are not TOSA operations, limiting the efficacy of
    TosaInferShapes when the IR is a mix of TOSA and other operations.
    This change attempts to update the result shapes when the consumers
    themselves have reasonable type/shape inference methods.
    
    Reviewed By: eric-k256
    
    Differential Revision: https://reviews.llvm.org/D151228

--
    Put the following changes under ifdef:
    commit 44096e6904e10bb313fef2f6aaff25c25d1325f7
    Author: CaprYang <capryang@gmail.com>
    Date:   Wed May 17 21:39:36 2023 +0100
    
        [InferAddressSpaces] Handle vector of pointers type & Support intrinsic masked gather/scatter
    
    Added feature is supported for opaque pointers only. We haven't fully
    switched yet.

commit d27d2701ffb73acc439afc85da1e663901d28545
--

commit 44096e6904e10bb313fef2f6aaff25c25d1325f7
Author: CaprYang <capryang@gmail.com>
Date:   Wed May 17 21:39:36 2023 +0100

    [InferAddressSpaces] Handle vector of pointers type & Support intrinsic masked gather/scatter

commit dd61b63b5ca1c8a15013e2154bf3b30243df66bd
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Apr 17 22:14:36 2023 -0400

--

commit 33da608ecc0fddbb38b01415d32464db1d867df1
Author: Juan Manuel MARTINEZ CAAMAÑO <juamarti@amd.com>
Date:   Wed May 10 11:26:44 2023 +0200

    [AMDGPU][InferAddressSpaces] Only rewrite address-spaces that can be trivially casted to flat for llvm.amdgcn.flat.atomic.{fadd,fmax,fmin}
    
    The intrinsic @llvm.amdgcn.flat.atomic.{fadd,fmax,fmin} can only be
    selected for flat address spaces (constant, flat and global).
    
    This patch restricts the cases over which GCNTTIImpl::rewriteIntrinsicWithAddressSpace
--
    
    The MachineUA now queries the target to determine if a given register holds a
    uniform value. This is determined using the corresponding register bank if
    available, or by a combination of the register class and value type. This
    assumes that the target is optimizing for performance by choosing registers, and
    the target is responsible for any mismatch with the inferred uniformity.
    
    For example, on AMDGPU, an SGPR is now treated as uniform, except if the
    register bank is VCC (i.e., the register holds a wave-wide vector of 1-bit
    values) or equivalently if it has a value type of s1.
    
--

commit a58ed7fcf6fcae7b622f8a1873459f28725ce7d6
Author: Mehdi Amini <joker.eph@gmail.com>
Date:   Mon May 15 12:12:28 2023 -0700

    Fix ConstShapeOp::inferReturnTypes to be resilient to lack of properties
    
    The Python bindings test aren't using properties yet, this is a bit
    of a hack to support this here, but hopefully it'll be temporary.

commit 27b739228b42ecc7c15664670859e2bbad3b7749
--

commit 2ee4ddae043946d74a5744fe6590759ae383bb94
Author: spupyrev <spupyrev@fb.com>
Date:   Fri May 12 10:27:12 2023 -0700

    profilie inference changes for stale profile matching
    
    This diff facilitates a new stale profile matching in BOLT: D144500
    
    This is a no-op for existing usages of profi (CSSPGO).
    
--
    a e/xa.json
    clang -c -ftime-trace d/a.c -o e/xa.o -dumpdir f/g
    a f/ga.json
    ```
    
    The driver checks `-ftime-trace` and `-ftime-trace=`, infers the trace file
    name, and passes `-ftime-trace=` to cc1. The `-ftime-trace` cc1 option is
    removed.
    
    With offloading, previously `-ftime-trace` is passed to all offloading
    actions, causing the same trace file to be overwritten by host and
--

commit f22008ed89eac028cd70f91de3adf41a481f6d22
Author: Arash Taheri-Dezfouli <ataheridezfouli@groq.com>
Date:   Thu May 11 14:29:16 2023 -0500

    [MLIR] Add InferShapedTypeOpInterface bindings
    
    Add C and python bindings for InferShapedTypeOpInterface
    and ShapedTypeComponents. This allows users to invoke
    InferShapedTypeOpInterface for ops that implement it.
    
    Reviewed By: ftynse
    
    Differential Revision: https://reviews.llvm.org/D149494

--
Date:   Tue May 9 14:25:53 2023 -0700

    [mlir][Linalg] Use ReifyRankedShapedTypeOpInterface for pad transforms.
    
    The information is not tied to tensor.empty op and tensor.extract_slice
    op. We can infer smallest static bounding box for pad transform if
    they implement ReifyRankedShapedTypeOpInterface. The revision extends
    the usability for downstream projects. No tests are added because the
    existing tests cover the change, and most of MLIR
    ReifyRankedShapedTypeOpInterface ops are covered in the tests, except
    tensor.generate and bufferization.alloc_tensor ops.
--
Author: Krzysztof Parzyszek <kparzysz@quicinc.com>
Date:   Wed May 3 15:52:12 2023 -0700

    [TableGen] Print message about dropped patterns with -debug
    
    A selection pattern can be silently dropped if type inference fails to
    deduce some types. Print a message when that happens, and -debug was
    applied.

commit 6561032e1d3c561b3f7ced817bf3350b8622bf92
Author: Chia-hung Duan <chiahungduan@google.com>
--
Author: Ben Langmuir <blangmuir@apple.com>
Date:   Mon May 8 15:59:51 2023 -0700

    [clang] Prevent creation of new submodules in ASTWriter
    
    Avoid inferring new submodules for headers in ASTWriter's collection of
    affecting modulemap files, since we don't want to pick up dependencies
    that didn't actually exist during parsing.
    
    rdar://109112624
    
--
Date:   Fri May 5 22:18:23 2023 +0900

    [mlir][transform] Clean up SplitHandlesOp
    
    * Rename to `SplitHandleOp`: it splits a single handle.
    * Drop `num_result_handles` attribute: it is redundant and can be inferred from the number of results.
    * Improve documentation and minor code cleanups.
    
    Differential Revision: https://reviews.llvm.org/D149937

commit 1b9d0deb6d53db760a91bcf63c9b2509f95af2bb
--

commit 309bfecf7dddb9d6530fa95656bbcdd82423fd44
Author: Aviad Cohen <aviadcohen7@gmail.com>
Date:   Sat Apr 22 20:01:22 2023 +0300

    [mlir][tosa] Call TosaInferShapes pass in addTosaToLinalgPasses
    
    This pass is useful to legalize rankless and dynamic shapes towards static using operands' shapes & types.
    
    Reviewed By: jpienaar
    
--

    [lldb] Use templates to simplify {Get,Set}PropertyAtIndex (NFC)
    
    Use templates to simplify {Get,Set}PropertyAtIndex. It has always
    bothered me how cumbersome those calls are when adding new properties.
    After this patch, SetPropertyAtIndex infers the type from its arguments
    and GetPropertyAtIndex required a single template argument for the
    return value. As an added benefit, this enables us to remove a bunch of
    wrappers from UserSettingsController and OptionValueProperties.
    
    Differential revision: https://reviews.llvm.org/D149774
--

commit 19109a274e67f8f6a30a0da22b2135daa327bb79
Author: Spenser Bauman <sbauman@mathworks.com>
Date:   Tue May 2 08:17:45 2023 -0700

    [mlir][tosa] Fix crash when inferring shape of tosa.equal
    
    The tosa-infer-shapes pass crashes when trying to infer the output shape
    of tosa.equal when the input shape is unranked.
    This is due to tosa-infer-shapes requiring at least information on the
    base type of the resulting operation from inferReturnTypeComponents.
    This change enhances EqualOp::inferReturnTypeComponents to always supply
    the inferred elementType.
    
    Reviewed By: eric-k256
    
    Differential Revision: https://reviews.llvm.org/D149582

--
Date:   Thu Apr 27 21:32:28 2023 +0800

    [InstCombine] Add frozen for the condition value of SelectInst
    
    If the condition value of SelectInst may be a poison or undef value,
    infer constant range at SelectInst use is incorrect, similar to D143883.
    Fixes https://github.com/llvm/llvm-project/issues/62401
    
    Reviewed By: nikic
    Differential Revision: https://reviews.llvm.org/D149339

--
Author: DianQK <dianqk@dianqk.net>
Date:   Thu Apr 27 08:10:15 2023 +0800

    [GlobalOpt] Don't replace the aliasee if it has other references.
    
    As long as aliasee has `@llvm.used` or `@llvm.compiler.used` references, we cannot do the related replace or delete operations. Even if it is a Local Linkage, we cannot infer if there is no other use for it, such as asm or other future added cases.
    
    Reviewed By: nikic
    
    Differential Revision: https://reviews.llvm.org/D145293

--

commit d918ff92b45e8f471b3b9cd17255f3d99b2ac757
Author: Artur Gainullin <artur.gainullin@intel.com>
Date:   Wed Apr 26 15:30:54 2023 -0700

    [SYCL] Follow fix for infer-address-spaces.cpp test

commit 921b45a855f09afe99ea9c0c173794ee4ccd5872
Author: Congcong Cai <congcongcai0907@163.com>
Date:   Tue Apr 25 00:30:58 2023 +0200

--

commit af1cf61e39aae98444280ee7c27d910128f7fbc1
Author: Freddy Ye <freddy.ye@intel.com>
Date:   Wed Apr 26 20:29:26 2023 +0800

    Update infer-address-spaces.cpp (#9216)

commit 8b39527535ff50837da08509392e3268fb6129f0
Author: Jordan Rupprecht <rupprecht@google.com>
Date:   Wed Apr 26 05:28:15 2023 -0700

--

commit 8fa0cfeb61a12ad5ca7830a8228155de32aa7ab2
Author: Alvin Wong <alvin@alvinhc.com>
Date:   Sun Apr 23 23:58:24 2023 +0800

    [LLD][COFF] Add /inferasanlibs to lld-link as ignored flag
    
    MSVC link.exe added this flag and MS STL started using this flag in
    .drectve [1] when compiling with Clang with asan enabled, as reported
    on https://github.com/llvm/llvm-project/issues/56300. This causes issues
    with lld-link because it rejects any unknown flags in .drective sections.
--

commit 7a6dc3d24c34c5e350aefba90d05578010dc74c6
Author: Craig Topper <craig.topper@sifive.com>
Date:   Sun Apr 23 20:32:14 2023 -0700

    [TableGen] Remove unused ForceMode and CodeGen fields from TypeInfer. NFC
    
    As well as the ForceMode field in PatternToMatch.

commit 806056abae30797d63c26c2d61918a8a85ca91b2
Merge: 5fe29b215746 8e3a5a965a14
--

commit 2dd396c18bc035f8f87fb7ca2c33b8f00c287759
Author: Aviad Cohen <aviadcohen7@gmail.com>
Date:   Mon Apr 17 09:44:06 2023 +0300

    [mlir] tosa.reshape - Add InferTensorType interface
    
    When this interface is used, a call to inferReturnTypeComponents()
    is generated on creation and verification of the op.
    
    Reviewed By: jpienaar
    
    Differential Revision: https://reviews.llvm.org/D148498
--
Date:   Wed Apr 19 19:57:27 2023 +0800

    [LVI][CVP] Don't compute CR at SelectInst Use if Cond value may not be well-defined
    
    If the condition value of SelectInst may be a poison or undef value,
    infer constant range at SelectInst use is in correct.
    
    See https://alive2.llvm.org/ce/z/MWMTYn
    
    Fixes: https://github.com/llvm/llvm-project/issues/62200
    
--

commit 4cdb91f9e700a74c0f40c9495d08a64365687a57
Author: Nikita Popov <npopov@redhat.com>
Date:   Tue Apr 18 12:33:58 2023 +0200

    [SCEV] Clarify inference in isAddRecNeverPoison()
    
    The justification in isAddRecNeverPoison() no longer applies, as
    it dates back to a time where LLVM had an unconditional forward
    progress guarantee. However, we also no longer need it, because we
    can exploit branch on poison UB instead.
--

commit 750e20e1713cbf51fb622804b4162e51844f52e0
Author: Daniel Woodworth <daniel.woodworth@intel.com>
Date:   Wed Apr 19 15:23:57 2023 -0400

    [InferAttrs] Mark frexp and modf as memory(argmem: write)
    
    These two math library functions can't write to errno, but they do
    produce two results and store the second result to a pointer passed as
    their second argument. Appropriately marking them as
    memory(argmem: write) enables more optimizations on calls to them.
--

commit 7cdea872d42a9b195fbd7e66fb94ec29085de24a
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Tue Apr 18 13:17:45 2023 +0700

    [Test] Add test showing that we can infer nsw

commit a04ffdb0c0b1b3bfa580b5a0601e5d84e4e437ec
Merge: ee32d0fdd026 33817296c600
Author: Freddy Ye <freddy.ye@intel.com>
Date:   Tue Apr 18 13:23:59 2023 +0800
--
    toolchain. We don't actually need the CUDA toolchain to create the
    exported `libcgpu.a` library because it's pure LLVM-IR. However, for
    some language features we need the PTX version to be set. This is
    normally set by checking the CUDA version, but without one installed it
    will fail to build. We instead choose a minimum set of features on the
    desired target, inferred from
    https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#release-notes
    and the PTX refernece for functions like `nanosleep`.
    
    Reviewed By: tianshilei1992
    
--
Author: Zain Jaffal <z_jaffal@apple.com>
Date:   Fri Apr 14 15:37:06 2023 +0100

    [ConstraintElimination] Add tests to check for transfering facts from sgt to ugt.
    
    If we have a >s b and we know that b >s 0 then we also can infer that a >u b.
    
    Reviewed By: fhahn
    
    Differential Revision: https://reviews.llvm.org/D148321

--

commit 9fe78db4cd1c18fc36a2f2bcc849adf2941027ba
Author: Nikita Popov <npopov@redhat.com>
Date:   Thu Apr 6 10:49:42 2023 +0200

    [FunctionAttrs] Fix nounwind inference for landingpads
    
    Currently, FunctionAttrs treats landingpads as non-throwing, and
    will infer nounwind for functions with landingpads (assuming they
    can't unwind in some other way, e.g. via resum). There are two
    problems with this:
    
    * Non-cleanup landingpads with catch/filter clauses do not
      necessarily catch all exceptions. Unless there are catch ptr null
--

commit 09fecbbf5409e321f5e45b8120c26b12b8b742e6
Author: Craig Topper <craig.topper@sifive.com>
Date:   Fri Apr 7 23:38:04 2023 -0700

    [TableGen] Simplify TypeInfer::expandOverloads. NFC
    
    Directly test the 5 overloaded types instead of doing extra
    set creation and iteration.

commit 11ad7d2935afe965c9e8c7ba4732215b404ff57f
--

commit 709cafb10db7c1daf894a32091cd559b15c43514
Author: Nikita Popov <npopov@redhat.com>
Date:   Thu Apr 6 10:41:10 2023 +0200

    [FunctionAttrs] Add additional nounwind inference tests (NFC)
    
    For PR61945.

commit 47ee8519ec2620ffe376d9b28cba8a2a0a73214a
Author: Timm Bäder <tbaeder@redhat.com>
--

commit 3500e11065d616f4653ea8ba8c979b29c69a00d7
Author: Aviad Cohen <aviadcohen7@gmail.com>
Date:   Sun Apr 2 12:12:15 2023 +0300

    [mlir][tosa] Add InferTensorType interface to tosa reduce operations
    
    When this interface is used, a call to inferReturnTypeComponents()
    is generated on creation and verification of the op.
    
    Reviewed By: jpienaar, eric-k256
    
    Differential Revision: https://reviews.llvm.org/D147407
--
    Additionally, these annotations remove the need to analyze the body of
    a named sequence to understand its effects on the arguments. Make them
    required for named sequences that are called from the same file, in
    addition to external sequences.
    
    Provide a convenience pass that infers annotations by analyzing bodies
    of named sequences provided they are not called from the same file.
    
    Reviewed By: springerm
    
    Differential Revision: https://reviews.llvm.org/D147223
--

commit 273cbb58e5e272d265a247234555a42526ee5e9a
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Thu Mar 30 19:17:13 2023 +0700

    [Test] Add test showing that SCEV cannot infer simple facts for decrementing AddRecs

commit ab8150acc5256f7607587f576eb685cb8dd32d96
Author: Mikhail Maltsev <mikhail.maltsev@arm.com>
Date:   Thu Mar 30 13:14:59 2023 +0100

--

commit e64cc756819d567f453467bf7cc16599ad296fdd
Author: Pavel Labath <pavel@labath.sk>
Date:   Mon Mar 27 17:39:55 2023 +0200

    [lldb-server/linux] Use waitpid(-1) to collect inferior events
    
    This is a follow-up to D116372, which had a rather unfortunate side
    effect of making the processing of a single SIGCHLD quadratic in the
    number of threads -- which does not matter for simple applications, but
    can get really bad for applications with thousands of threads.
--
Author: Ellis Hoag <ellis.sparky.hoag@gmail.com>
Date:   Wed Mar 29 12:58:42 2023 -0700

    [InstrProf] Minimal Block Coverage
    
    This diff implements minimal block coverage instrumentation. When the `-pgo-block-coverage` option is used, basic blocks will be instrumented for block coverage using single byte booleans. The coverage of some basic blocks can be inferred from others, so not every basic block is instrumented. In fact, we found that only ~60% of basic blocks need to be instrumented. These differences lead to less size overhead when compared to instrumenting block counts. For example, block coverage on the clang binary has an overhead of 20 Mi (17%) compared to 56 Mi (47%) with block counts.
    
    Even though block coverage profiles have less precision than block count profiles, they can still be used to guide optimizations. In `PGOUseFunc` we use block coverage to populate edge weights such that BFI gives nonzero counts to only covered blocks. We do this by 1) setting the entry count of covered functions to a large value, i.e., 10000 and 2) populating edge weights using block coverage. In the next diff https://reviews.llvm.org/D125743 we use BFI to guide the machine outliner to avoid outlining covered blocks. This `-pgo-block-coverage` option provides a trade off of generating less precise profiles for faster and smaller instrumented binaries.
    
    The `BlockCoverageInference` class defines the algorithm to find the minimal set of basic blocks that need to be instrumented for coverage. This is different from the Kirchhoff circuit law optimization that is used for edge **counts** because that does not work for block **coverage**. The reason for this is that edge counts can be added together to find a missing count while block coverage cannot since they store boolean values. So we need a new algorithm to find which blocks must be instrumented.
    
    The details on this algorithm can be found in this paper titled "Minimum Coverage Instrumentation": https://arxiv.org/abs/2208.13907
    
    Special thanks to Julian Mestre for creating this block coverage inference algorithm.
    
    Binary size of `clang` using `-O2`:
    
    * Base
      * `.text`: 65.8 Mi
--

commit 9efb4db29dcc94b32710884e5af3f4e0b38263a6
Author: Alex Langford <alangford@apple.com>
Date:   Mon Mar 27 14:03:12 2023 -0700

    [lldb] TestInferiorCrashing.py should check for crash reason
    
    In a now-reverted series of patches, I inadvertently broke the ability
    for lldb-server to explain a crash reason. To ensure that this feature
    continues to work after future refactors, let's test the feature.
    
--

commit 352d6fe1eb2214cae974c36ee0b1bbc2cc0f91e3
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Mon Mar 27 03:48:21 2023 -0700

    [mlir][Linalg] NFC - Move transform utilities related to subcomputation inference to Linalg/Utils

commit 8dcdc37a5fca72db61c63304c52e0e2da925143a
Author: Jay Foad <jay.foad@amd.com>
Date:   Thu Jan 12 21:02:23 2023 +0000

--
Author: Matthias Gehre <matthias.gehre@xilinx.com>
Date:   Thu Mar 23 01:08:43 2023 +0000

    [mlir][tosa] TosaToLinalg: Lower TOSA.Cast via RoundEven according to TOSA spec 0.60.0
    
    TOSA now specifies rounding of ties to even in section 1.8.2., "Main Inference Profile"
    
    Reviewed By: eric-k256, rsuderman
    
    Differential Revision: https://reviews.llvm.org/D146617

--

commit 6afcc54ac7d68fa2b28f0e7cbf9dc1d4ac7fb95e
Author: Philip Reames <preames@rivosinc.com>
Date:   Wed Mar 22 09:51:58 2023 -0700

    [SCEV] Infer no-self-wrap via constant ranges
    
    Without this, pointer IVs in loops with small constant trip counts couldn't be proven no-self-wrap. This came up in a new LSR transform, but may also benefit other SCEV consumers as well.
    
    Differential Revision: https://reviews.llvm.org/D146596

--

commit c49e56a2954fe77742487394279bf670213525b5
Author: Philip Reames <preames@rivosinc.com>
Date:   Tue Mar 21 18:34:40 2023 -0700

    [SCEV] Add coverage for a missing flag inference case

commit d70e7ea0d1e556037ef5b6874734cf51396b033b
Author: Jon Chesterfield <jonathanchesterfield@gmail.com>
Date:   Wed Mar 22 01:23:19 2023 +0000

--
    
    There are two key differences between this and LFTR.
    
    First, I allow a non-concrete start to the IV. The goal of LFTR is to canonicalize and IVs with constant starts are canonical, so the very restrictive definition there is mostly okay. Here on the other hand, we're explicitly moving *away* from the canonical form, and thus need to handle non-constant starts.
    
    Second, LFTR bails out instead of removing inbounds on a GEP. This is a pragmatic tradeoff since inbounds is hard to infer and assists aliasing. This pass runs very late, and I think the tradeoff runs the other way.
    
    A different approach we could take for the post-inc check would be to perform a pre-inc check instead of a post-inc check. We would still have to check the pre-inc IV, but that would avoid the need to drop inbounds. Doing the pre-inc check would basically trade killing a whole IV for an extra register move in the loop. I'm open to suggestions on the right approach here.
    
    Note that this analysis is quite expensive compile time wise. I have made no effort to optimize (yet).
    
--

commit fd004a4986eb3ecc14f03a4ff4eef9bc06c78059
Author: Maya Amrami <maya.amrami@mobileye.com>
Date:   Thu Mar 9 13:51:27 2023 +0200

    [mlir] tosa.concat - Add InferTensorType interface
    
    When this interface is used, a call to inferReturnTypeComponents()
    is generated on creation and verification of the op.
    A few changes were required in inferReturnTypeComponents():
    - Emit error when it fails.
      The verifier calls this method now, and it is preferable to
      indicate what caused the failure.
    - Fix the inferred return shapes so they have a type too.
    
    Reviewed By: rsuderman
    
    Differential Revision: https://reviews.llvm.org/D146132

--
Author: Pavel Labath <pavel@labath.sk>
Date:   Tue Mar 21 11:19:13 2023 +0100

    [lldb] Relax expectation on TestMainThreadExit
    
    The exit code of the (funky) test inferior depends on the linux kernel
    version (changed some time between 5.15 and 6.1).

commit c270aafb182c61123daa55ab53794af7f4ff9757
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Tue Mar 21 17:11:10 2023 +0700
--

commit 6705f634f6455100ba66734c96a3cc04a5f00d7d
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Thu Mar 2 21:04:22 2023 -0400

    Attributor: Start looking at uses when inferring nofpclass
    
    Pretty much just copy pasted from noundef handling

commit a171e98dd2ad5af45f6dbea724d24eff0e8e739c
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
--

commit 94026ce56df244ddad76fe5c28c41a3523f129b2
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Feb 24 10:57:39 2023 -0400

    Attributor: Start inferring nofpclass
    
    Some of this is boilerplate which doesn't do anything yet.

commit 8a37512924de3bdc82183c53099fde3e0575f233
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
--
Author: Juergen Ributzka <juergen@ributzka.de>
Date:   Thu Mar 16 15:28:48 2023 -0700

    [clang] Unconditionally add autolink hints for frameworks.
    
    Clang infers framework autolink hints when parsing a modulemap. In order to do
    so, it checks if the module is a framework and if there is a framework binary
    or TBD file in the SDK. Only when Clang finds the filei, then the autolink hint
    is added to the module metadata.
    
    During a project build many clang processes perform this check, which causes
--
Date:   Tue Mar 14 18:55:39 2023 +0000

    [mlir][tosa] Add FFT2d operation
    
    Adds the FFT2d TOSA operation and supporting
    shape inference function.
    
    Signed-off-by: Luke Hutton <luke.hutton@arm.com>
    
    Reviewed By: rsuderman, eric-k256
    
--

    [IPSCCP] Don't require noundef for !range annotation
    
    Since https://reviews.llvm.org/D141386 !range violations return
    poison instead of causing immediate undefined behavior. As such,
    it is fine for IPSCCP to infer !range even if the value might be
    poison. (The value cannot be undef as this would promote undef to
    poison, but this is already checked separately.)
    
    This basically undoes the late change done to D83952, restoring
    it to its original version (which is now valid).
--
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Thu Mar 2 16:19:23 2023 -0800

    [Pipeline] Adjust PostOrderFunctionAttrs placement in simplification pipeline
    
    We can infer more attribute information once functions are fully
    simplified, so move the PostOrderFunctionAttrs pass after the function
    simplification pipeline. However, just doing this can impact
    simplification of recursive functions since function simplification
    takes advantage of function attributes of callees (some LLVM tests are
    actually impacted by this), so keep a copy of PostOrderFunctionAttrs
--

    [clang-tidy] altera-id-dependent-backward-branch: refactor test
    
    This is a preparation for future fixes that need more tests.
    
    * Put all "Inferred Assignments" testing at the end
    * Group together ID-dependent variable/member testing
    * Group together unused inferred assignments
    * Use a literal instead of `get_local_size` which may have special meaning
    * Create a new `struct` for each variable because analysis is done per field,
      not per field per instance.
    
    Depends on D145303
--
Author: Ivan Kosarev <ivan.kosarev@amd.com>
Date:   Tue Feb 28 11:50:50 2023 +0000

    [AMDGPU][NFC] Eliminate the u32imm operand definition.
    
    It is only used to infer the types of offset parameters in isel patterns,
    which we can specify directly.
    
    Reviewed By: piotr
    
    Differential Revision: https://reviews.llvm.org/D144890
--

commit dc07867dc9991c982bd3441da19d6fcc16ea54d6
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Thu Feb 23 13:19:08 2023 -0800

    [clang][Driver] Pass /INFERASANLIBS:NO to link.exe under -fsanitize=address
    
    With recent MSVC releases, STL headers will add /INFERASANLIBS to the drectve section of object files that are compiled with clang. With this flag, link.exe will automatically attempt to look for asan libs.
    
    When using clang as the driver to invoke the linker, we want to disable this feature because we explicitly pass the proper asan libraries, otherwise we get symbols defined multiple times.
    
    Reviewed By: hans
    
--

commit 4d0365101f98061dbaf409c0f390778ef66672e7
Author: Hanhan Wang <hanchung@google.com>
Date:   Wed Feb 22 16:58:37 2023 -0800

    [mlir][tensor] Improve size inference in tiling tensor.pack ops.
    
    The sizes of input operands need being clampled only when there are
    incomplete tiles, i.e., the padding value is set. The shape input slice
    can be folded into constants when they are static shapes and tiling
    sizes.
--

commit 718cea8e6864b9d185f14ee361fce77dc32c5cb8
Author: Nikita Popov <npopov@redhat.com>
Date:   Wed Feb 22 10:23:11 2023 +0100

    [FunctionAttrs] Move nosync inference into inferAttrsFromFunctionBodies() (NFC)
    
    There doesn't appear to be any reason why this attribute is
    inferred separately from other ones that use AttributeInferer.

commit bafc4dfc764587de577a354e459ea351b43fdb43
Author: Matthias Springer <springerm@google.com>
Date:   Wed Feb 22 10:41:22 2023 +0100

--

commit d3e84953ddbbfc2b6298ae108f5852ba7786e9c8
Author: Nikita Popov <npopov@redhat.com>
Date:   Wed Feb 22 09:31:12 2023 +0100

    [FunctionAttrs] Slightly clean up returned attr inference (NFC)
    
    Use hasAttrSomewhere() and directly return Argument from the
    helper.

commit c65328305e98a806ae0eb811c7f17e3c5b0c0158
--
Author: Zain Jaffal <z_jaffal@apple.com>
Date:   Wed Feb 15 15:07:14 2023 +0000

    [ConstraintElimination] Change debug output to display variable names.
    
    Previously when constraint system outputs the rows in the system the variables used are x1,2...n making it hard to infer which ones they relate to in the IR
    
    Reviewed By: fhahn
    
    Differential Revision: https://reviews.llvm.org/D142618

--
    The current OpenMP implementation assumes the use of typed pointers (or rather typed pointer like types). Given the support for typed pointers in LLVM is now pending removal, the OpenMP Dialect should be able to support opaque pointers as well, given that any users of it must lower OpenMP through the LLVM Dialect.
    
    This patch fixes the above and adds support for using LLVM opaque pointers with the OpenMP dialect. This is implemented by making all related code not make use of the element type of pointer arguments. The few (one) op requiring a pointer element type now use an explicit `TypeAttr` for representing the element type.
    More concretely, the list of changes are:
    * `omp.atomic.read` now has an extra `TypeAttr` (also in syntax) which is the element type of the values read and stored from the operands
    * `omp.reduction` now has an type argument in the syntax for both the accmulator and operand since the operand type can no longer be inferred from the accumulator
    * `OpenMPToLLVMIRTranslation.cpp` was rewritten to never query element types of pointers
    * Adjusted the verifier to be able to handle pointers without element types
    
    Differential Revision: https://reviews.llvm.org/D143582

--

commit f71de259c373cf91abf33c99f375fb9c64c3a441
Author: Hanhan Wang <hanchung@google.com>
Date:   Thu Feb 9 17:24:26 2023 -0800

    [mlir][tensor] Add shape inference methods to tensor::PackOp.
    
    Reviewed By: mravishankar
    
    Differential Revision: https://reviews.llvm.org/D143686

--

commit 29b95f05738fed5bf9777e285ccb084ada54b9b1
Author: Jan Svoboda <jan_svoboda@apple.com>
Date:   Wed Feb 8 16:20:49 2023 -0800

    [clang][deps] NFC: Refactor inferred modules test
    
    This patch squashes two tests with identical inputs into a single test, and adopts the `split-file` utility. This allows us to remove `sed` invocation with multiple commands, where "s|-E|-x objective-c -E|g" could've caused issues if previous replacements injected path containing "-E".
    
    Reviewed By: benlangmuir
    
--

commit 1528b704995c53b384542d11b488ffeb12f2a85e
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Tue Feb 7 10:16:46 2023 -0800

    [mlir][Linalg] NFC - Extract inferGemmDims - Amend forgotten changes

commit edd900201a045595b818707fa90dea3926050c23
Author: Igor Chorążewicz <igor.chorazewicz@intel.com>
Date:   Tue Feb 7 10:06:57 2023 -0800

--

commit 89675aaba7e3f5452988aca773a017959da97ee9
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Tue Feb 7 09:58:02 2023 -0800

    [mlir][Linalg] NFC - Extract inferGemmDims

commit a4b4f62beb0bf40123181e5f5bdf32ef54f87166
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Tue Dec 20 13:36:20 2022 -0800

--

commit ee308c99ed0877edc286870089219179a2c64a9e
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Thu Feb 2 12:23:46 2023 -0800

    [mlir][py] Fix infer return type invocation for variadics
    
    Previously we only allowed the flattened list passed in, but the same
    input provided here as to buildGeneric so flatten accordingly. We have
    less info here than in buildGeneric so the error is more generic if
    unpacking fails.
--

    [mlgo] Hook up the interactive runner to the mlgo-ed passes
    
    This hooks up the interactive model runner to the passes that support
    ml-based decisions. Because the interface to this runner is the exact
    same as the one used during inference, we just reuse the exact same
    setup we have for "release mode". This makes "release mode" a misnomer -
    and that's something we needed to resolve sooner or later (e.g.
    supporting more than one embedded model for the same problem was another
    reason to drop that nomenclature). That will happen in a subsequent
    change.
--
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Fri Feb 3 16:00:24 2023 +0700

    [Test] Add motivating test for umin support in SCEVLoopGuardRewriter
    
    This test is equivalent to another one, where we can infer a
    reasonable iteration count. The only difference is that umin and zext
    here are swapped, and rewriter fails here.

commit d54d99748db6cc6de9b4601434704e99124289f3
Author: David Sherwood <david.sherwood@arm.com>
--

commit 78f88082de3627ea04501c83a08f52cf1e60b4f7
Author: Nikita Popov <npopov@redhat.com>
Date:   Wed Feb 1 14:34:38 2023 +0100

    [ConstantFold] Fix incorrect inbounds inference for [0 x T] GEPs
    
    Previously all indices into [0 x T] arrays were considered in
    range, which resulted in us incorrectly inferring inbounds for
    all GEPs of that form. We should not consider them in range here,
    and instead bail out of the rewriting logic (which would divide
    by zero).
    
    Do continue to consider 0 always in range, to avoid changing
--

commit 5f01a626dd0615df49773d419c75aeb33666ee83
Author: Nikita Popov <npopov@redhat.com>
Date:   Mon Jan 30 15:30:20 2023 +0100

    [ConstantFold] Fix inbounds inference on mismatching source element type
    
    When inferring that a GEP of a global variable is inbounds because
    there is no notional overindexing, we need to check that the
    global value type and the GEP source element type match.
    
    This was not necessary with typed pointers (because we would have
    a bitcast in between), but is necessary with opaque pointers.
    
    We should be able to recover some of the safe cases by performing
    an offset based inbounds inference in DL-aware ConstantFolding.

commit e833806455a8dee070c3fd0d2214842df65b3054
Author: smaslov-intel <sergey.v.maslov@intel.com>
Date:   Tue Jan 31 02:29:23 2023 -0800

--

commit 7d10213317c18e1d24753e5532d2b037db2d2c5c
Author: Florian Hahn <flo@fhahn.com>
Date:   Mon Jan 30 20:15:28 2023 +0000

    Recommit "[SCCP] Support NUW/NSW inference for all overflowing binary operators."
    
    This reverts commit 43acb61a08fffada31fb2e20e45fcc8492ef76b9.
    
    Recommit the patch after fixing the issue causing the revert in 4e607ec4987.
    Extra tests have been added in 5c6cb61ad416a544.
    
    Original commit message:
    
       Extend the NUW/NSW inference logic add in 72121a20cd and cdeaf5f28c3dc
        to all overflowing binary operators.
    
        Reviewed By: nikic
    
        Differential Revision: https://reviews.llvm.org/D142721
--

commit 5c6cb61ad416a544e9260dcf5da26631675f5e4e
Author: Florian Hahn <flo@fhahn.com>
Date:   Mon Jan 30 19:40:36 2023 +0000

    [SCCP] Add sub tests for NUW/NSW flag inference.
    
    Those tests add coverage for a miscompile with 024115ab14822a97c.

commit 6d9b0759c24e93c2ef1f10ca59c7317c7b440468
Author: Alex Brachet <abrachet@google.com>
--

commit 0254de09eb5699170724f1fbf6351c5266533a85
Author: Nikita Popov <npopov@redhat.com>
Date:   Mon Jan 30 15:27:37 2023 +0100

    [InferAddressSpaces] Regenerate test checks (NFC)

commit 7b182d788e7ba94da1cc620050a65c276de86607
Author: Xiang <python3kgae@outlook.com>
Date:   Sun Jan 29 18:12:47 2023 -0500

--
Author: Matthias Springer <springerm@google.com>
Date:   Mon Jan 30 10:12:28 2023 +0100

    [mlir][bufferization][NFC] Simplify func bufferization state
    
    The analysis previous kept track of OpOperand -> OpResult and OpResult -> OpOperand aliasing mappings. Only one mapping is needed, the other one can be inferred.
    
    Differential Revision: https://reviews.llvm.org/D142128

commit f3483c23ce2c833f9bcb6edb2ac99e7af76218ad
Author: Matthias Springer <springerm@google.com>
--

commit 43acb61a08fffada31fb2e20e45fcc8492ef76b9
Author: Florian Hahn <flo@fhahn.com>
Date:   Sat Jan 28 21:33:28 2023 +0000

    Revert "[SCCP] Support NUW/NSW inference for all overflowing binary operators."
    
    This reverts commit 024115ab14822a97c09adcd2545c14e78b843b36.
    
    I suspect that this may be causing some buildbot bootstrapping failures.
    Revert while I investigate.
--

commit 024115ab14822a97c09adcd2545c14e78b843b36
Author: Florian Hahn <flo@fhahn.com>
Date:   Sat Jan 28 17:40:40 2023 +0000

    [SCCP] Support NUW/NSW inference for all overflowing binary operators.
    
    Extend the NUW/NSW inference logic add in 72121a20cd and cdeaf5f28c3dc
    to all overflowing binary operators.
    
    Reviewed By: nikic
    
    Differential Revision: https://reviews.llvm.org/D142721
--

commit 054931dbf11687cb95576690d8f74ffd9b0da007
Author: Artem Belevich <tra@google.com>
Date:   Thu Jan 26 13:28:31 2023 -0800

    [NVPTX] Infer AS of pointers passed to kernels as integers.
    
    When pointers are passed within aggregates, we sometimes end up with IR that
    loads them as integers and the converts them back to pointers. Typically it's
    due to a memcpy or SROA. E.g. https://godbolt.org/z/xM3n5daaa
    
--
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Thu Jan 26 12:30:54 2023 -0800

    [mlir][Linalg] Adding a greedy packing transform dialect op.
    
    This PR adds a `pack_greedily` transform operation that infers the packing for gemm
    subcomputations embedded within in any LinalgOp and packs accordingly.
    A normalization step guarantees that we get the innermost op dimensions in one of `8`
    possible `(m, n, k)` orders, specified as a parameter, from which we can emit all
    packed forms.
    
--

commit 54ee1ff254db9466e48a67b9e45519698d384c46
Author: Florian Hahn <flo@fhahn.com>
Date:   Wed Jan 25 21:41:14 2023 +0000

    [SCCP] Add additional tests for Add NUW/NSW flag inference.

commit bfe4514add5b7ab7e1f06248983a7162d734cffb
Author: Jon Chesterfield <jonathanchesterfield@gmail.com>
Date:   Wed Jan 25 21:38:49 2023 +0000

--

commit 5b16cd97b8e1c273c662aa379bcbce4d9f2e488d
Author: Florian Hahn <flo@fhahn.com>
Date:   Wed Jan 25 12:22:56 2023 +0000

    [SCCP] Add extra tests for Add flag inference.
    
    Add extra tests from #60280 and #60278 as well as test showing missed
    optimization opportunity.

commit 024e4f16ca795b98a5dea371cab623f851858925
--
Date:   Tue Jan 24 15:42:02 2023 -0800

    [mlir][tosa] Add RFFT2d operation
    
    Adds the RFFT2d TOSA operation and supporting
    shape inference function.
    
    Signed-off-by: Luke Hutton <luke.hutton@arm.com>
    Change-Id: I7e49c47cdd846cdc1b187545ef76d5cda2d5d9ad
    
    Reviewed By: jpienaar
--
Author: Manas <manas18244@iiitd.ac.in>
Date:   Wed Jan 25 02:29:05 2023 +0530

    [analyzer][solver] Improve reasoning for not equal to operator
    
    This patch fixes certain cases where solver was not able to infer
    disequality due to overlapping of values in rangeset. This case was
    casting from lower signed type to bigger unsigned type.
    
    Reviewed By: steakhal
    
--

commit feea695653df9879027e63c3565434fcb2020fba
Author: Florian Hahn <flo@fhahn.com>
Date:   Tue Jan 24 14:14:27 2023 +0000

    [SCCP] Add vector add tests for nuw/nsw inference.
    
    Also removes a dead argument from some tests.

commit 34dc1654f2d0ba27de7db887ba995ba62a9199bf
Author: David Green <david.green@arm.com>
--

commit 0d2e67b273f6e73d395bfa3e5a57e6d66cd633ab
Author: Florian Hahn <flo@fhahn.com>
Date:   Mon Jan 23 16:14:56 2023 +0000

    [SCCP] Add initial tests for NUW/NSW inference.

commit b1d1a1a59243669914a63c9d9113ad26ccf35a80
Author: Ties Stuij <ties.stuij@arm.com>
Date:   Mon Jan 23 16:08:28 2023 +0000

--

commit 255922be7f008362bae16c708a2d90f60b4aba35
Author: Joseph Huber <jhuber6@vols.utk.edu>
Date:   Thu Jan 19 11:49:15 2023 -0600

    [OpenMP] Clean up AMD handling for `-fopenmp-targets=amdgcn` arch inference
    
    Previously we had some special handling here that errored out if
    multiple architectures were detected. This isn't a problem anymore as
    the runtime can handle multi-archicture binaries automatically. So it's
    safe to simply take the first architecture that we know works. If users
--

commit 5af9d16dae71f2c2087ba88c5fc06893e6aecfe9
Author: Krzysztof Drewniak <Krzysztof.Drewniak@amd.com>
Date:   Mon Jan 9 17:09:17 2023 +0000

    [mlir][Index] Implement InferIntRangeInterface, re-land
    
    Re-land D140899 to fix a missing dependency in the index dialect's
    CMakeLists.txt.
    
    Reviewed By: Mogball
--
Author: Frederik Gossen <frgossen@google.com>
Date:   Fri Jan 20 10:51:16 2023 -0500

    [MLIR] Remove scf.if builder with explicit result types and callbacks
    
    Instead, use the builder and infer the return type based on the inner `yield` ops.
    Also, fix uses that do not create the terminator as required for the callback builders.
    
    Differential Revision: https://reviews.llvm.org/D142056

commit e6241cbdcbf3cc9beb49460578466e18936ef220
--

commit 029f1a4efd25c985fa87fdebcd0704a281d99a9f
Author: Frederik Gossen <frgossen@google.com>
Date:   Fri Jan 20 10:36:40 2023 -0500

    [MLIR] Address post-submit comments on scf.if's InferTypeOpInterface
    
    Differential Revision: https://reviews.llvm.org/D142155

commit a920ae3b8d1e998317052cd4fad7a78289235af9
Author: Alexey Lapshin <a.v.lapshin@mail.ru>
--

commit 9f59affa244c1b15d9980c9abcaff433514a9d85
Author: Krzysztof Drewniak <Krzysztof.Drewniak@amd.com>
Date:   Thu Jan 19 18:41:00 2023 +0000

    Revert "[mlir][Index] Implement InferIntRangeInterface"
    
    This reverts commit 455305624884cf9237143e2ba0635fcc5ba5206a.
    
    Linker error, unbreak build while I work out how to fix it.
    
--

commit 7f66e1833f62d6f7269adc60ac18bbaa820f64ae
Author: Frederik Gossen <frgossen@google.com>
Date:   Thu Jan 19 13:18:22 2023 -0500

    [MLIR] Add InferTypeOpInterface to scf.if op
    
    Differential Revision: https://reviews.llvm.org/D142049

commit b5d9f00b2096290653fcb6e8de38d5c352af63a0
Author: Erich Keane <erich.keane@intel.com>
--

commit 455305624884cf9237143e2ba0635fcc5ba5206a
Author: Krzysztof Drewniak <Krzysztof.Drewniak@amd.com>
Date:   Mon Jan 9 17:09:17 2023 +0000

    [mlir][Index] Implement InferIntRangeInterface
    
    Implement InferIntRangeInterface for all operations in the Index dialect. The
    inference implementation, unlike the one for Arith, accounts for the
    fact that Index can be either 64 or 32 bits long by evaluating both
    cases. Bounds are stored as if index were i64, but when inferring new
    bounds, we compute both f(...) and f(trunc(...)). We then compare
    trunc(f(...)) to f(trunc(...)). If they are equal in the relevant
    range components, we use the 64-bit range computation, otherwise we
    give the range ext(f(trunc(...))) union f(...).
    
    Note that this can cause surprising behavior as seen in the tests,
    where, for example, the order of min and max operations impacts the
    behavior of the inference. The inference could perhaps be made more
    precise in the future (ex. by tracking 32 and 64-bit results
    separately and having them influence each other somehow) butt, since
    my project targets an index=i32 platform and doesn't see index-valued
    values > uint32_max, I'm not too concerned about it.
    
--

commit d2f136920b9247a9e5874d4d3a00a880db6e2827
Author: Frederik Gossen <frgossen@google.com>
Date:   Tue Jan 17 14:07:33 2023 -0500

    [MLIR] Add return type inference to scf.if builder
    
    Differential Revision: https://reviews.llvm.org/D141928

commit ca5d11751eff79479db9f15687db5727a312da9e
Author: Noah Goldstein <goldstein.w.n@gmail.com>
--

commit 1b60f0d73c34fec4648bb05f98db75008a50f4d8
Author: Jeff Niu <jeff@modular.com>
Date:   Sun Jan 8 12:46:52 2023 -0800

    [mlir][ods] Generate inferReturnTypes for ops with TypesMatchWith
    
    Ops that use TypesMatchWith to constrain result types for verification
    and to infer result types during parser generation should also be able
    to have the `inferReturnTypes` method auto generated. This patch
    upgrades the logic for generating `inferReturnTypes` to handle the
    TypesMatchWith trait by building a type inference graph where each edge
    corresponds to "type of A can be inferred from type of B", supporting
    transformers other than `"$_self"`.
    
    Reviewed By: lattner, rriddle
    
    Differential Revision: https://reviews.llvm.org/D141231
--
Author: spupyrev <spupyrev@fb.com>
Date:   Mon Dec 12 11:29:02 2022 -0800

    [BOLT] using jump weights in profi
    
    We want to use profile inference (profi) in BOLT for stale profile matching.
    This is the second change for existing usages of profi (e.g., CSSPGO):
    
    (i) Added the ability to provide (estimated) jump weights for the algorithm. The
    goal of the algorithm is to create a valid control flow for a given function
    (that is, one in which incoming counts equal outgoing counts for every basic
--
    so as it utilizes fewer auxiliary nodes. This is done by introducing parallel
    edges to the network (which is supported by MMF) and reduces the size of the
    network from 3*|V| to 2*|V|, where |V| is the number of basic blocks in the
    function.
    
    **Inference (profile quality) impact:**
    The diff is supposed to be a no-op for the inferred counts. However, our
    implementation of MCF is not fully deterministic and might return different
    results depending on the input network model. Since we changed the model
    construction, there are a few differences in comparison to the original
    implementation. I checked manually on an internal benchmark and see a minor
    difference (+/- 1 count for certain basic blocks) in just a dozen of instances
    (out of 10000+ input functions). Hence, the diff is highly unlikely to have an
    impact for existing prod workloads.
    
    **Runtime impact:**
    I measure up to 10% speedup for block-only (ie CSSPGO/AutoFDO) inference and up
    to 50% speedup for block+jump inference (ie BOLT) in comparison to the original
    unoptimized version.
    
    Reviewed By: hoy
    
    Differential Revision: https://reviews.llvm.org/D139870
--
Author: Alex Langford <alangford@apple.com>
Date:   Fri Dec 16 16:19:40 2022 -0800

    [debugserver] Clear memory allocations after exec
    
    After an exec, the inferior is a new process and none of these memory
    regions are still allocated. Clear them out.
    
    Differential Revision: https://reviews.llvm.org/D140253

commit b4ad387ec558dc886c2ab85e4aea10c111cc83c0
--

    [CUDA][HIP] Support '--offload-arch=native' for the new driver
    
    This patch applies the same handling for the `--offload-arch=native'
    string to the new driver. The support for OpenMP will require some extra
    logic to infer the triples from the derived architecture strings.
    
    Depends on D141051
    
    Reviewed By: tra
    
--
Date:   Mon Jan 9 17:05:54 2023 +0000

    [mlir][Index] Add index.mins and index.minu
    
    Signed and unsigned minimum operations were missing from the Index
    dialect and are needed to test integer range inference.
    
    Reviewed By: Mogball
    
    Differential Revision: https://reviews.llvm.org/D141299

commit 6496824ebaf29a39239c1df1b508490382dca2f7
Author: Krzysztof Drewniak <Krzysztof.Drewniak@amd.com>
Date:   Mon Jan 9 16:58:24 2023 +0000

    [mlir][Arith] Fix bug in zero-extension range inference
    
    D135089 extracted the extui code into a helper, but used fromSigned
    instead of fromUnsigned.
    
    Reviewed By: Mogball, ThomasRaoux
--
Author: spupyrev <spupyrev@fb.com>
Date:   Tue Sep 27 11:50:42 2022 -0700

    [BOLT] introducing profi params
    
    We want to use profile inference (**profi**) in BOLT for stale profile matching.
    To this end, I am making a few changes modifying the interface of the algorithm.
    This is the first change for existing usages of profi (e.g., CSSPGO):
    - introducing an object holding the algorithmic parameters;
    - some renaming of existing options;
    - dropped unused option, SampleProfileInferEntryCount, as we don't plan to change its default value;
    - no changes in the output / tests.
    
    Reviewed By: hoy
    
    Differential Revision: https://reviews.llvm.org/D134756
--
Author: James Y Knight <jyknight@google.com>
Date:   Fri Jan 6 10:11:44 2023 -0500

    Remove special cases for invoke of non-throwing inline-asm.
    
    Non-throwing inline asm infers the nounwind attribute in
    instcombine. Thus, it can be handled in the same manner as
    non-throwing target functions are generally. Further special casing is
    unnecessary complexity.

commit 7ce53e31023dcf9d8fb95d172e20a35e60ebd821
--

    Make switch-to-lookup-large-types.ll more reliable
    
    When larger integer types are natively supported simplifycfg will use an
    inline constant instead of a global variable for this transform. I noticed
    this while trying to automatically infer the datalayout from the target
    triple in opt if it is not explicitly specified. Since the x86_64
    datalayout includes "n8:16:32:64", this test started failing.
    
    While touching this file also change i128 to i64 in the first test since
    this was intended behaviour in the original commit.
--
Date:   Thu Jan 5 22:04:37 2023 +0000

    [SYCL][NFC] Cleanup wi_data/joint_matrix code (#7929)
    
    There doesn't appear to be any reason to have an #ifdef in get_wi_data,
    so I used the template inference in both cases. I've updated the runtime
    errors to be accurate, and removed some of my old out of date comments.
    
    Signed-off-by: JackAKirk <jack.kirk@codeplay.com>

commit 3acb2553b9bfd205b9d5bee1cef35a6e755e9d4e
--

commit e8c961f53621ffc4a2cd09fae3f584938cb6b493
Author: Mehdi Amini <joker.eph@gmail.com>
Date:   Sat Dec 10 12:53:27 2022 +0000

    Apply clang-tidy fixes for readability-identifier-naming in InferTypeOpInterface.cpp (NFC)

commit ab32f5b7ef7ff203ecf2afe31b85f4ebd102d366
Author: Mehdi Amini <joker.eph@gmail.com>
Date:   Sat Dec 10 12:25:09 2022 +0000

--

commit f5e03912e766dcb43fa6c71f990068cee259bb31
Author: Nikita Popov <npopov@redhat.com>
Date:   Tue Dec 27 10:53:42 2022 +0100

    [InferFunctionAttrs] Convert tests to opaque pointers (NFC)

commit d9ab3e82f30d646deff054230b0c742704a1cf26
Author: serge-sans-paille <sguelton@mozilla.com>
Date:   Mon Dec 26 09:19:09 2022 +0100

--
    reqd_work_group_size, but MLIR currently has no mechanism for doing so.
    
    This set of attributes is the first step in enabling optimizations
    based on the known launch dimensions of kernels. It extends the kernel
    outline pass to set these bounds on kernels with constant launch
    dimensions and extends integer range inference for GPU index
    operations to account for the bounds when they are known.
    
    Subsequent revisions will use this data when lowering GPU operations
    to the ROCDL dialect.
    
--

    [lld][COFF] Fix lld-link crash when several .obj files built with /Zi refer to a .pdb file that failed to load
    
    This patch relaxes the constraints on the error message saved in PDBInputFile when failing to load a pdb file.
    
    Storing an `Error` member infers that it must be accessed exactly once, which doesn't fit in several scenarios:
    - If an invalid PDB file is provided as input file but never used, a loading error is created but never handled, causing an assert at shutdown.
    - PDB file created using MSVC's `/Zi` option : The loading error message must be displayed once per obj file.
    
    Also, the state of `PDBInputFile` was altered when reading (taking) the `Error` member, causing issues:
     - accessing it (taking the `Error`) makes the object look valid whereas it's not properly initialized
--
    
    The relevant part of the trace:
    ```
     #6 0x00007fe6ff5f81a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6)
     #7 0x00007fe6ff5f8252 (/lib64/libc.so.6+0x2f252)
     #8 0x00000000049caed2 (anonymous namespace)::SymbolicRangeInferrer::VisitBinaryOperator(clang::ento::RangeSet, clang::BinaryOperatorKind, clang::ento::RangeSet, clang::QualType) RangeConstraintManager.cpp:0:0
     #9 0x00000000049c9867 (anonymous namespace)::SymbolicRangeInferrer::infer(clang::ento::SymExpr const*) RangeConstraintManager.cpp:0:0
    #10 0x00000000049bebf5 (anonymous namespace)::RangeConstraintManager::assumeSymNE(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::SymExpr const*, llvm::APSInt const&, llvm::APSInt const&) RangeConstraintManager.cpp:0:0
    #11 0x00000000049d368c clang::ento::RangedConstraintManager::assumeSymUnsupported(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::SymExpr const*, bool) (../../main-github/llvm/build-all/bin/clang+0x49d368c)
    #12 0x00000000049f0b09 clang::ento::SimpleConstraintManager::assumeAux(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::NonLoc, bool) (../../main-github/llvm/build-all/bin/clang+0x49f0b09)
    #13 0x00000000049f096a clang::ento::SimpleConstraintManager::assume(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::NonLoc, bool) (../../main-github/llvm/build-all/bin/clang+0x49f096a)
    #14 0x00000000049f086d clang::ento::SimpleConstraintManager::assumeInternal(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::DefinedSVal, bool) (../../main-github/llvm/build-all/bin/clang+0x49f086d)
--

commit 5d7950a403bec25e52d4d0ba300b009877073c05
Author: Hongtao Yu <hoy@fb.com>
Date:   Thu Dec 15 18:36:52 2022 -0800

    [CSSPGO][llvm-profgen] Missing frame inference.
    
    This change introduces a missing frame inferrer aiming at fixing missing frames. It current only handles missing frames due to the compiler tail call elimination (TCE) but could also be extended to supporting other scenarios like frame pointer omission. When a tail called function is sampled, the caller frame will be missing from the call chain because the caller frame is reused for the callee frame. While TCE is beneficial to both perf and reducing stack overflow, a workaround being made in this change aims to find back the missing frames as much as possible.
    
    The idea behind this work is to build a dynamic call graph that consists of only tail call edges constructed from LBR samples and DFS-search for a unique path for a given source frame and target frame on the graph. The unique path will be used to fill in the missing frames between the source and target. Note that only a unique path counts. Multiple paths are treated unreachable since we don't want to overcount for any particular possible path.
    
    A switch --infer-missing-frame is introduced and defaults to be on.
    
    Some testing results:
    - 0.4% perf win according to three internal benchmarks.
    - About 2/3 of the missing tail call frames can be recovered, according to an internal benchmark.
    - 10% more profile generation time.
--
Date:   Mon Dec 12 13:53:16 2022 -0800

    [analyzer] Nullability: Enable analysis of non-inlined nullable objc properties.
    
    The NullabilityChecker has a very early policy decision that non-inlined
    property accesses will be inferred as returning nonnull, despite nullability
    annotations to the contrary. This decision eliminates false positives related
    to very common code patterns that look like this:
    
    if (foo.prop) {
        [bar doStuffWithNonnull:foo.prop];
--
    
    While this probably represents a correct nil-check, the analyzer can't
    determine correctness without gaining visibility into the property
    implementation.
    
    Unfortunately, inferring nullable properties as nonnull comes at the cost of
    significantly reduced code coverage. My goal here is to enable detection of
    many property-related nullability violations without a large increase
    in false positives.
    
    The approach is to introduce a heuristic: after accessing the value of
    a property, if the analyzer at any time proves that the property value is
    nonnull (which would happen in particular due to a nil-check conditional),
    then subsequent property accesses on that code path will be *inferred*
    as nonnull. This captures the pattern described above, which I believe
    to be the dominant source of false positives in real code.
    
    https://reviews.llvm.org/D131655

--
Date:   Fri Dec 9 20:09:56 2022 -0800

    [COFF] Respect weak externals for mangled symbol searching
    
    We were previously ignoring weak externals during these searches (which
    are used for the entry point, exports, and subsystem inference), which
    differed from link.exe behavior. It also meant that we could get
    different behavior when linking an object file directly vs. packaging it
    into a static library, because static library symbol name directories
    include weak externals.
    
--
Date:   Mon Dec 12 13:36:29 2022 +0000

    [clang-tidy][NFC] Simply match processing in misc-use-anonymous-namespace
    
    No need for the templated function "processMatch", since
    we can infer the type with llvm:isa.

commit 6c0c280b8ddcede2b78afe948c764cb04503f980
Author: Haojian Wu <hokein.wu@gmail.com>
Date:   Mon Dec 12 13:47:46 2022 +0100

--
Author: Manas <manas18244@iiitd.ac.in>
Date:   Fri Dec 9 13:30:57 2022 +0100

    [analyzer][solver] Introduce reasoning for not equal to operator
    
    With this patch, the solver can infer results for not equal (!=) operator
    over Ranges as well. This also fixes the issue of comparison between
    different types, by first converting the RangeSets to the resulting type,
    which then can be used for comparisons.
    
    Patch by Manas.
--
Author: Nikita Popov <npopov@redhat.com>
Date:   Fri Dec 9 11:28:11 2022 +0100

    [MemoryBuiltins] Remove some hardcoded builtins
    
    For all of these we already infer the new memory attributes, so
    they don't need to be explicitly listed.

commit 12a877a32c73e5364ace453dad0ab7cb63a6506c
Author: serge-sans-paille <sguelton@mozilla.com>
Date:   Fri Dec 9 11:20:37 2022 +0100
--

    [flang] Generate iteration shape from passed object
    
    When call an elemental subroutine with a monomorphic or polymorphic
    passed object, the iteration shape could not be computed. Use the
    passed object to infer the implicit iteration shape so the loop
    can be constructed.
    
    Reviewed By: PeteSteinfeld
    
    Differential Revision: https://reviews.llvm.org/D139635
--

commit b2505ca2ece3174193f19599a6677b5d0257654a
Author: smit-hinsu <smittvhinsu@gmail.com>
Date:   Wed Dec 7 17:20:56 2022 -0800

    [MLIR] Allow ShapedTypeComponents with attribute in inferReturnTensorTypes
    
    Originally, inferReturnTensorTypes didn't support shaped type components
    containing an attribute just because there wasn't any motivating use-case.
    Removing that limitation and using it to set the encoding attribute for
    RankedTensorType.
    
    Updated the existing test to set result attribute based on the first operand,
--
    
    For now, MLPriority is completely identical to CostPriority.
    
    Once this patch lands, I'm planning to:
    
    - integrate NoInferenceModelRunner,
    
    - memoize the priority computation so that the priority remains the
      same for given values of metrics even with the noise injected during
      training, and
    
--

commit 5651af896c3df30da9edd101b1fb17c00de6636d
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Sun Nov 27 20:24:34 2022 -0500

    InferAddressSpaces: Switch tests to use opt -passes

commit a982f095677cf1834d981e92efdddd0b36accd67
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Sun Nov 27 20:11:40 2022 -0500

    InferAddressSpaces: Convert tests to opaque pointers
    
    Had constantexprs be mangled by the opaquify script; had to update
    those lines manually:
      NVPTX/bug31948.ll
      AMDGPU/old-pass-regressions.ll
      AMDGPU/old-pass-regressions-inseltpoison.ll
      AMDGPU/infer-address-space.ll
    
    Required re-reunning update_test_checks:
      AMDGPU/redundant-addrspacecast.ll
    
    In AMDGPU/insert-pos-assert.ll, bitcast_insert_pos_assert_2 deleted a
    getelementptr of 0 which I'm guessing was relevant. Replaced with an
    offset 1 GEP to ensure another addrspacecast is inserted.
    
    AMDGPU/infer-getelementptr.ll had one case improve by introducing an
    inbounds.

commit c33511c8df54265f5c540c0d8605f2f6f35ee6cd
Author: Fangrui Song <i@maskray.me>
Date:   Sun Nov 27 17:25:33 2022 -0800
--
Author: Jason Molenda <jason@molenda.com>
Date:   Thu Nov 24 10:56:01 2022 -0800

    Change debugserver to spawn processes in their own pgrp
    
    Change debugserver's posix_spawn() to spawn an inferior process in
    its own process group, so signals from the terminal like control-c
    are passed to the inferior process instead of debugserer.  In lldb's
    own native-host launching, there is a LaunchInfo option
    LaunchInSeparateProcessGroup, and this mirrors the most common
    setting of that on Darwin systems.
    
    Patch by Alessandro Arzilli <alessandro.arzilli@gmail.com>.
--

commit a3ae0dd11dc21dfe4a15cf0caa1802b71d7a1e6b
Author: Alexey Bader <alexey.bader@intel.com>
Date:   Mon Nov 21 22:24:00 2022 +0200

    [InferAddressSpaces] Add InferAddressSpaces pass to pipeline for SPIR (#7418)
    
    Clang generates 'addrspacecast' instructions to align address spaces
    between alloca/global variables/kernel parameters and flat address space
    pointers (i.e. addrspace(4)).
    
    For the SPIR/SPIR-V target, addrspace(4) is the generic address space
    and these addrspacecast instructions can be safely removed from the code
    when named address space can be deduced.
    
    To perform this removing, the InferAddressSpaces pass has been added to
    the clang optimization pipeline for SPIR and SPIR-V targets. This pass
    should be run after the other optimization passes (both function and
    module) and, it is very important, after inlining to let the pass
    "understand" from which address space as many as possible variables came
    and eliminate as many as possible addrspacecast instructions.
--

commit fa5a607dbce0caca40d9bd44dff2a114fb589c51
Author: Rob Suderman <suderman@google.com>
Date:   Fri Nov 18 11:43:55 2022 -0800

    [mlir][tosa] Fix tosa.slice shape inference for ShapedType:kDynamicShape
    
    Change for kDynamicShape means the size needs to be updated to a new value
    for slice operation shape inference. Landing fix.
    
    Reviewed By: NatashaKnk
    
    Differential Revision: https://reviews.llvm.org/D138314

--

commit 2ada5cbea47bdf7d8df70981315f352237cc2222
Author: Vladislav Vinogradov <v.vinogradov@yadro.com>
Date:   Thu Nov 10 13:23:44 2022 +0300

    [mlir][linalg] Fix bug in InferStaticShapeOfOperands pattern
    
    The pattern tries to deduce static shape from `tensor.cast` producer of linalg operation operands.
    The original code unconditionally casts type of the `tensor.cast` source to `RankedTensorType`.
    But the `tensor.cast` can also operate on `UnrankedTensorType`, so this cast either fail on assertion
    in debug build or introduce UB in release build.
--
    the specification against given requirement. Perform profile type
    checking as the initial feature in the pass.
    
    This is an optional pass that can be enabled via command line. e.g.
    $mlir-opt --tosa-validate="profile=bi" for validating against the
    base inference profile.
    
    Description:
    TOSA defines a variety of operator behavior and requirements in the
    specification. It would be helpful to have a separate validation pass
    to keep TOSA operation input match with TOSA specification for given
    criteria, and also diminish the burden of dialect validation during
    compilation.
    
    TOSA supports three profiles of which two are for inference purposes.
    The main inference profile supports both integer and floating-point
    data types, but the base inference profile only supports integers.
    In this initial PR, validate the operations against a given profile
    of TOSA, so that validation would fail if a floating point tensor is
    present when the base inference profile is selected. Afterward, others
    checking will be added to the pass if needed. e.g. control flow
    operators and custom operators validation.
    
    The pass is expected to be able to run on any point of TOSA dialect
    conversion/transformation pipeline, and not depend on a particular
--
Author: Jason Molenda <jason@molenda.com>
Date:   Mon Nov 14 09:50:58 2022 -0800

    Change last-ditch magic address in IRMemoryMap::FindSpace
    
    When we cannot allocate memory in the inferior process, the IR
    interpreter's IRMemoryMap::FindSpace will create an lldb local
    buffer and assign it an address range in the inferior address
    space.  When the interpreter sees an address in that range, it
    will read/write from the local buffer instead of the target.  If
    this magic address overlaps with actual data in the target, the
    target cannot be accessed through expressions.
    
--

commit 38c219b4a8ebe30d781a1ebbb9a9d29b24c28b39
Author: River Riddle <riddleriver@gmail.com>
Date:   Thu Nov 3 16:06:59 2022 -0700

    [mlir] Infer SubElementInterface implementations using the storage KeyTy
    
    The KeyTy of attribute/type storage classes provide enough information for
    automatically implementing the necessary sub element interface methods. This
    removes the need for derived classes to do it themselves, which is both much
    nicer and easier to handle certain invariants (e.g. null handling). In cases where
--
    [CodeView][clang] Add flag to disable emitting command line into CodeView
    
    In https://reviews.llvm.org/D80833, there were concerns about
    determinism emitting the commandline into CodeView. We're actually
    hitting these when running clang-cl on Linux (cross compiling) versus on
    Windows (e.g. -fmessage-length being inferred on terminals).
    
    Add -g[no-]codeview-command-line to enable/disable this feature.
    It's still on by default to preserve the current state of clang.
    
    Reviewed By: thakis, rnk
--
Date:   Thu Oct 27 20:48:04 2022 +0200

    [mlir][linalg] Add nicer builders for `map` and `reduce`.
    
    The new builders get a list of additional attrs, a lambda to build the region
    body and infer return types from `init`.
    
    Differential Revision: https://reviews.llvm.org/D136838

commit 89f77be94ff8bcbe3691e7b9a82faee59bd29f11
Author: Michał Górny <mgorny@gentoo.org>
--

    [mlir][tensor][bufferize] Support memory_space for tensor.pad
    
    This change adds memory space support to tensor.pad. (tensor.generate and tensor.from_elements do not support memory spaces yet.)
    
    The memory space is inferred from the buffer of the source tensor.
    
    Instead of lowering tensor.pad to tensor.generate + tensor.insert_slice, it is now lowered to bufferization.alloc_tensor (with the correct memory space) + linalg.map + tensor.insert_slice.
    
    Memory space support for the remaining two tensor ops is left for a later point, as this requires some more design discussions.
    
--
Date:   Thu Oct 27 12:00:30 2022 +0200

    [BasicAA] Remove redundant libcall handling
    
    The writeonly attribute for memset_pattern16 (and other referenced
    libcalls) is being added by InferFunctionAttrs nowadays. No need
    to special-case it here.

commit 56099d242809f80984e4afa37693177484aab13d
Author: Utkarsh Saxena <usx@google.com>
Date:   Thu Oct 27 11:50:43 2022 +0200
--

    Change debugserver to clear PAC auth bits manually
    
    debugserver is currently using kernel supplied macros,
    arm_thread_state64_get_{pc,fp,sp,lr} which can crash on an authorization
    failure when the inferior has crashed with an invalid pc value, for
    instance.  debugserver needs to be resistant to crashing in this
    scenario, and we're merely clearing the bits, so do it with a bit
    mask operation instead.
    
    Differential Revision: https://reviews.llvm.org/D136620
--
Date:   Wed Oct 19 17:31:22 2022 +0200

    [MLIR][Tensor] Remove assert in PadOp builder
    
    The assert is misplaced as the result type is allowed to be null. A few
    lines below the result type is inferred if it is passed a nullptr.
    Besides, this behavior is described in the documentation of the builder.
    
    Reviewed By: ftynse
    
    Differential Revision: https://reviews.llvm.org/D136262
--

commit 657f68b1f2fd38deb63c23d8f46d12b7fd357e63
Author: Quentin Colombet <quentin.colombet@gmail.com>
Date:   Tue Oct 11 20:53:25 2022 +0000

    [NFC][mlir][MemRef] Make use of InferTypeOpInterface
    
    The `InferTypeOpInterface` generates builders for things it can infer
    the types.
    Thanks to that interface we can:
    - Eliminate a builder for DimOp, and
    - Describe how to infer the result types of `extract_strided_metadata`
      from its source, and get a simpler builder as a result
    
    NFC
    
    Differential Revision: https://reviews.llvm.org/D135734
--
Date:   Wed Oct 12 16:39:47 2022 -0700

    [lld][WebAssembly] Add `--extra-features` flag to add addional features
    
    This flag acts just like the existing `--features` flag but instead
    of replacing the set of inferred features it adds to it.
    
    This is useful for example if you want to `--export` a mutable global
    but none of the input of object were built with mutable global support.
    In that case you can do `--extra-features=mutable-globals` to avoid the
    linker error that would otherwise be generated in this case:
--
    [FunctionAttrs] Handle potential access of captured argument
    
    We have to account for accesses to argument memory via captures.
    I don't think there's any way to make this produce incorrect
    results right now (because as soon as "other" is set, we lose the
    ability to infer argmemonly), but this avoids incorrect results
    once we have more precise representation.

commit 7ac10e5b347f3e22ae1dad5937de667e57c472be
Author: Haojian Wu <hokein.wu@gmail.com>
Date:   Thu Oct 13 10:01:47 2022 +0200
--
Author: Nikita Popov <npopov@redhat.com>
Date:   Wed Oct 12 17:22:11 2022 +0200

    [FunctionAttrs] Account for memory effects of inalloca/preallocated
    
    The code for inferring memory attributes on arguments claims that
    inalloca/preallocated arguments are always clobbered:
    https://github.com/llvm/llvm-project/blob/d71ad4108056d685f48407447095d8d92fd7685d/llvm/lib/Transforms/IPO/FunctionAttrs.cpp#L640-L642
    
    However, we would still infer memory attributes for the whole
    function without taking this into account, so we could still end
    up inferring readnone for the function. This adds an argument
    clobber if there are any inalloca/preallocated arguments.
    
    Differential Revision: https://reviews.llvm.org/D135783

commit f76e40d1a4d7d95d8ceb1fad7be15bdfe96725a0
--
    [mlir] Remove iterator_types() method from LinalgStructuredInterface.
    
    `getIteratorTypesArray` should be used instead. It's a better substitute for all the current usages of the interface.
    
    The current `ArrayAttr iterator_types()` has a few problems:
    * It creates an assumption operation has iterators types as an attribute, but it's not always the case. Sometime iterator types can be inferred from other attribute, or they're just static.
    * ArrayAttr is an obscure contained and required extracting values in the client code.
    * Makes it hard to migrate iterator types from strings to enums ([RFC](https://discourse.llvm.org/t/rfc-enumattr-for-iterator-types-in-linalg/64535/9)).
    
    Concrete ops, like `linalg.generic` will still have iterator types as an attribute if needed.
    
--

    [SimplifyLibCalls] Place deref attr even if nonnull already set
    
    If nonnull is already set, we currently skip setting both nonnull
    and dereferenceable. Make these independent, to avoid regressions
    when additional nonnull attributes are inferred earlier.

commit 0f32f0e147abdbfa98b9011c0aae2ea213de2205
Author: Nikita Popov <npopov@redhat.com>
Date:   Tue Oct 4 11:17:09 2022 +0200

--

commit 412141663cfcc7883c24217bcb88780e4572543b
Author: Nikita Popov <npopov@redhat.com>
Date:   Fri Sep 23 13:03:59 2022 +0200

    Reapply [FunctionAttrs] Infer precise FMRB
    
    The previous version of the patch would incorrect convert an
    existing argmemonly attribute into an inaccessiblemem_or_argmemonly
    attribute.
    
    -----
    
    This updates checkFunctionMemoryAccess() to infer a precise
    FunctionModRefBehavior, rather than an approximation split into
    read/write and argmemonly.
    
    Afterwards, we still map this back to imprecise function attributes.
    This still allows us to infer some cases that we previously did not
    handle, namely inaccessiblememonly and inaccessiblemem_or_argmemonly.
    In practice, this means we get better memory attributes in the
    presence of intrinsics like @llvm.assume.
    
    Differential Revision: https://reviews.llvm.org/D134527
--

commit 52545e603b8954e9ae590e4261c287f1d163dbba
Author: Juan Manuel MARTINEZ CAAMAÑO <juamarti@amd.com>
Date:   Mon Sep 26 13:49:32 2022 +0000

    [DebugInfo][InferAddressSpaces] Propagate DebugLoc when cloning an instruction in InferAddressSpaces
    
    Differential Revision: https://reviews.llvm.org/D134428

commit e9716c64ec065693d53502b84b8a74190b691248
Author: Juan Manuel MARTINEZ CAAMAÑO <juamarti@amd.com>
--

commit 0fb2676c248ef1b76a4ef86c934e69ff80796ba7
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Wed Sep 28 16:53:45 2022 +0200

    Revert "[FunctionAttrs] Infer precise FMRB"
    
    This reverts commit 97dfa536260c434e68913129d79d863b26c1c179.
    
    It can make DSE crash. Reduced test case at
    https://reviews.llvm.org/P8291
--
    ```
    SmallVector<StringRef> iterators = llvm::to_vector<4>(linalgOp.iterator_types().getAsValueRange<StringAttr>());
    ```
    
    It also forces all operations that implement LinalgOp interface to have
    `iterator_types` attribute even when the information can be easily infered from
    other parameters.
    
    In perfect future, `getIteratorTypeArray` should be the only method to get
    iterator types from the interface. The default implementation can rely on
    `iterator_types` attribute though.
--

commit 97dfa536260c434e68913129d79d863b26c1c179
Author: Nikita Popov <npopov@redhat.com>
Date:   Fri Sep 23 13:03:59 2022 +0200

    [FunctionAttrs] Infer precise FMRB
    
    This updates checkFunctionMemoryAccess() to infer a precise
    FunctionModRefBehavior, rather than an approximation split into
    read/write and argmemonly.
    
    Afterwards, we still map this back to imprecise function attributes.
    This still allows us to infer some cases that we previously did not
    handle, namely inaccessiblememonly and inaccessiblemem_or_argmemonly.
    In practice, this means we get better memory attributes in the
    presence of intrinsics like @llvm.assume.
    
    Differential Revision: https://reviews.llvm.org/D134527
--
    
    Keeping `gmodules` a debug-info category is desirable because
    `builder.py` knows how to inject the appropriate Makefile flags
    into the build command for debug-info categories already. Whereas
    for non-debug-info categories we'd have to teach it how to. The
    category is inferred from the test-name debug-info suffix currently.
    
    Differential Revision: https://reviews.llvm.org/D134524

commit 24cdae11ed2e16eb77d570e3c01c8f410adb85e6
Author: Jakub Kuderski <kubak@google.com>
--

commit fe196380ccd4f2ed0e78151e11387a299a72b337
Author: Nikita Popov <npopov@redhat.com>
Date:   Fri Sep 23 13:55:07 2022 +0200

    [FunctionAttrs] Use MemoryLocation::getOrNone() when infering memory attrs
    
    MemoryLocation::getOrNone() already has the necessary logic to
    handle different instruction types. Use it, rather than repeating
    a subset of the logic. This adds support for previously unhandled
    instructions like atomicrmw.
--
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Tue Sep 13 12:31:07 2022 +0700

    [SCEVExpander] Recompute poison-generating flags on hoisting. PR57187
    
    Instruction being hoisted could have nuw/nsw flags inferred from the old
    context, and we cannot simply move it to the new location keeping them
    because we are going to introduce new uses to them that didn't exist before.
    
    Example in https://github.com/llvm/llvm-project/issues/57187 shows how
    this can produce branch by poison from initially well-defined program.
--

commit b69f10f5a118ec6efe5edfae2deb376b53877170
Author: River Riddle <riddleriver@gmail.com>
Date:   Thu Sep 1 10:36:00 2022 -0700

    [mlir][PDL] Infer result types from a `replace` as the last resort
    
    This prevents situations where explicit results types were provided,
    which have different types than the operation being replaced. This
    is useful for supporting dialect conversion, which will have proper
    support added in a followup.
--
Author: Georg Kotheimer <gkll@mailbox.org>
Date:   Mon Sep 5 11:14:27 2022 +0200

    [clangd] Fix hover crashing on integral or enumeral casts
    
    When pretty printing the value of an expression, we cannot infer from
    the type of the expression the type of the constant that the expression
    evaluates to, as the expression might contain a type cast.

commit 8af74da5bdbdccf13de84a4610ef75cd3dbac09e
Author: Sam McCall <sam.mccall@gmail.com>
--

commit e28a5ceca957ea0c40933db01cf0246c9c45bbe9
Author: Anastasia Stulova <Anastasia.Stulova@arm.com>
Date:   Tue Sep 6 15:07:29 2022 -0700

    [mlir][tosa] Fix dynamic shape inference in conv2d
    
    The comment in the code correctly states the equation for the shape inference as follows:
    
    ```
    H = ((IH+pad_top+pad_bottom-(dilation_y*(KH-1)+1))/stride_y)+1
    ```
    
--
    $ clang++ -ftime-trace -o main.out /demo/main.cpp
    $ ls .
    main.out   main-[random-string].json
    ```
    
    2. In addition, the main codes of time-trace files' path inference have been refactored.
    
    * The <path> of -ftime-trace=<path> is infered in clang driver
    * After that, -ftime-trace=<path> can be added into clang's options
    
    By this approach, the dirty work of path processing and judging can be implemented in driver layer, so that the clang may focus on its main work.
    
     #   $ clang -ftime-trace -o xxx.out xxx.cpp
--

commit 28c17a4b06faa5d799afda60f5b83603cea437ff
Author: Mehdi Amini <joker.eph@gmail.com>
Date:   Mon Aug 29 10:44:12 2022 +0000

    Apply clang-tidy fixes for performance-unnecessary-value-param in InferIntRangeInterfaceImpls.cpp (NFC)

commit e22758d7df9f4edff8fdbefa304d30d8d08de1f6
Author: Mehdi Amini <joker.eph@gmail.com>
Date:   Mon Aug 29 10:32:39 2022 +0000

--
    destination register class to gpr64. Without this it may have only
    a register bank and some copy elimination code would assert while
    assuming that a register class existed.
    
    The register class has to be set explicitly because we might hit the
    COPY -> COPY case where register class can't be inferred.
    
    This would cause the following to crash in selection, where the store
    is commented (otherwise the store constrains the register class):
    
      define dso_local i128 @load_atomic_i128_unordered(i128* %p) {
--

commit 12d2f75aedf858e460c63039008e1874eaf06e85
Author: Jeff Niu <jeff@modular.com>
Date:   Wed Aug 10 18:20:41 2022 -0400

    [mlir][ods] OpFormat: fix type inference issues
    
    This patch fixes issues with generating assembly format parsers for
    operations that use the `operands` directive or which have unnamed
    arguments or results.
    
--
    ```
    
    This is problematic, because LLDB_TEST_COMMON_ARGS must be processed
    first, while LLDB_TEST_USER_ARGS args must be processed last, so that
    user overrides are respected. Currently, if a user attempts to override
    one of the "inferred" flags, the user's request is ignored. This is the
    case, for example, with `--libcxx-include-dir` and
    `--libcxx-library-dir`. Both flags are needed by the greendragon bots.
    
    This commit removes the concatenation above, keeping the two original
    variables throughout the entire flow, processing the user's flag last.
--
Date:   Fri Aug 26 11:40:20 2022 +0100

    [SYCL] Fix AccessorSubscript windows build issue (#6648)
    
    This PR fixes an issue caused when building on Windows with MSVC. The problem was introduced in #6341.
    MSVC does not correctly infer the default template for its return type. This is fixed by setting the return type to auto and letting the compiler infer the return type.

commit 1736f76948a630bf9f3547a0a0d50cd86ed20901
Author: Simon Pilgrim <llvm-dev@redking.me.uk>
Date:   Fri Aug 26 11:16:57 2022 +0100

--
    }
    ```
    
    Note, how the symbols for the `resume` and `destroy` function pointer
    reveal which coroutine is stored inside the `std::coroutine_handle`.
    A follow-up commit will use this fact to infer the coroutine's promise
    type and the representation of its internal coroutine state based on
    the `resume` and `destroy` pointers.
    
    The same formatter is used for both libc++ and libstdc++. It would
    also work for MSVC's standard library, however it is not registered
--
    
    We currently process one OutputSection at a time and for each OutputSection
    write contained input sections in parallel. This strategy does not leverage
    multi-threading well. Instead, parallelize writes of different OutputSections.
    
    The default TaskSize for parallelFor often leads to inferior sharding. We
    prepare the task in the caller instead.
    
    * Move llvm::parallel::detail::TaskGroup to llvm::parallel::TaskGroup
    * Add llvm::parallel::TaskGroup::execute.
    * Change writeSections to declare TaskGroup and pass it to writeTo.
--

commit 887bafb503c59c5ecef831c679a2b114ee6ef338
Author: Chris Bieneman <chris.bieneman@me.com>
Date:   Tue Aug 23 20:52:29 2022 -0500

    [HLSL] Infer language from file extension
    
    This allows the language mode for HLSL to be inferred from the file
    extension.

commit 961690574439dbdbc968000eab2ce2289f77a2d6
Author: Chris Bieneman <chris.bieneman@me.com>
Date:   Tue Aug 23 20:49:56 2022 -0500
--

commit 3affbae5300dcdf753c954a65ab6a96fcf65c483
Author: Nico Weber <thakis@chromium.org>
Date:   Fri Aug 19 14:45:32 2022 -0400

    clang/apple: Infer simulator env from -mios-simulator-version-min= flag
    
    Before this patch, open-source clang would consider
    `-target x86_64-apple-darwin -mios-simulator-version-min=11.0` as
    targeting the iOS simulator, due to the mios flag informing it
    that we want to target iOS, and logic in the driver then realizing
--

commit 20cf170e68def39dc50b59847afb8d9ab445703d
Author: jeff <jrbyrnes1989@gmail.com>
Date:   Thu Jul 28 11:09:14 2022 -0700

    [InferAddressSpaces] [AMDGPU] Add inference for flat_atomic intrinsics
    
    Certain address space dependent optimizations, like SeperateConstOffsetFromGEP, assume agreement between the address space of the recursive uses and the address space of the def. If this assumption is invalid, then optimizations may or may not be correct depending on properties of an address space for a given target, the address spaces of recursive uses, and the optimization being done.
    
    This patch infers the previous address space for flat_atomic ptr arguments. As a result, the address spaces of the uses in flat_atomic cases will agree with the address space in recursive defs. If this results in non-flat address space, then isel may infer a different intrinsic. For example, if the result is a flat_atomic using global address space, then it will be lowered to the corresponding global_atomic intrinsic.
    
    Change-Id: Ifcd981709dc2ea94d4acbcb84efe7176593ec8c7

commit 01e3a376955864be6c20fe1134107eb4aa5f2e9c
Author: Denis Antrushin <dantrushin@gmail.com>
--
Date:   Tue Aug 16 11:30:55 2022 -0400

    [mlir][LLVMIR] "Modernize" LLVM insert/extract element operations
    
    This patch "modernizes" the implementation of these operations by
    switching them to assembly formats and type inference traits.
    
    Reviewed By: rriddle
    
    Differential Revision: https://reviews.llvm.org/D131971

--
Date:   Wed Aug 17 12:22:20 2022 -0400

    [mlir][LLVMIR] Change ShuffleVectorOp to use assembly format
    
    This patch moves `LLVM::ShuffleVectorOp` to assembly format and in the
    process drops the extra type that can be inferred (both operand types
    are required to be the same) and switches to a dense integer array.
    
    The syntax change:
    
    ```
--
    [Clang] Propagate const context info when emitting compound literal
    
    This patch fixes a crash when trying to emit a constant compound literal.
    
    For C++ Clang evaluates either casts or binary operations at translation time,
    but doesn't pass on the InConstantContext information that was inferred when
    parsing the statement.  Because of this, strict FP evaluation (-ftrapping-math)
    which shouldn't be in effect yet, then causes checkFloatingpointResult to return
    false, which in tryEmitGlobalCompoundLiteral will trigger an assert that the
    compound literal wasn't constant.
    
--
    The issue reproduces by calling an ABI-tagged template function from the
    expression evaluator. This is particularly problematic with the recent
    addition of ABI tags to numerous libcxx APIs.
    
    The issue stems from the fact that `clang::CodeGen` emits function
    function calls using the mangled name inferred from the `FunctionDecl`
    LLDB constructs from DWARF. Debug info often lacks information for
    us to construct a perfect FunctionDecl resulting in subtle mangled
    name inaccuracies.
    
    This patch side-steps the problem of inaccurate `FunctionDecl`s by
--
    Return "[SCEV] Use context to strengthen flags of BinOps"
    
    This reverts commit 354fa0b48008eca701a110badd6974bf449df257.
    
    Returning as is. The patch was reverted due to a miscompile, but
    this patch is not causing it. This patch made it possible to infer
    some nuw flags in code guarded by `false` condition, and then someone
    else to managed to propagate the flag from dead code outside.
    
    Returning the patch to be able to reproduce the issue.

--

commit 5deb678289df4a11d5c0786d702ad2730cd7e391
Author: Fangrui Song <i@maskray.me>
Date:   Sat Aug 6 16:48:23 2022 -0700

    Revert "[SampleProfileInference] Work around odr-use of const non-inline static data member to fix -O0 builds after D120508"
    
    This reverts commit 48c74bb2e2a72830f1068823bfc2f6fd4b53d427.
    With C++17 the workaround is no longer needed.

commit bccdf9197b6d647ccf5bbc86b25e29278aebc4e5
--
    information (the file could have been changed since the process was
    started) and it is not always available (file could be deleted or
    otherwise inaccessible).
    
    Unfortunately, ptrace does not give us a direct API to access the
    process architecture, but we can still infer it via some of its
    responses -- given that the general purpose register set of 64-bit
    applications is larger [citation needed] than the GPR set of 32-bit
    ones, we can just ask for the application GPR set and check its size.
    
    This is what this patch does.
--
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Wed Aug 3 13:10:56 2022 +0700

    [SCEV] Use context to strengthen flags of BinOps
    
    Sometimes SCEV cannot infer nuw/nsw from something as simple as
    ```
      len in [0, MAX_INT]
    ...
      iv = phi(0, iv.next)
      guard(iv <s len)
      guard(iv <u len)
      iv.next = iv + 1
    ```
    just because flag strenthening only relies on definition and does not use local facts.
    This patch adds support for the simplest case: inference of flags of `add(x, constant)`
    if we can contextually prove that `x <= max_int - constant`.
    
    In case if it has negative CT impact, we can add an option to switch it off. I woudln't
    expect that though.
    
--

commit 938fe9f277c62289096a70fb1afb896552d4f661
Author: Krzysztof Drewniak <Krzysztof.Drewniak@amd.com>
Date:   Mon Jul 25 17:22:18 2022 +0000

    [mlir][Arith] Fix up integer range inference for truncation
    
    Attempting to apply the range analysis to real code revealed that
    trunci wasn't correctly handling the case where truncation would
    create wider ranges - for example, if we truncate [255, 257] : i16 to
    i8, the result can be 255, 0, or 1, which isn't a contiguous range of
--

    [trace][intel pt] Introduce wall clock time for each trace item
    
    - Decouple TSCs from trace items
    - Turn TSCs into events just like CPUs. The new name is HW clock tick, wich could be reused by other vendors.
    - Add a GetWallTime that returns the wall time that the trace plug-in can infer for each trace item.
    - For intel pt, we are doing the following interpolation: if an instruction takes less than 1 TSC, we use that duration, otherwise, we assume the instruction took 1 TSC. This helps us avoid having to handle context switches, changes to kernel, idle times, decoding errors, etc. We are just trying to show some approximation and not the real data. For the real data, TSCs are the way to go. Besides that, we are making sure that no two trace items will give the same interpolation value. Finally, we are using as time 0 the time at which tracing started.
    
    Sample output:
    
    ```
--
    list entries.
    
    The two test changes in NewGVN merit extra scrutiny: NewGVN appears to
    be _extremely_ sensitive to the inaccessiblememonly for reasons that
    are beyond me. As a result, I had-enumerated all the attributes on
    allocation functions in those two tests instead of using -inferattrs.
    I assumed that the two -disable-simplify-libcalls tests there no
    longer are sensible since the function declaration now includes all the
    relevant attributes.
    
    Differential Revision: https://reviews.llvm.org/D130107

commit 12c0bf8ba91db377f816afa701cf05beee2ab40b
Author: Augie Fackler <augie@google.com>
Date:   Fri Mar 18 16:26:24 2022 -0400

    tests: add attributes that would normally come from inferattrs
    
    As my goal is to remove at least _some_ functions from the static list
    in MemoryBuiltins.cpp, these tests either need to run inferattrs or
    statically declare these attributes to keep passing. A couple of tests
    had alternate cases which are no longer meaningful, e.g.
    `malloc-load-removal.ll`.
    
    Differential Revision: https://reviews.llvm.org/D123087
--

    [flang] Clean up bogus semantic error on procedure pointer assignment
    
    When a procedure pointer with no interface is associated with
    an EXTERNAL name with no interface information, but it is later
    inferred that the procedure pointer must be a subroutine because it
    appears in a CALL statement, don't complain that the EXTERNAL name
    is not also known to be a subroutine.
    
    Subroutine vs. function errors are still caught in procedure pointer
    assignment compatibility checking; this fix simply ensures that those
--

commit bd6aa67e02ef37803a4bc255674fafbc7fc5b5ee
Author: Augie Fackler <augie@google.com>
Date:   Wed Jul 20 12:24:36 2022 -0400

    BuildLibCalls: move inference of freeing memory later
    
    This probably should have been part of D123089, but the effects of it
    don't show up until we start removing functions from the table in
    D130107. Oops.
    
--

commit 1515490c80fab3d60da58efcfc91155228f7a156
Author: Kadir Cetinkaya <kadircet@google.com>
Date:   Thu Jul 21 10:20:00 2022 +0200

    [clangd] Mention whether compile flags were inferred in check mode
    
    That way when looking at logs it's clear whether diagnostics are a
    result of compile flags mismatch.
    
    Differential Revision: https://reviews.llvm.org/D130228
--

commit c8598fa22fdf587c00df6966800c8c6d3c62185d
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Mon Jul 18 22:18:52 2022 -0700

    [mlir] Add refineReturnTypes to InferTypeOpInterface
    
    refineReturnType method shares the same parameters as inferReturnTypes
    but gets passed in the return types of the op if known that can be used
    during refinement passes or for more op specific error reporting.
    Currently the error reporting on failure is generic and doesn't allow
    for specializing the returned result based on failure, with this change
    what would previously have been a separate trait with specialized
    verification can just be handled as part of inferrence rather than
    duplicated.
    
    refineReturnTypes behaves like inferReturnTypes if no result types are fed in,
    while the current verification is recast as the default implementation for
    refineReturnTypes with it calling inferReturnTypes (and so the default type
    verification now goes through refine and allows for more op specific inference
    mismatch errors).
    
    Differential Revision: https://reviews.llvm.org/D129955

commit 83e922562f670abb902310985f0254a54c574872
--

commit 82f76c04774fbeb2313b84932afac478f010c8d0
Author: Denys Petrov <dpetrov@accesssoftek.com>
Date:   Tue Jul 12 23:18:37 2022 +0300

    [analyzer][NFC] Tidy up handler-functions in SymbolicRangeInferrer
    
    Summary: Sorted some handler-functions into more appropriate visitor functions of the SymbolicRangeInferrer.
    - Spread `getRangeForNegatedSub` body over several visitor functions: `VisitSymExpr`, `VisitSymIntExpr`, `VisitSymSymExpr`.
    - Moved `getRangeForComparisonSymbol` from `infer` to `VisitSymSymExpr`.
    
    Differential Revision: https://reviews.llvm.org/D129678

commit 451e5e2b28e702170aba3c6121f72fb6de55a80c
Author: Slava Zakharin <szakharin@nvidia.com>
--

commit 06b3f27fedd5a26ad571c093ccf47d0c11b1e913
Author: Michał Górny <mgorny@moritz.systems>
Date:   Thu Jun 30 07:32:27 2022 +0200

    [lldb] [llgs] Remove not-really-used m_inferior_prev_state
    
    Remove m_inferior_prev_state that's not suitable for multiprocess
    debugging and that does not seem to be really used at all.
    
    The only use of the variable right now is to "prevent" sending the stop
    reason after attach/launch.  However, this code is never actually run
    since none of the process plugins actually use eStateLaunching or
--
Date:   Thu Jul 14 00:53:08 2022 -0700

    jGetLoadedDynamicLibrariesInfos can inspect machos not yet loaded
    
    jGetLoadedDynamicLibrariesInfos normally checks with dyld to find
    the list of binaries loaded in the inferior, and getting the filepath,
    before trying to parse the Mach-O binary in inferior memory.
    This allows for debugserver to parse a Mach-O binary present in memory,
    but not yet registered with dyld.  This patch also adds some simple
    sanity checks that we're reading a Mach-O header before we begin
    stepping through load commands, because we won't have the sanity check
    of consulting dyld for the list of loaded binaries before parsing.
--
Author: Ben Langmuir <blangmuir@apple.com>
Date:   Wed Jul 13 12:10:20 2022 -0700

    [test] Fix macOS triple check
    
    While the inferred host triple for macOS is something like
    <arch>-apple-darwin, it's also valid to have <arch>-apple-macos.
    Currently that globally changes whether an SDKROOT is provided in tests,
    so make this check more portable.
    
    Differential Revision: https://reviews.llvm.org/D129684
--
    When building modules, override secondary outputs (dependency file,
    dependency targets, serialized diagnostic file) in addition to the pcm
    file path. This avoids inheriting per-TU command-line options that
    cause non-determinism in the results (non-deterministic command-line for
    the module build, non-determinism in which TU's .diag and .d files will
    contain the module outputs). In clang-scan-deps we infer whether to
    generate dependency or serialized diagnostic files based on an original
    command-line. In a real build system this should be modeled explicitly.
    
    Differential Revision: https://reviews.llvm.org/D129389

--
Date:   Fri Jul 8 14:01:15 2022 -0700

    jGetLoadedDynamicLibrariesInfos can inspect machos not yet loaded
    
    jGetLoadedDynamicLibrariesInfos normally checks with dyld to find
    the list of binaries loaded in the inferior, and getting the filepath,
    before trying to parse the Mach-O binary in inferior memory.
    This allows for debugserver to parse a Mach-O binary present in memory,
    but not yet registered with dyld.  This patch also adds some simple
    sanity checks that we're reading a Mach-O header before we begin
    stepping through load commands, because we won't have the sanity check
    of consulting dyld for the list of loaded binaries before parsing.
--

commit ab701975e7f3b63bb474afbdeb8c474950d41074
Author: Mogball <jeffniu22@gmail.com>
Date:   Thu Jun 23 19:03:27 2022 +0000

    [mlir] Swap integer range inference to the new framework
    
    Integer range inference has been swapped to the new framework. The integer value range lattices automatically updates the corresponding constant value on update.
    
    Depends on D127173
    
    Reviewed By: krzysz00, rriddle
    
--

commit 534a2bf99e7cce4ea71dca6f91997794e3a36587
Author: Krzysztof Parzyszek <kparzysz@quicinc.com>
Date:   Wed Jul 6 07:34:25 2022 -0700

    [TableGen] Rewrite type set intersection in type inference
    
    The previous code had a bug when dealing with matching iPTR against a
    set of integer types. It was trying to handle it all in a compact way,
    but that implementation couldn't be modified to correct the problem in
    a simple way. The code wasn't long, and it was easier to rewrite it.
--
    [lldb] Improve the error message in run_to_breakpoint_do_run
    
    Improve the error message when we fail to hit the initial breakpoint in
    run_to_breakpoint_do_run. In addition to the process state, we now also
    report the exit code and reason (if the process exited) as well as the
    inferior's output.
    
    Differential revision: https://reviews.llvm.org/D111978

commit 75e551e5d830754104f5cce8c7a97b69e56aac7d
Author: Fangrui Song <i@maskray.me>
--
    [VE] Change displacement type in MEM..i from i32 to i64
    
    In selection patterns, addresses (like tblockaddr) are passed as the
    displacement (the i in MEM..i) to instructions taking MEM operands.
    Since addresses are 64-bit, having this part of the MEM..i operand as
    i32 causes a type inference error. The instructions actually only encode
    32 bits of the displacement, but there is no way to manually extract
    these bits (either the high or the low half) in selection patterns.
    
    This didn't happen before, because of a bug in type inference when
    dealing with iPTR.

commit 6c3990acfbb933a61e2c74332bb252121c06bd14
Author: Chi Chun Chen <chichun.chen@hpe.com>
Date:   Thu Jul 7 11:29:48 2022 -0500
--

commit 82ba3f44657ac91b4bef95dbf647dfbab482e502
Author: Pavel Labath <pavel@labath.sk>
Date:   Fri Jul 1 14:32:50 2022 +0200

    Recommit "[lldb/test] Don't use preexec_fn for launching inferiors"
    
    This recommits b15b1421, which reverted in was reverted in f51c47d98 due to
    failures on apple systems. The problem was that the patch introduced a race
    where the debug server could start the attach process before the first process
    (which isn't supposed to be attached to) was set up. This caused us to attach
--
    - the token range is defined using heuristics attached to grammar rules
    - the unparsed region is represented in the forest by an Opaque node
    
    This patch has the core GLR functionality.
    It does not allow recovery heuristics to be attached as extensions to
    the grammar, but rather infers a brace-based heuristic.
    
    Expected followups:
    
    - make recovery heuristics grammar extensions (depends on D127448)
    - add recovery to our grammar for bracketed constructs and sequence nodes
--

commit f51c47d987917d18108f0415334f47c75db9e908
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Tue Jul 5 10:12:57 2022 -0700

    Revert "[lldb/test] Don't use preexec_fn for launching inferiors"
    
    This reverts commit b15b1421bc9a11b318b65b489e5fd58dd917db1f because it
    breaks GreenDragon [1]. The bot has been red for several days, so
    reverting to green while I take a look.
    
--

commit 6c3c5f8069d97e635b1887a6f9ac410391b89fae
Author: Matthias Springer <springerm@google.com>
Date:   Tue Jul 5 16:39:29 2022 +0200

    [mlir][memref] Improve type inference for rank-reducing subviews
    
    The result shape of a rank-reducing subview cannot be inferred in the general case. Just the result rank is not enough. The only thing that we can infer is the layout map.
    
    This change also improves the bufferization patterns of tensor.extract_slice and tensor.insert_slice to fully support rank-reducing operations.
    
    Differential Revision: https://reviews.llvm.org/D129144

--

commit 3e01af093f9236685ace808b927cc9cb118979a1
Author: Christian Sigg <csigg@google.com>
Date:   Mon Jul 4 08:11:30 2022 +0200

    [mlir] Add InferIntRangeInterface to gpu.launch
    
    Infers block/grid dimensions/indices or ranges of such dimensions/indices.
    
    Reviewed By: krzysz00
    
    Differential Revision: https://reviews.llvm.org/D129036

--

commit b15b1421bc9a11b318b65b489e5fd58dd917db1f
Author: Pavel Labath <pavel@labath.sk>
Date:   Fri Jul 1 14:32:50 2022 +0200

    [lldb/test] Don't use preexec_fn for launching inferiors
    
    As the documentation states, using this is not safe in multithreaded
    programs, and I have traced it to a rare deadlock in some of the tests.
    
    The reason this was introduced was to be able to attach to a program
--
    Replace the use of "trap" with a new "stop" command in fork tests,
    that maps to `raise(SIGSTOP)`.  Since traps do not increment PC on some
    architectures (notably ARM), using traps would require special logic
    to increment it while testing.  Using SIGSTOP avoids the problem
    and is probably more logical, given that the purpose of the "trap"s
    was to simply stop the inferior at a synchronization point.  This fixes
    tests on AArch64 (and possibly ARM, I'll update XFAILs when it is
    confirmed by the buildbot).
    
    Sponsored by: The FreeBSD Foundation
    Differential Revision: https://reviews.llvm.org/D128780
--
     - the token range is defined using heuristics attached to grammar rules
     - the unparsed region is represented in the forest by an Opaque node
    
    This patch has the core GLR functionality.
    It does not allow recovery heuristics to be attached as extensions to
    the grammar, but rather infers a brace-based heuristic.
    
    Expected followups:
     - make recovery heuristics grammar extensions (depends on D127448)
     - add recover to our grammar for bracketed constructs and sequence nodes
     - change the structure of our augmented `_ := start` rules to eliminate
--

commit c0b0b6a00a2c54a2c5fdc5626d240351021def5f
Author: Matthias Springer <springerm@google.com>
Date:   Mon Jun 27 16:28:38 2022 +0200

    [mlir][bufferize] Infer memory space in all bufferization patterns
    
    This change updates all remaining bufferization patterns (except for scf.while) and the remaining bufferization infrastructure to infer the memory space whenever possible instead of falling back to "0". (If a default memory space is set in the bufferization options, we still fall back to that value if the memory space could not be inferred.)
    
    Differential Revision: https://reviews.llvm.org/D128423

commit 13fb97d68821e1948d176057ebee94f50cb05b62
Author: Than McIntosh <thanm@google.com>
--
Author: Matthias Springer <springerm@google.com>
Date:   Mon Jun 27 13:25:52 2022 +0200

    [mlir][SCF][bufferize][NFC] Bufferize scf.for terminator separately
    
    This allows for better type inference during bufferization and is in preparation of supporting memory spaces.
    
    Differential Revision: https://reviews.llvm.org/D128422

commit 8e691e1f245ad4b275983749fd6a78120a0bf263
Author: Matthias Springer <springerm@google.com>
Date:   Mon Jun 27 13:17:45 2022 +0200

    [mlir][SCF][bufferize] Bufferize scf.if/execute_region terminators separately
    
    This allows for better type inference during bufferization and is in preparation of supporting memory spaces.
    
    Differential Revision: https://reviews.llvm.org/D128581

commit 7ebf70d85d63acaaea56bdb1a13c5a2573868e1c
Author: Matthias Springer <springerm@google.com>
Date:   Mon Jun 27 13:10:00 2022 +0200

    [mlir][SCF][bufferize][NFC] Bufferize parallel_insert_slice separately
    
    This allows for better type inference during bufferization and is in preparation of supporting memory spaces.
    
    Differential Revision: https://reviews.llvm.org/D128580

commit 8871c3c562690347d75190be758312d1f92a7db4
Author: Jay Foad <jay.foad@amd.com>
--
Author: Matthias Springer <springerm@google.com>
Date:   Mon Jun 27 12:52:59 2022 +0200

    [mlir][shape][bufferize][NFC] Bufferize block terminators separately
    
    This allows for better type inference during bufferization and is in preparation of supporting memory spaces.
    
    Differential Revision: https://reviews.llvm.org/D128579

commit 480f3e0228399d759e0843037b2b5c0026baa11c
Author: Dmitry Preobrazhensky <d-pre@mail.ru>
--
Author: Matthias Springer <springerm@google.com>
Date:   Mon Jun 27 12:42:07 2022 +0200

    [mlir][bufferization][NFC] Bufferize with PostOrder traversal
    
    This is useful because the result type of an op can sometimes be inferred from its body (e.g., `scf.if`). This will be utilized in subsequent changes.
    
    Also introduces a new `getBufferType` interface method on BufferizableOpInterface. This method is useful for computing a bufferized block argument type with respect to OpOperand types of the parent op.
    
    Differential Revision: https://reviews.llvm.org/D128420

--
Author: Michał Górny <mgorny@moritz.systems>
Date:   Fri Jun 10 15:53:11 2022 +0200

    [lldb] [llgs] Make `k` kill all processes, and fix multiple exits
    
    Modify the behavior of the `k` packet to kill all inferiors rather than
    just the current one.  The specification leaves the exact behavior
    of this packet up to the implementation but since vKill is specifically
    meant to be used to kill a single process, it seems logical to use `k`
    to provide the alternate function of killing all of them.
    
--

commit 56a33ba3dd2bfd411e77946871814e98d92ec2fa
Author: Nikolas Klauser <nikolasklauser@berlin.de>
Date:   Wed Jun 22 21:10:57 2022 +0200

    [libc++] Implement P0154R1 (Hardware inference size)
    
    `__GCC_CONSTRUCTIVE_SIZE` and `__GCC_DESTRUCTIVE_SIZE` are available since GCC 12. I'm assuming clang will also implement these for compatability with libstdc++.
    
    Reviewed By: ldionne, #libc
    
--
Date:   Wed Jun 22 13:46:00 2022 -0700

    [lldb] Fix off-by-one error in the AppleObjCRuntimeV2 utility function
    
    Fix an off-by-one error in the utility function used to extract the
    dynamic class info. This resulted in a buffer overflow in the inferior
    which interrupted our utility function.
    
    Differential revision: https://reviews.llvm.org/D128377

commit f0d87dfe30e86d701034af9320b29d3e2e3a12b3
--

commit 858be166708081a3d5927ea5ea187c6b8c3efdaf
Author: Matthias Springer <springerm@google.com>
Date:   Tue Jun 21 10:07:52 2022 +0200

    [mlir][memref] Fix layout map computation in inferRankReducedResultType
    
    Differential Revision: https://reviews.llvm.org/D128160

commit a489aa745b621547427602dc4995e1e9ff3fcb57
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
--
    [clang][deps] Sort submodules when calculating dependencies
    
    Dependency scanning does not care about the order of submodules for
    correctness, so sort the submodules so that we get the same
    command-lines to build the module across different TUs. The order of
    inferred submodules can vary depending on the order of #includes in the
    including TU.
    
    Differential Revision: https://reviews.llvm.org/D128008

commit bfde8619355a06d9f1a199e9cb3f8d41aef5c05b
--
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Tue Jun 14 23:57:57 2022 +0200

    [mlir] Try to work around ambiguity in older clang versions
    
    mlir/lib/Dialect/Arithmetic/IR/InferIntRangeInterfaceImpls.cpp:366:10: error: chosen constructor is explicit in copy-initialization
      return {leftVal, rightVal};
             ^~~~~~~~~~~~~~~~~~~

commit 55b76fb58e1fdd2ae8e28f7cda124c01d374f397
Author: Benjamin Kramer <benny.kra@googlemail.com>
--

commit 75bfc6f29579b3787a93dff6c4125b614ddfc0b1
Author: Krzysztof Drewniak <Krzysztof.Drewniak@amd.com>
Date:   Fri Apr 22 19:07:59 2022 +0000

    [mlir][Arith] Implement InferIntRangeInterface for arithmetic ops
    
    Depends on D124023
    
    Reviewed By: Mogball, rriddle
    
--
    from objc_copyRealizedClassList to its non locking variant
    objc_copyRealizedClassList_nolock. Not taking the lock was relatively
    safe because we run this expression on one thread only, but it was still
    possible that someone was in the middle of modifying this list while we
    were trying to read it. Worst case that would result in a crash in the
    inferior without side-effects and we'd unwind and try again later.
    
    With the introduction of macOS Ventura, we can use
    objc_getRealizedClassList_trylock instead. It has semantics similar to
    objc_copyRealizedClassList_nolock, but instead of not locking at all,
    the function returns if the lock is already taken, which avoids the
--

    [mlir] Fix handling of some region branch terminator successors
    
    When `RegionBranchOpInterface::getSuccessorRegions` is called for anything other than the parent op, it expects the operands of the terminator of the source region to be passed, not the operands of the parent op. This was not always respected.
    
    This fixes a bug in integer range inference and ForwardDataFlowSolver and changes `scf.while` to allow narrowing of successors using constant inputs.
    
    Fixes #55873
    
    Reviewed By: mehdi_amini, krzysz00
    
--

commit 95aff23e29214543360d893f9a61df0ebd1b65d2
Author: Krzysztof Drewniak <Krzysztof.Drewniak@amd.com>
Date:   Thu Jun 2 21:45:52 2022 +0000

    Re-land "[mlir] Add integer range inference analysis""
    
    This reverts commit 4e5ce2056e3e85f109a074e80bdd23a10ca2bed9.
    
    This relands commit 1350c9887dca5ba80af8e3c1e61b29d6696eb240.
    
--

commit 4e5ce2056e3e85f109a074e80bdd23a10ca2bed9
Author: Mehdi Amini <joker.eph@gmail.com>
Date:   Thu Jun 2 21:24:06 2022 +0000

    Revert "[mlir] Add integer range inference analysis"
    
    This reverts commit 1350c9887dca5ba80af8e3c1e61b29d6696eb240.
    
    Shared library build is broken with undefined references.

--

commit 1350c9887dca5ba80af8e3c1e61b29d6696eb240
Author: Krzysztof Drewniak <Krzysztof.Drewniak@amd.com>
Date:   Thu Jun 2 19:04:42 2022 +0000

    [mlir] Add integer range inference analysis
    
    This commit defines a dataflow analysis for integer ranges, which
    uses a newly-added InferIntRangeInterface to compute the lower and
    upper bounds on the results of an operation from the bounds on the
    arguments. The range inference is a flow-insensitive dataflow analysis
    that can be used to simplify code, such as by statically identifying
    bounds checks that cannot fail in order to eliminate them.
    
    The InferIntRangeInterface has one method, inferResultRanges(), which
    takes a vector of inferred ranges for each argument to an op
    implementing the interface and a callback allowing the implementation
    to define the ranges for each result. These ranges are stored as
    ConstantIntRanges, which hold the lower and upper bounds for a
    value. Bounds are tracked separately for the signed and unsigned
    interpretations of a value, which ensures that the impact of
    arithmetic overflows is correctly tracked during the analysis.
    
    The commit also adds a -test-int-range-inference pass to test the
    analysis until it is integrated into SCCP or otherwise exposed.
    
    Finally, this commit fixes some bugs relating to the handling of
    region iteration arguments and terminators in the data flow analysis
    framework.
--
Author: Georg Kotheimer <gkll@mailbox.org>
Date:   Tue May 31 21:57:51 2022 +0200

    [clangd] Fix hover crashing on integral or enumeral casts
    
    When pretty printing the value of an expression, we cannot infer from
    the type of the expression the type of the constant that the expression
    evaluates to, as the expression might contain a type cast.

commit 8fb1bef60f0bf2f7d8bcb7069f3f543c02248ac9
Author: Nathaniel McVicar <namcvica@microsoft.com>
--

commit 73f664601c105e5897e12bf9766c2f7e79c92e62
Author: Augie Fackler <augie@google.com>
Date:   Tue Mar 29 14:27:30 2022 -0400

    BuildLibCalls: infer allockind attributes on relevant functions
    
    Differential Revision: https://reviews.llvm.org/D123089

commit 42861faa8e17058f0b4a027bba13ef59a600e051
Author: Augie Fackler <augie@google.com>
--

commit 91b8d96fd12af6120e2988639455ba35d89a8d3e
Author: River Riddle <riddleriver@gmail.com>
Date:   Fri Apr 29 21:13:29 2022 -0700

    [mlir:PDLL] Add proper support for operation result type inference
    
    This allows for the results of operations to be inferred in certain contexts,
    and matches the support in PDL for result type inference. The main two
    initial circumstances are when used as a replacement of another operation,
    or when the operation being created implements InferTypeOpInterface.
    
    Differential Revision: https://reviews.llvm.org/D124782

commit 2cadf84fc817a6c89eca0556a078d7879091e2a5
Author: eopXD <eop.chen@sifive.com>
--
    
    The new driver uses an augmented linker wrapper to perform the device
    linking phase, but to the user looks like a regular linker invocation.
    Contrary to the old driver, the new driver contains all the information
    necessary to produce a linked device image in the host object itself.
    Currently, we infer the usage of the device linker by the user
    specifying an offloading toolchain, e.g. (--offload-arch=...) or
    (-fopenmp-targets=...), but this shouldn't be strictly necessary.
    This patch introduces a new option `--offload-link` to tell
     the driver to use the offloading linker instead. So a compilation flow
     can now look like this,
--

    [mlir][bufferize] Support fully dynamic layout maps in BufferResultsToOutParams
    
    Also fixes integration of the pass into One-Shot Bufferize and adds additional test cases.
    
    BufferResultsToOutParams can be used with "identity-layout-map" and "fully-dynamic-layout-map". "infer-layout-map" is not supported.
    
    Differential Revision: https://reviews.llvm.org/D125636

commit c30a8c80837608ccb190aecb84a723ca00dd87df
Author: Jonas Devlieghere <jonas@devlieghere.com>
--
    llvm-objcopy, Archive would try to determine the kind, but it was not
    possible to get K_DARWIN in the initialization of the archive, because
    they're virtually inciting usable from K_BSD, especially since the
    slight differences only apply in very specific cases. This leads to
    linker failures when the alignment workaround is not applied to an
    archive copied with llvm-objcopy. This change teaches Archive to infer
    the K_DARWIN type in the cases where it's possible and the first object
    in the archive is a macho object. This avoids using the host triple to
    determine this to not affect cross compiling.
    
    Ideally we would eliminate the separate K_DARWIN type entirely since
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed May 18 08:05:59 2022 -0700

    [tests] Add test coverage for issue causing revert f7988d0
    
    As theorized, it does look like opnew is not getting inferred inaccessiblemmemonly.

commit 1467e01f8f699fa2a69937dd07e51325ba71a93b
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Wed May 18 23:14:18 2022 +0800

--
Author: Rahman Lavaee <rahmanl@google.com>
Date:   Fri May 13 10:32:13 2022 -0700

    [llvm-objdump] Let --symbolize-operands symbolize basic block addresses based on the SHT_LLVM_BB_ADDR_MAP section.
    
    `--symbolize-operands` already symbolizes branch targets based on the disassembly. When the object file is created with `-fbasic-block-sections=labels` (ELF-only) it will include a SHT_LLVM_BB_ADDR_MAP section which maps basic blocks to their addresses. In such case `llvm-objdump` can annotate the disassembly based on labels inferred on this section.
    
    In contrast to the current labels, SHT_LLVM_BB_ADDR_MAP-based labels are created for every machine basic block including empty blocks and those which are not branched into (fallthrough blocks).
    
    The old logic is still executed even when the SHT_LLVM_BB_ADDR_MAP section is present to handle functions which have not been received an entry in this section.
    
--

    [mlir][bufferize] Better user control of layout maps
    
    This changes replaces the `fully-dynamic-layout-maps` options (which was badly named) with two new options:
    
    * `unknown-type-conversion` controls the layout maps on buffer types for which no layout map can be inferred.
    * `function-boundary-type-conversion` controls the layout maps on buffer types inside of function signatures.
    
    Differential Revision: https://reviews.llvm.org/D125615

commit 6e23cd2bf073ab5eb5a103b935af54046d007c52
--

commit 12e41d9264b6f84213be86aab75016fb82ebc1d1
Author: Matthias Springer <springerm@google.com>
Date:   Mon May 16 01:53:51 2022 +0200

    [mlir][bufferize] Infer memref types when possible
    
    Instead of recomputing memref types from tensor types, try to infer them when possible. This results in more precise layout maps.
    
    Differential Revision: https://reviews.llvm.org/D125614

commit b3077f563d9f15aaf1868e54c91a82e2aab666a3
Author: Simon Pilgrim <llvm-dev@redking.me.uk>
--

commit c167c0a4dcdb998affb2756ce76903a12f7d8ca5
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Tue May 10 16:21:17 2022 -0700

    [BuildLibCalls] infer inreg param attrs from NumRegisterParameters
    
    We're having a hard time booting the ARCH=i386 Linux kernel with clang
    after removing -ffreestanding because instcombine was dropping inreg
    from callers during libcall simplification, but not the callees defined
    in different translation units. This led the callers and callees to have
    wildly different calling conventions, which (predictably) blew up at
    runtime.
    
    Infer the inreg param attrs on function declarations from the module
    metadata "NumRegisterParameters." This allows us to boot the ARCH=i386
    Linux kernel (w/ -ffreestanding removed).
    
    Fixes: https://github.com/llvm/llvm-project/issues/53645
    
--

commit 509b631f84e97e717a675a6ef60ae4728bb11551
Author: Joseph Huber <jhuber6@vols.utk.edu>
Date:   Thu May 5 18:09:55 2022 -0400

    [OpenMP] Try to Infer target triples using the offloading architecture
    
    Currently we require the `-fopenmp-targets=` option to specify the
    triple to use for the offloading toolchains, and the `-Xopenmp-target=`
    option to specify architectures to a specific toolchain. The changes
    made in D124721 allowed us to use `--offload-arch=` to specify multiple
--

    BuildLibCalls: simplify switch statement slightly
    
    Per feedback on D123086 after submit.
    
    Also added a test for vec_malloc et al attribute inference to show it's
    doing the right thing.
    
    The new tests exposed a defect, corrected by adding vec_free to the list of
    free functions in MemoryBuiltins.cpp, which had been overlooked all the
    way back in D94710, over a year ago.
--
Author: Hanhan Wang <hanchung@google.com>
Date:   Tue May 3 05:12:51 2022 -0700

    [Linalg] Remove Optional from getStaticLoopRanges interface method.
    
    It is very wrong if the ranges can't be infered. It's also checked in
    verifyStructuredOpInterface, so we don't need the Optional return type.
    
    Reviewed By: springerm
    
    Differential Revision: https://reviews.llvm.org/D124596
--

commit e94045653106028b4d3dda26a5a2bb42244796be
Author: Augie Fackler <augie@google.com>
Date:   Wed Mar 16 13:53:18 2022 -0400

    BuildLibCalls: infer allocptr attribute for free and realloc() family functions
    
    Differential Revision: https://reviews.llvm.org/D123084

commit f6128cd8884d4314ac0642cdb55802294cba4027
Merge: 45c8527b8f56 6cfcfbdc957f
--

commit 3c752289912895e067eb173485cadce6c618d6d4
Author: River Riddle <riddleriver@gmail.com>
Date:   Tue Apr 26 13:38:21 2022 -0700

    [mlir:PDLInterp] Refactor the implementation of result type inferrence
    
    The current implementation uses a discrete "pdl_interp.inferred_types"
    operation, which acts as a "fake" handle to a type range. This op is
    used as a signal to pdl_interp.create_operation that types should be
    inferred. This is terribly awkward and clunky though:
    
    * This op doesn't have a byte code representation, and its conversion
      to bytecode kind of assumes that it is only used in a certain way. The
      current lowering is also broken and seemingly untested.
    
    * Given that this is a different operation, it gives off the assumption
      that it can be used multiple times, or that after the first use
      the value contains the inferred types. This isn't the case though,
      the resultant type range can never actually be used as a type range.
    
    This commit refactors the representation by removing the discrete
    InferredTypesOp, and instead adds a UnitAttr to
    pdl_interp.CreateOperation that signals when the created operations
    should infer their types. This leads to a much much cleaner abstraction,
    a more optimal bytecode lowering, and also allows for better error
    handling and diagnostics when a created operation doesn't actually
    support type inferrence.
    
    Differential Revision: https://reviews.llvm.org/D124587

commit 5387a38c3891730b943a35d9d3e4b2d9e716acda
Author: Florian Hahn <flo@fhahn.com>
--
Date:   Thu Apr 28 12:48:14 2022 -0700

    [lldb] Fix crash when launching in terminal
    
    This patch fixes a crash when using process launch -t to launch the
    inferior from a TTY. The issue is that on Darwin, Host.mm is calling
    ConnectionFileDescriptor::Connect without a socket_id_callback_type. The
    overload passes nullptr as the function ref, which gets called
    unconditionally as the socket_id_callback.
    
    One potential way to fix this is to change all the lambdas to include a
--

commit 9613a850b69d2abf621d4c4a9dd9d967c580bd80
Author: River Riddle <riddleriver@gmail.com>
Date:   Tue Apr 26 12:18:27 2022 -0700

    [mlir:PDL] Rework errors for pdl.operations with non-inferrable results
    
    We currently emit an error during verification if a pdl.operation with non-inferrable
    results is used within a rewrite. This allows for catching some errors during compile
    time, but is slightly broken. For one, the verification at the PDL level assumes that
    all dialects have been loaded, which is true at run time, but may not be true when
    the PDL is generated (such as via PDLL). This commit fixes this by not emitting the
    error if the operation isn't registered, i.e. it uses the `mightHave` variant of trait/interface
--
    
    Secondly, we currently don't verify when a pdl.operation has no explicit results, but the
    operation being created is known to expect at least one. This commit adds a heuristic
    error to detect these cases when possible and fail. We can't always capture when the user
    made an error, but we can capture the most common case where the user expected an
    operation to infer its result types (when it actually isn't possible).
    
    Differential Revision: https://reviews.llvm.org/D124583

commit d4381b3f93a6e53e1b35232b9a0039b1f5e04c6a
Author: River Riddle <riddleriver@gmail.com>
--

commit 92a836da07596a9e409c3b4231fe727e0924d0e4
Author: River Riddle <riddleriver@gmail.com>
Date:   Tue Apr 26 11:12:45 2022 -0700

    [mlir] Attach InferTypeOpInterface on SameOperandsAndResultType operations when possible
    
    This allows for inferring the result types of operations in certain situations by using the type of
    an operand. This commit allowed for automatically supporting type inference for many more
    operations with no additional effort, e.g. nearly all Arithmetic operations now support
    result type inferrence with no additional changes.
    
    Differential Revision: https://reviews.llvm.org/D124581

commit 1bd1edaf4006ff66a88ac59e0931f22105003a26
Author: River Riddle <riddleriver@gmail.com>
Date:   Tue Apr 26 11:00:35 2022 -0700

    [mlir:ODS] Support using attributes in AllTypesMatch to automatically add InferTypeOpInterface
    
    This allows for using attribute types in result type inference for use with
    InferTypeOpInterface. This was a TODO before, but it isn't much
    additional work to properly support this. After this commit,
    arith::ConstantOp can now have its InferTypeOpInterface implementation automatically
    generated.
    
    Differential Revision: https://reviews.llvm.org/D124580

commit 53f775bbc0b8fbca941b5f7ad324b18884eddd7e
--

commit 96d3be84438e02c2d352ba1751aaa972f9dc3a89
Author: Wenju He <wenju.he@intel.com>
Date:   Thu Apr 28 10:47:26 2022 +0800

    [InferAddressSpaces] Check if AS are the same in isNoopPtrIntCastPair
    
    isNoopAddrSpaceCast is expecting SrcAS is different from DestAS.
    If the two AS are the same, consider ptrtoint/inttoptr as noop cast.
    
    Reviewed By: arsenm
--
    on -- so that they are not substantially more expensive than a cast.
    Most of these improvements are very small, but I measured a 3% decrease
    in -O0 object file size for a simple C++ source file using the standard
    library after this change.
    
    We now automatically infer the `const` and `nothrow` attributes on these
    now-builtin functions, in particular meaning that we get a warning for
    an unused call to one of these functions.
    
    In C++20 onwards, we disallow taking the addresses of these functions,
    per the C++20 "addressable function" rule. In earlier language modes, a
--
    
    This commit adds the visitNonControlFlowArguments method to
    DataFlowAnalysis, allowing analyses to provide lattice values for the
    arguments to a RegionSuccessor block that aren't directly tied to an
    op's inputs. For example, integer range interface can use this method
    to infer bounds for the step values in loops.
    
    This method has a default implementation that keeps the old behavior
    of assigning a pessimistic fixedpoint state to all such arguments.
    
    Reviewed By: Mogball, rriddle
--

commit c4caa90b15233b3f9512a479d84d6907fc11e7b8
Author: jfurtek <jfurtek@nvidia.com>
Date:   Mon Apr 25 19:00:20 2022 +0000

    [mlir][tblgen] Generate builders with inferred return types and unwrapped attributes
    
    This diff causes mlir-tblgen to generate code for an additional builder for an
    operation argument with a return type that can be inferred *AND* an attribute in
    the argument list can be "unwrapped." (Previously, the unwrapped build function
    was only generated for builders with explicit return types in separate or
    aggregate form.) As an example, this builder might be used by code that creates
    operations that implement the `SameOperandsAndResultType` interface. A test case
    was created.
--

commit 87468e85fcdcf1bd5055466e34d17436a79017a2
Author: Ishaan Gandhi <ishaangandhi@gmail.com>
Date:   Mon Apr 25 20:15:15 2022 +0200

    compile commands header to source heuristic lower-cases filenames before inferring file types
    
    This leads to ".C" files being rewritten as ".c" files and being inferred to be "c" files as opposed to "c++" files.
    
    Fixes https://github.com/clangd/clangd/issues/1108
    
    Reviewed By: sammccall
    
--

    Added lowering support for atomic read and write constructs
    
    This patch adds lowering support for atomic read and write constructs.
    Also added is pointer modelling code to allow FIR pointer like types to
    be inferred and converted while lowering.
    
    Reviewed By: kiranchandramohan
    
    Differential Revision: https://reviews.llvm.org/D122725
    
--
    on -- so that they are not substantially more expensive than a cast.
    Most of these improvements are very small, but I measured a 3% decrease
    in -O0 object file size for a simple C++ source file using the standard
    library after this change.
    
    We now automatically infer the `const` and `nothrow` attributes on these
    now-builtin functions, in particular meaning that we get a warning for
    an unused call to one of these functions.
    
    In C++20 onwards, we disallow taking the addresses of these functions,
    per the C++20 "addressable function" rule. In earlier language modes, a
--

    [InstCombine] remove likely redundant ValueTracking-based folds for shifts
    
    This is not expected to have a functional difference as discussed in the
    post-commit comments for 8a9c70fc01e6. All of the motivating tests for
    the older fold still optimize as expected because other code can infer
    the 'nuw'.

commit 9209a519180b478f7a77d7c4781ea857536d77ed
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Sun Apr 17 17:11:48 2022 -0400
--
Date:   Sun Apr 17 15:45:20 2022 -0400

    MachineModuleInfo: Remove UsesMorestackAddr
    
    This is x86 specific, and adds statefulness to
    MachineModuleInfo. Instead of explicitly tracking this, infer if we
    need to declare the symbol based on the reference previously inserted.
    
    This produces a small change in the output due to the move from
    AsmPrinter::doFinalization to X86's emitEndOfAsmFile. This will now be
    moved relative to other end of file fields, which I'm assuming doesn't
--
    to be used instead of getOrInsertFunction() when building a libcall from
    within an LLVM optimizer(). The idea is that this new function also makes
    sure that any mandatory argument attributes are added to the function
    prototype (after calling getOrInsertFunction()).
    
    inferLibFuncAttributes() is renamed to inferNonMandatoryLibFuncAttrs() as it
    only adds attributes that are not necessary for correctness but merely
    helping with later optimizations.
    
    Generally, the front end is responsible for building a correct function
    prototype with the needed argument attributes. If the middle end however is
--
    on -- so that they are not substantially more expensive than a cast.
    Most of these improvements are very small, but I measured a 3% decrease
    in -O0 object file size for a simple C++ source file using the standard
    library after this change.
    
    We now automatically infer the `const` and `nothrow` attributes on these
    now-builtin functions, in particular meaning that we get a warning for
    an unused call to one of these functions.
    
    In C++20 onwards, we disallow taking the addresses of these functions,
    per the C++20 "addressable function" rule. In earlier language modes, a
--
    on -- so that they are not substantially more expensive than a cast.
    Most of these improvements are very small, but I measured a 3% decrease
    in -O0 object file size for a simple C++ source file using the standard
    library after this change.
    
    We now automatically infer the `const` and `nothrow` attributes on these
    now-builtin functions, in particular meaning that we get a warning for
    an unused call to one of these functions.
    
    In C++20 onwards, we disallow taking the addresses of these functions,
    per the C++20 "addressable function" rule. In earlier language modes, a
--

commit 26b14c3ea77fd66e4edc3d62231413621d793181
Author: Austin Kerbow <Austin.Kerbow@amd.com>
Date:   Fri Apr 1 20:02:31 2022 -0700

    [InferAddressSpaces] Fix assert on invalid bitcast placement
    
    Similar to the problem in 0bb25b4603, bitcasts that are inserted must
    dominate all uses. When rewriting "values" with "new values" that have
    the updated address space, we may replace the "new value" with a bitcast
    if one of the original users is an addresspace cast. This bitcast must
--

commit 2f78b43f4bafaed09f6549da393bd9ee056ed851
Author: Mogball <jeffniu22@gmail.com>
Date:   Thu Apr 7 18:22:14 2022 +0000

    [mlir][ods] Fix builder gen for VariadicRegion with inferred types
    
    Builders generated for ops with variadic regions and inferred return types were not being correctly generated (missing parameter).

commit ee2d9b8723561fb6a81b9c2c4fd7a93300c6154f
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Thu Apr 7 11:12:09 2022 -0700

--
Author: natashaknk <natashaknk@google.com>
Date:   Thu Apr 7 10:22:23 2022 -0700

    [tosa][mlir] Add dynamic width/height support for depthwise convolution in tosa-to-linalg
    
    In addition, fixed a small bug with padding incorrectly inferring output shape for dynaic inputs in convolution
    
    Reviewed By: jpienaar
    
    Differential Revision: https://reviews.llvm.org/D121872

--
Author: Augie Fackler <augie@google.com>
Date:   Mon Mar 14 16:25:56 2022 -0400

    InstCombineCalls: when adding an align attribute, never reduce it
    
    Sometimes we can infer an align from an allocalign but the function
    already promised it'd be more-aligned than the allocalign and there's an
    existing align that we shouldn't reduce. Make sure we handle that
    correctly.
    
    Differential Revision: https://reviews.llvm.org/D121642
--

commit ca051a46fbba869d3ac2c76509623a13ede70f5e
Author: Augie Fackler <augie@google.com>
Date:   Mon Apr 4 12:43:16 2022 -0400

    InstCombineCalls: infer return alignment from allocalign attributes
    
    This exposes a couple of lingering bugs, which will be fixed in
    the next two commits.
    
    Differential Revision: https://reviews.llvm.org/D123052
--
    Use new NotAtomic expansion to turn these into the equivalent
    non-atomic operations. Independent lanes cannot access the private
    memory of other lanes, so there's no possibility for synchronization.
    
    These don't really appear directly in user code, but
    InferAddressSpaces can make these appear after optimizations.
    
    Fixes issues 54693 and 54274.

commit 7f14a1d46b8e2233cbfb959e55ac9b7d33449c7e
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
--
    big enough to import 261,144 classes but this is a lot more than
    we currently have, an allocating a too-large buffer can add memory
    pressure even if it's only for a short time.  Reduce the size of
    this memory buffer to big enough to import 163,840 classes.  I'll
    probably move to a scheme where we read the objc classes in chunks,
    with a smaller buffer and multiple inferior function calls.
    
    rdar://91275493

commit 7c53fc4fe1308f5b2a7527d14ea41fabb18109b8
Author: Tom Honermann <tom.honermann@intel.com>
--

commit dbb6a75fbb3679a03edf6f4bc7e7262f751b6dfc
Author: Jonas Paulsson <paulsson@linux.vnet.ibm.com>
Date:   Tue Apr 5 09:55:43 2022 +0200

    [LibCalls] Respect TLI.getExtAttrForI32Param() in inferLibFuncAttributes().
    
    getExtAttrForI32Param() is the method to be used for determining the type of
    extension attribute (if any) that is to be added for a signed/unsigned
    argument.
    
--

commit fe528e72163371e10242f4748dab687eef30a1f9
Author: Artem Belevich <tra@google.com>
Date:   Thu Mar 31 11:58:44 2022 -0700

    [CUDA] Don't call inferCUDATargetForImplicitSpecialMember too early.
    
    Otherwise we may crash because the special member has not been sufficiently set
    up yet. Fixes https://github.com/llvm/llvm-project/issues/54537
    
    Differential Revision: https://reviews.llvm.org/D122846
--
Author: Matthias Springer <springerm@google.com>
Date:   Thu Mar 31 17:04:38 2022 +0900

    [mlir][tensor] Fix bufferization of CollapseShapeOp / ExpandShapeOp
    
    Infer a tighter MemRef type instead of always falling back to the most dynamic MemRef type. This is inefficient and caused op verification errors.
    
    Differential Revision: https://reviews.llvm.org/D122649

commit 893d63fbdc0e08b8251e5ec0ce57be0e05229d2e
Author: Fraser Cormack <fraser@codeplay.com>
--
    [mlir][memref] Fix ExpandShapeOp verifier
    
    * Complete rewrite of the verifier.
    * CollapseShapeOp verifier will be updated in a subsequent commit.
    * Update and expand op documentation.
    * Add a new builder that infers the result type based on the source type, result shape and reassociation indices. In essence, only the result layout map is inferred.
    
    Differential Revision: https://reviews.llvm.org/D122641

commit 5426da8ffa4a6d55adab21026ce6ebe8f1cc6ef2
Author: Argyrios Kyrtzidis <kyrtzidis@apple.com>
--

commit dda003afa643011cc3d9c987fd4356410912c5a2
Author: Chia-hung Duan <chiahungduan@google.com>
Date:   Fri Mar 25 18:09:53 2022 +0000

    [mlir] Add InferTensorType without supporting reifyReturnTypeShapes
    
    This is useful for the case that we don't need to implement
    reifyReturnTypeShapes.
    
    Reviewed By: jpienaar
--
    [mlir][NVVM] Add support for nvvm mma.sync ops
    
    This patch adds MLIR NVVM support for the various NVPTX `mma.sync`
    operations. There are a number of possible data type, shape,
    and other attribute combinations supported by the operation, so a
    custom assebmly format is added and attributes are inferred where
    possible.
    
    Reviewed By: ThomasRaoux
    
    Differential Revision: https://reviews.llvm.org/D122410
--
Author: Simon Moll <simon.moll@emea.nec.com>
Date:   Tue Mar 22 11:41:14 2022 +0100

    [VP] Fix VPintrinsic::getStaticVectorLength for vp.merge|select
    
    VPIntrinsic::getStaticVectorLength infers the operational vector length
    of a VPIntrinsic instance from a type that is used with the intrinsic.
    The function used the mask operand before. Yet, vp.merge|select do not
    have a mask operand (in the predicating sense that the other VP
    intrinsics are using them - it is a selection mask for them). Fallback
    to the return type to fix this.
--
    [mlir] Printing oilist element
    
    This patch attempts to deduce when the oilist element must be printed
    based on the optional arguments to it. This especially helps creating
    an operation accurately because with the current implementation, the
    inferred unit attributes must be manually added to print the clauses
    appropriately.
    
    Reviewed By: Mogball
    
    Differential Revision: https://reviews.llvm.org/D121579
--

commit 2ed030ba88f98e7e8a8fc1ae5c8b6964fb230bb9
Author: psamolysov-intel <pavel.samolysov@intel.com>
Date:   Mon Mar 21 10:56:26 2022 -0500

    [InferAddressSpaces][NFC] Small code improvements for the InferAddressSpaces pass
    
    There is a bunch of code improvements in the patch: marking as const everything what can be
    const and fixing some typos in comments.
    
    Also the patch removes the shadowing parameter TTI from the rewriteWithNewAddressSpaces
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Fri Mar 18 15:49:44 2022 -0700

    [slp][tests] Add missing function attributes
    
    SLP is currently assuming that control dependence in these cases is irrelevant.  This is only valid if none of the lib-funcs involved can throw or infinite loop in the scalar forms.  This appears to be true (or at least we infer the respective attributes) for the libfuncs I spot checked.  This change is mostly for shrunking the diff on an upcoming patch.

commit b4d08dfd9d40493cb41296a95475beb3596c437e
Author: Thomas Raoux <thomasraoux@google.com>
Date:   Fri Mar 18 17:00:58 2022 +0000

    [mlir] Remove incorrect builders for ExpandShapeOp
    
    ExpandShapeOp builder cannot infer the result type since it doesn't know
    how the dimension needs to be split. Remove this builder so that it
    doesn't get used accidently. Also remove one potential path using it in
    generic fusion.
    
    Differential Revision: https://reviews.llvm.org/D122019
--
Date:   Fri Mar 18 11:47:47 2022 +0100

    [lldb] Fix TestProcessIOHandlerInterrupt.py for macos
    
    On darwin, we don't completely suppress the signal used to interrupt the
    inferior. The underlying read syscall returns EINTR, which causes premature
    termination of the input loop.
    
    Work around that by hand-rolling an EINTR-resistant version of getline.

commit fee94803f59dbd1a5b39c51036f181246d7d2fe6
--
Date:   Thu Mar 17 12:16:29 2022 -0500

    [mlir][sparse] Introduce new binary and unary op
    
    When the sparse_tensor dialect lowers linalg.generic,
    it makes inferences about how the operations should
    affect the looping logic. For example, multiplication
    is an intersection while addition is a union of two
    sparse tensors.
    
    The new binary and unary op separate the looping logic
--

commit e5822ded562fd233ff7468d88da9e2c4f1a96c70
Author: Florian Hahn <flo@fhahn.com>
Date:   Wed Mar 16 10:24:33 2022 +0000

    [FunctionAttrs] Infer argmemonly .
    
    This patch adds initial argmemonly inference, by checking the underlying
    objects of locations returned by MemoryLocation.
    
    I think this should cover most cases, except function calls to other
    argmemonly functions.
    
    I'm not sure if there's a reason why we don't infer those yet.
    
    Additional argmemonly can improve codegen in some cases. It also makes
    it easier to come up with a C reproducer for 7662d1687b09 (already fixed,
    but I'm trying to see if C/C++ fuzzing could help to uncover similar
    issues.)
--
    [FunctionAttrs] Replace  MemoryAccessKind with FMRB.
    
    Update FunctionAttrs to use FunctionModRefBehavior instead
    MemoryAccessKind.
    
    This allows for adding support for inferring argmemonly and others,
    see D121415.
    
    Reviewed By: nikic
    
    Differential Revision: https://reviews.llvm.org/D121460
--

commit 3c9e8499435a4ecd197dcae23e9de6da914057d2
Author: Florian Hahn <flo@fhahn.com>
Date:   Thu Mar 10 22:32:29 2022 +0000

    [FunctionAttrs] Add tests for argmemonly inference.

commit 0be56c87013b585405209f324cc8dfc5ebde416f
Author: owenca <owenpiano@gmail.com>
Date:   Thu Mar 10 14:20:24 2022 -0800

--
    
    To recap, in contrast to ELF, which puts strings that need different
    alignments into different sections, `clang`'s Mach-O backend puts them
    all in one section.  Strings that need to be aligned have the .p2align
    directive emitted before them, which simply translates into zero padding
    in the object file. In other words, we have to infer the alignment of
    the cstrings from their addresses.
    
    We differ slightly from ld64 in how we've chosen to align these
    cstrings. Both LLD and ld64 preserve the number of trailing zeros in
    each cstring's address in the input object files. When deduplicating
--

commit d538ad53c36b1e152f0feeacf9cdd1ae1cb85963
Author: Yuanfang Chen <yuanfang.chen@sony.com>
Date:   Thu Mar 10 10:50:30 2022 -0800

    [JMCInstrument] infer proper path style based on debug info
    
    By default, the path style is decided by the host. This patch makes JMC
    uses the path style used by the SP directory. This makes JMC output
    host-independent.
    
--
    The reason is that the type trait
      std::is_constructible<ShapeStorageT, Arg>::value
    is fulfilled because ShapeAdaptor can be converted to bool and it can be
    used to construct ShapeStorageT. In the end, we won't give any warning
    or error message when doing things like
      inferredReturnShapes.emplace_back(valueShapeRange.getShape(0));
    
    Reviewed By: jpienaar
    
    Differential Revision: https://reviews.llvm.org/D120845

--

commit 48c74bb2e2a72830f1068823bfc2f6fd4b53d427
Author: Fangrui Song <i@maskray.me>
Date:   Tue Mar 8 14:34:53 2022 -0800

    [SampleProfileInference] Work around odr-use of const non-inline static data member to fix -O0 builds after D120508
    
    MinBaseDistance may be odr-used by std::max, leading to an undefined symbol linker error:
    
    ```
    ld.lld: error: undefined symbol: (anonymous namespace)::MinCostMaxFlow::MinBaseDistance
    >>> referenced by SampleProfileInference.cpp:744 (/home/ray/llvm-project/llvm/lib/Transforms/Utils/SampleProfileInference.cpp:744)
    >>>               lib/Transforms/Utils/CMakeFiles/LLVMTransformUtils.dir/SampleProfileInference.cpp.o:((anonymous namespace)::FlowAdjuster::jumpDistance(llvm::FlowJump*) const)
    ```
    
    Since llvm-project is still using C++ 14, workaround it with a cast.

commit 12bfea58b8ffc141c4440af998dc8ee1b309dbe4
--

commit f740bdbd2d084bbef52dd08d445497d3ec2ac24e
Author: Mahesh Ravishankar <ravishankarm@google.com>
Date:   Fri Mar 4 04:28:47 2022 +0000

    [mlir][Linalg] Modify `InferStaticShapeOfOperands` to work on Linalg Ops.
    
    Commit rG1a2bb03edab9d7aa31beb587d0c863acc6715d27 introduced a pattern
    to convert dynamic dimensions in operands of `GenericOp`s to static
    values based on indexing maps and shapes of other operands. The logic
    is directly usable to any `LinalgOp`. Move that pattern as an
--

commit f909aed671fee194297ba9190f0e4baa4b10d0c2
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Thu Mar 3 16:30:30 2022 -0800

    Revert "[SCEV] Infer ranges for SCC consisting of cycled Phis"
    
    This reverts commit fc539b0004d4fe8072aca00e38599a2300a955ce.
    
    Causes miscompiles, see D110620.

--
Date:   Fri Mar 4 14:21:56 2022 -0800

    [lldb/Test] Disable test_scripted_process_and_scripted_thread on Windows
    
    This disables TestScriptedProcess.test_scripted_process_and_scripted_thread
    on Windows since the inferior binary a linked to a dylib that doesn't
    build on Windows.
    
    This should fix https://lab.llvm.org/buildbot/#/builders/83/builds/16100
    
    Signed-off-by: Med Ismail Bennani <medismail.bennani@gmail.com>
--
Author: natashaknk <natashaknk@google.com>
Date:   Mon Feb 28 15:49:50 2022 -0800

    [tosa][mlir] Add support for dynamic width/height for Conv2D inputs in tosa-to-linalg
    
    Infers output shape for dynamic width/height inputs.
    
    Reviewed By: jpienaar
    
    Differential Revision: https://reviews.llvm.org/D119977

--

commit ef9816e43c1418da9b481dc750f04e8844f72ef5
Author: Sander de Smalen <sander.desmalen@arm.com>
Date:   Wed Mar 2 16:03:33 2022 +0000

    [AArch64][SME] Don't infer -neon from +streaming-sve.
    
    In Streaming SVE mode full NEON is not available, even though this is
    implied from armv8-a. LLVM previously inferred that NEON needed to be
    disabled when setting +streaming-sve, but there is no need to infer
    this from +streaming-sve, because we can explicitly disable NEON using
    LLVM's attribute mechanism. This is specifically relevant because
    +streaming-sve is not a user-facing feature, but rather an LLVM internal
    feature.
    
--
    small oversight was that PlatformMacOSX (despite the name) is active
    for any native Darwin operating system, where lldb and the target
    process are running on the same system. This patch uses compile-time
    checks to return the appropriate OSType for the OS lldb is being
    compiled to, so the "host" platform will correctly be selected when
    lldb & the inferior are both running on that OS. And a small change
    to PlatformMacOSX::GetSupportedArchitectures which adds additional
    recognized triples when running on macOS but not other native Darwin
    systems.
    
    Differential Revision: https://reviews.llvm.org/D120517
--

commit 27d9a58407c44c8bb3fe7b94ff8d3b9bea25afc4
Author: Jan Svoboda <jan_svoboda@apple.com>
Date:   Wed Feb 23 14:15:47 2022 +0100

    [clang][modules] Infer framework modules in explicit builds
    
    This patch enables inferring framework modules in explicit builds in all contexts. Until now, inferring framework modules only worked with `-fimplicit-module-maps` due to this block of code:
    
    ```
    // HeaderSearch::loadFrameworkModule
      case LMM_InvalidModuleMap:
        // Try to infer a module map from the framework directory.
        if (HSOpts->ImplicitModuleMaps)
          ModMap.inferFrameworkModule(Dir, IsSystem, /*Parent=*/nullptr);
        break;
    ```
    
    Reviewed By: Bigcheese
    
--

commit 1a2bb03edab9d7aa31beb587d0c863acc6715d27
Author: Prateek Gupta <gprateek93@gmail.com>
Date:   Thu Feb 3 15:55:30 2022 +0000

    [MLIR][LINALG] Add canonicalization pattern in `linalg.generic` op for static shape inference.
    
    This commit adds canonicalization pattern in `linalg.generic` op
    for static shape inference. If any of the inputs or outputs have
    static shape or is casted from a tensor of static shape, then
    shapes of all the inputs and outputs can be inferred by using the
    affine map of the static shape input/output.
    
    Signed-Off-By: Prateek Gupta <prateek@nod-labs.com>
    
    Reviewed By: mravishankar
--

commit 3ce2ee28f042c2a00d09c228c76f2692778bd607
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Fri Feb 18 14:40:11 2022 +0100

    [mlir][ODS] Infer return types if the operands are variadic but the results are not
    
    Clean up code that worked around this limitation.
    
    Differential Revision: https://reviews.llvm.org/D120119

--

commit d558540fae376361fbbf9554828c7488bc1c341d
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Fri Feb 18 12:51:43 2022 +0100

    [mlir][Vector] Add return type inference for multi_reduction
    
    This subsumes the builder and verifier.

commit 3ba42a564a9acfd25f30655d68c2e98bba46c7e4
Author: Florian Hahn <flo@fhahn.com>
--

    [mlir][Vector] Switch ExtractOp to the declarative assembly format
    
    This is a bit awkward since ExtractOp allows both `f32` and
    `vector<1xf32>` results for a scalar extraction. Allow both, but make
    inference return the scalar to make this as NFC as possible.

commit 4086b3be4422b0f8eb09c948b39dd495aeee05d9
Author: Matthias Springer <springerm@google.com>
Date:   Fri Feb 18 18:46:20 2022 +0900

--

commit a83e08b4506d971c724135519d1509570c570889
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Fri Feb 18 01:15:14 2022 +0100

    [mlir][Vector] Add InferTypeOpInterface to vector dialect and remove the now redundant builders

commit c6a3225bb03b6afc2b63fbf13db3c100406b32ce
Author: Zakk Chen <zakk.chen@sifive.com>
Date:   Wed Feb 16 20:49:25 2022 -0800

--

commit fc539b0004d4fe8072aca00e38599a2300a955ce
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Thu Feb 17 17:38:42 2022 +0700

    [SCEV] Infer ranges for SCC consisting of cycled Phis
    
    Our current strategy of computing ranges of SCEVUnknown Phis was to simply
    compute the union of ranges of all its inputs. In order to avoid infinite recursion,
    we mark Phis as pending and conservatively return full set for them. As result,
    even simplest patterns of cycled phis always have a range of full set.
--
    predicate or not.
    
    This is NFC-ish in that the alloca equality codepath is the only
    part that sees additional non-inbounds offsets now, and for that
    codepath it doesn't matter whether or not the GEP is inbounds, as
    it does a stronger check itself. InstCombine would infer inbounds
    for such GEPs.

commit eccdf2d9b1286a976943489acb1642f5d7b35334
Author: Vladislav Khmelevsky <och95@yandex.ru>
Date:   Tue Feb 15 13:23:31 2022 +0300
--

commit 0bb25b46034aa6790b8b746bd0b8780219534664
Author: Austin Kerbow <Austin.Kerbow@amd.com>
Date:   Thu Feb 10 22:43:45 2022 -0800

    [InferAddressSpaces] Fix assert on invalid cast ordering
    
    If a cast is needed when replacing uses with newly created values, the
    cast must be inserted after the instruction that defines the new value.
    
    Fixes: SWDEV-321215
--
    If the attribute "amdgpu-no-hostcall-ptr" is absent on a kernel, the
    default behaviour is to emit kernel metadata indicating that the
    kernel uses the hostcall buffer pointer passed as an implicit
    argument.
    
    The attribute may be placed explicitly by the user, or inferred by the
    AMDGPU attributor by examining the call-graph. The attribute is
    inferred only if the function is not being sanitized, and the
    implictarg_ptr does not result in a load of any byte in the hostcall
    pointer argument.
    
    Reviewed By: jdoerfert, arsenm, kpyzhov
    
--

commit 52fbb786a638ecc7349641b45b62a5abafffdf75
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Feb 8 19:22:00 2022 -0500

    InferAddressSpaces: Fix assert on inferred source for inttoptr/ptrtoint
    
    If we had some source value we could infer an address space from that
    went through a ptrtoint/inttoptr pair, this would fail since bitcast
    can't change the address space.
    
    Fixes issue 53665.

--
    * In PDLL (using PDLL constructs)
    In this case, the body is defined using PDLL constructs:
    
    ```pdll
    Rewrite BuildFooOp() {
      // The result type of the Rewrite is inferred from the return.
      return op<my_dialect.foo>;
    }
    // Constraints/Rewrites can also implement a lambda/expression
    // body for simple one line bodies.
    Rewrite BuildFooOp() => op<my_dialect.foo>;
--
    Based on my (limited) research, this is not a lldb bug, but simply a
    consequence of the operating system reporting their presence
    asynchronously -- they're reported when they are scheduled to run (or
    something similar), and not at the time of the CreateThread call.
    
    To fix this, I add some additional synchronization to the test inferior,
    which makes sure that the created thread is alive before continuing to
    do other things.

commit 96000f5c2bf99365bb45528898c864fcb1c7780b
Author: Pavel Labath <pavel@labath.sk>
--
Author: Pavel Labath <pavel@labath.sk>
Date:   Mon Feb 7 20:04:42 2022 +0100

    [lldb/test] Remove sleeps from some lldb-server tests
    
    Instead of using sleeps, have the inferior notify us (via a trap opcode) that
    the requested number of threads have been created.
    
    This allows us to get rid of some fairly dodgy test utility code --
    wait_for_thread_count seemed like it was waiting for the threads to
    appear, but it never actually let the inferior run, so it only succeeded
    if the threads were already started when the function was called. Since
    the function was called after a fairly small delay (1s, usually), this
    is probably the reason why the tests were failing on some bots.
    
    Differential Revision: https://reviews.llvm.org/D119167
--

commit 6cda6d2f61a61779c5c8680d19d4d5bfe773ab41
Author: Augie Fackler <augie@google.com>
Date:   Thu Feb 3 08:39:15 2022 -0800

    [test] check strictest attributes possible for InferFunctionAttrs test
    
    This appears to have all the same attributes as many other functions
    in this file, and I think the use of INACCESSIBLEMEMONLY_NOFREE_NOUNWIND
    instead of INACCESSIBLEMEMONLY_NOFREE_NOUNWIND_WILLRETURN was an
    oversight that meant aligned_alloc's attributes were just going
    unchecked. This patch corrects the test defect and now the attributes
    inferred on aligned_alloc are actually validated, and the test still
    passes.
    
    Differential Revision: https://reviews.llvm.org/D117922

commit aade28ea70f5af563af20380a2a0df4166581a53
--

commit ed2deab5956fea9e8f64ef6020fe0b4e19734ecc
Author: Mircea Trofin <mtrofin@google.com>
Date:   Tue Feb 1 08:21:30 2022 -0800

    [nfc][regalloc] Make the max inference cutoff configurable
    
    Added a flag to make configurable the number of interferences after
    which we 'bail out' and treat a set of intervals as un-evictable. Also
    using it on the ML side, as it turns out to be a good control for
    compile-time.
--
Author: gysit <gysit@google.com>
Date:   Wed Feb 2 09:06:31 2022 +0000

    [mlir][vector] Make write permutation lowering work with tensors.
    
    Use type inference when building the TransferWriteOp in the TransferWritePermutationLowering. Previously, the result type has been set to Type() which triggers an assertion if the pattern is used with tensors instead of memrefs.
    
    Reviewed By: springerm
    
    Differential Revision: https://reviews.llvm.org/D118758

--
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Tue Jan 25 13:21:37 2022 +0700

    [SCEV] Use lshr in implications
    
    This patch adds support for implication inference logic for the
    following pattern:
    ```
      lhs < (y >> z) <= y, y <= rhs --> lhs < rhs
    ```
    We should be able to use the fact that value shifted to right is
--

commit 31c0e52420bb089291758a11e65e1672244c2e9f
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Jan 18 12:38:28 2022 -0800

    A readonly operand bundle should not prevent inference of readonly from a readnone callee
    
    A readonly operand bundle disallows inference of readnone from the callee, but it should not prevent us from using the readnone fact on the callee to infer readonly for the callsite.
    
    Fixes pr53270.
    
    Differential Revision: https://reviews.llvm.org/D117591

--

commit 43907d608a22a61245813efeb978928fdfb90b6a
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Jan 18 12:08:40 2022 -0800

    Fix incorrect inference of writeonly despite reading operand bundle
    
    If we have a writeonly function called from a callsite with a potentially reading operand bundle, we can not conclude the callsite is writeonly.
    
    The changed test is the only one I've been able to demonstrate a current miscompile on, but an incorrect result here could show up in a bunch of subtle ways.  For instance, this issue caused several spurious test changes when combined with D117591.

--
Date:   Thu Jan 13 08:43:29 2022 +0100

    [MLIR][Linalg] Handle Attribute in InitTensorOp
    
    In some cases, the result of an initTensorOp may have an attribute.
    However, the Attribute was not passed to `inferResultType`, failing the
    verifier. Therefore, propagate the Attribute to `inferResultType`.
    
    Reviewed By: ftynse
    
    Differential Revision: https://reviews.llvm.org/D117192

--
    Function(
        param1,
        param2,
        param3);
    
    A style supported by other code styling tools (e.g. rustfmt) is to allow the closing brackets to be placed on their own line, aiding the user in being able to quickly infer the bounds of the block of code.
    
    Function(
        param1,
        param2,
        param3
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Jan 12 17:32:05 2022 -0800

    [Attributor] Simplify how we handle required alignment during heap-to-stack [NFC]
    
    The existing code duplicated the same concern in two places, and (weirdly) changed the inference of the allocation size based on whether we could meet the alignment requirement.  Instead, just directly check the allocation requirement.

commit aea27c3100396ec82412ad5b0254448f3fb0406b
Author: Peter Klausler <pklausler@nvidia.com>
Date:   Wed Dec 29 12:51:39 2021 -0800

--
Date:   Tue Jan 11 15:05:45 2022 +0100

    [mlir][linalg] Use cast instead of dyn_cast that's always dereferenced
    
    This turns a random nullptr deref into an assertion failure in case
    `tensor::registerInferTypeOpInterfaceExternalModels` isn't called.

commit b2e452add004ba8d689f66f4c82ce557a48e57f4
Author: Viktoria Maksimova <viktoria.maksimova@intel.com>
Date:   Tue Jan 11 16:34:19 2022 +0300

--

    [MemoryBuiltins] Add field for alignment argument [NFC]
    
    There are a few places where the alignment argument for AlignedAllocLike functions was previously hardcoded. This patch adds an getAllocAlignment function and a change to the MemoryBuiltin table to allow alignment arguments to be found generically.
    
    This will shortly allow alignment inference on operator new's with align_val params and an extension to Attributor's HeapToStack.  The former will follow shortly - I split Bryce's patch for purpose of having the large change be NFC.  The later will be reviewed separately.
    
    Differential Revision: https://reviews.llvm.org/D116851 (part 1 of 2)

commit b271184f07ea20ab05a40c0806bab46572e41405
Author: Craig Topper <craig.topper@sifive.com>
--

commit f4c54683d684100fffd307ddf773078429b83442
Author: Philip Reames <listmail@philipreames.com>
Date:   Mon Jan 10 08:25:20 2022 -0800

    [instcombine] Infer alignment for aligned_alloc with potentially zero size
    
    This change removes a previous restriction where we had to prove the allocation performed by aligned_alloc was non-zero in size before using the align parameter to annotate the result.  I believe this was conservatism around the C11 specification of this routine which allowed UB when size was not a multiple of alignment, but if so, it was a partial one at best.  (ex: align 32, size 16  was equally UB, but not restricted)  The spec has since been clarified to require nullptr return, not UB.
    
    A nullptr - the documented return for this function on failure for all cases after UB mentioned above was removed - is trivially aligned for any power of two.  This isn't totally new behavior even for this transform, we'd previously annotate potentially failing allocs (e.g. huge sizes) meaning we were putting align on potentially null pointers anyways.  This change simpy does the same for all failure modes.

--
    We currently have two similar implementations of this concept:
    isNoAliasCall() only checks for the noalias return attribute.
    isNoAliasFn() also checks for allocation functions.
    
    We should switch to only checking the attribute. SLC is responsible
    for inferring the noalias return attribute for non-new allocation
    functions (with a missing case fixed in
    https://github.com/llvm/llvm-project/commit/348bc76e3548c52dbcd442590ca0a7f5b09b7534).
    For new, clang is responsible for setting the attribute,
    if -fno-assume-sane-operator-new is not passed.
    
--

    [instcombine] Key deref vs deref_or_null annotation of allocation sites off nonnull attribute
    
    Goal is to remove use of isOpNewLike.  I looked at a couple approaches to this, and this turned out to be the cheapest one.  Just letting deref_or_null be generated causes a bunch of test diffs, and I couldn't convince myself there wasn't a real regression somewhere.  A generic instcombine to convert deref_or_null + nonnull to deref is annoying complicated since you have to mix facts from callsite and declaration while manipulating only existing call site attributes.  It just wasn't worth the code complexity.
    
    Note that the change in new-delete-itanium.ll is a real regression.  If you have a callsite which overrides the builtin status of a nobuiltin declaration, *and* you don't put the apppriate attributes on that callsite, you may lose the deref fact.  I decided this didn't matter; if anyone disagrees, you can add this case to the generic non-null inference.

commit 6ce732cbadf7b474da1108dc7b3b473b80944aa5
Author: Arthur O'Dwyer <arthur.j.odwyer@gmail.com>
Date:   Mon Jan 3 20:49:24 2022 -0500

--

commit 348bc76e3548c52dbcd442590ca0a7f5b09b7534
Author: Nikita Popov <npopov@redhat.com>
Date:   Fri Jan 7 09:48:10 2022 +0100

    [LibCalls] Infer same attrs for reallocf() as realloc()
    
    reallocf() is the same as realloc() but frees the input pointer
    on failure as well. We can infer the same attributes.
    
    Also combine some cases that infer the same attributes and are
    logically related.

commit 38efa68b083e419301d4df55f1cb48a90cf088b2
Author: Victor Perez <victor.perez@codeplay.com>
Date:   Fri Jan 7 07:54:08 2022 +0000
--
Date:   Wed Jan 5 13:04:20 2022 +0100

    [lldb/linux] Fix a race in handling of simultaneous thread exits
    
    D116372, while fixing one kind of a race, ended up creating a new one.
    The new issue could occur when one inferior thread exits while another
    thread initiates termination of the entire process (exit_group(2)).
    
    With some bad luck, we could start processing the exit notification
    (PTRACE_EVENT_EXIT) only to have the become unresponsive (ESRCH) in the
    middle of the MonitorCallback function. This function would then delete
--

commit 5f0a349738304caf5f8083166f785a91048f574d
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Wed Jan 5 10:32:11 2022 +0100

    Revert "Revert "[InferAttrs] Add writeonly to all the math functions""
    
    This reverts commit 29b6e967f3e99ac45340ea37a70262c70e4e7528. The bug it
    found in PartiallyInlineLibCalls was fixed in
    c8ffc73350dbb6044ca947bbead127b9b914cdf3.

--

commit 29b6e967f3e99ac45340ea37a70262c70e4e7528
Author: Martin Storsjö <martin@martin.st>
Date:   Wed Jan 5 10:54:07 2022 +0200

    Revert "[InferAttrs] Add writeonly to all the math functions"
    
    This reverts commit ea75be3d9df448b6abafaf752a8141764d93ca33 and
    1eb5b6e85045d22720f177a02aaf7097930e4b4f.
    
    That commit caused crashes with compilation e.g. like this
--

commit 1eb5b6e85045d22720f177a02aaf7097930e4b4f
Author: Fangrui Song <i@maskray.me>
Date:   Tue Jan 4 18:59:35 2022 -0800

    [InferAttrs] If readonly is already set, set readnone instead of writeonly
    
    D116426 may lead to an assertion failure `Attributes 'readonly and writeonly' are incompatible!` if the builtin function already has `readonly`.

commit c75cedc237f9747c5d5fe2a312d5ccc8531e2e70
Author: Chuanqi Xu <yedeng.yd@linux.alibaba.com>
--

commit 0b09313cd53316eacbdc5e98d4ef00bef2c41d02
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Jan 4 08:39:51 2022 -0800

    [funcattrs] Infer writeonly argument attribute [part 2]
    
    This builds on the code from D114963, and extends it to handle calls both direct and indirect. With the revised code structure (from series of previously landed NFCs), this is pretty straight forward.
    
    One thing to note is that we can not infer writeonly for arguments which might be captured. If the pointer can be read back by the caller, and then read through, we have no way to track that. This is the same restriction we have for readonly, except that we get no mileage out of the "callee can be readonly" exception since a writeonly param on a readonly function is either a) readnone or b) UB. This means we can't actually infer much unless nocapture has already been inferred.
    
    Differential Revision: https://reviews.llvm.org/D115003

commit 56ec762a76cbdf23c64707c45bfc9dd57f2e7abb
Author: Michael Liao <michael.hliao@gmail.com>
--
Date:   Tue Jan 4 08:28:59 2022 -0800

    [mlir][ods] Handle DeclareOpInterfaceMethods in formatgen
    
    Previously it would not consider ops with
    DeclareOpInterfaceMethods<InferTypeOpInterface> as having the
    InferTypeOpInterface interfaces added. The OpInterface nested inside
    DeclareOpInterfaceMethods is not retained so that one could query it, so
    check for the the C++ class directly (a bit raw/low level - will be
    addressed in follow up).
    
    Differential Revision: https://reviews.llvm.org/D116572
--

commit ea75be3d9df448b6abafaf752a8141764d93ca33
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Thu Dec 30 23:57:21 2021 +0100

    [InferAttrs] Add writeonly to all the math functions
    
    All of these functions would be `readnone`, but can't be on platforms
    where they can set `errno`. A `writeonly` function with no pointer
    arguments can only write (but never read) global state.
    
--

    [VP][ISel] use LEGALPOS for legalization action
    
    Use the VPIntrinsics.def's LEGALPOS that is specified with every VP
    SDNode to determine which return or operand value type shall be used to
    infer the legalization action.
    
    Reviewed By: frasercrmck
    
    Differential Revision: https://reviews.llvm.org/D116594

--
Author: Stanislav Funiak <stano@cerebras.net>
Date:   Tue Jan 4 08:11:35 2022 +0530

    [MLIR][PDL] Generalize result type verification
    
    Presently the result type verification checks if the type is used by a `pdl::OperationOp` inside the matcher. This is unnecessarily restrictive; the type could come from a `pdl::OperandOp or `pdl::OperandsOp` and still be inferrable.
    
    Reviewed By: rriddle, Mogball
    
    Differential Revision: https://reviews.llvm.org/D116083

--

commit 4683ce2cd899b2d682453e173c3466fa270c09f7
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Thu Dec 30 20:35:45 2021 +0100

    [InferAttrs] Give strnlen the same attributes as strlen
    
    This moves the only string function out of the big list of math funcs.
    And let's us CSE strnlen calls.

commit a96fe1bf3b320d62f1564ded5f7259eef1869cf9
--
    ```
       %0 = vector.transfer_write %v, %t[0,0,0], %cst :
         vector<2x4xf32>, tensor<2x1x4xf32>
    ```
    For this, check the trailing `vectorRank` dims of the insert_slice result
    tensor match the trailing dims of the inferred result tensor.
    
    Differential Revision: https://reviews.llvm.org/D116409

commit 84b285d6eb9d52f467fa710f2c9f490a0584c0b2
Author: Nuno Lopes <nuno.lopes@tecnico.ulisboa.pt>
--

commit ee5d5e19f99db863fc3037eb125d8cfce3b2c5d8
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Dec 22 18:21:59 2021 -0800

    [funcattrs] Use callsite param attributes from indirect calls when inferring access attributes
    
    Arguments to an indirect call is by definition outside the SCC, but there's no reason we can't use locally defined facts on the call site. This also has the nice effect of further simplifying the code.
    
    Differential Revision: https://reviews.llvm.org/D116118

--

commit b7b308c50ae51629a63e759cd1171714eca7784c
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Dec 21 09:15:54 2021 -0800

    [funcattrs] Infer access attributes for vararg arguments
    
    This change allows us to infer access attributes (readnone, readonly) on arguments passed to vararg functions. Since there isn't a formal argument corresponding to the parameter, they'll never be considered part of the speculative SCC, but they can still benefit from attributes on the call site or the callee function.
    
    The main motivation here is just to simplify the code, and remove some special casing. Previously, an indirect vararg call could return more precise results than an direct vararg call which is just weird.
    
    Differential Revision: https://reviews.llvm.org/D115964

commit 1fee7195c99a3cbeabb1ade35b00d974b4829e58
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Dec 21 09:09:54 2021 -0800

    [funcattrs] Fix incorrect readnone/readonly inference on captured arguments
    
    This fixes a bug where we would infer readnone/readonly for a function which passed a value to a function which could capture it. With the value captured in memory, the function could reload the value from memory after the call, and write to it. Inferring the argument as readnone or readonly is unsound.
    
    @jdoerfert apparently noticed this about two years ago, and tests were checked in with 76467c4, but the issue appears to have never gotten fixed.
    
    Since this seems like this issue should break everything, let me explain why the case is actually fairly narrow. The main inference loop over the argument SCCs only analyzes nocapture arguments. As such, we can only hit this when construction the partial SCCs. Due to that restriction, we can only hit this when we have either a) a function declaration with a manually annotated argument, or b) an immediately self recursive call.
    
    It's also worth highlighting that we do have cases we can infer readonly/readnone on a capturing argument validly. The easiest example is a function which simply returns its argument without ever accessing it.
    
    Differential Revision: https://reviews.llvm.org/D115961

commit 55c71c9eac9bc7f956a05fa9258fad4f86565450
Author: minglotus-6 <mingmingl@google.com>
--
    value is not used, they don't throw and they don't diverge. The last
    two conditions were previously not checked, because all the libcalls
    with analyzable writes already happened to satisfy those conditions
    anyway. This may not be true for generalizations (with D115904 in mind).
    
    No test changes because the necessary attributes are already inferred
    for currently supported libcalls.
    
    Differential Revision: https://reviews.llvm.org/D115962

commit 18ab892ff7e9032914ff7fdb07685d5945c84fef
--

commit 1aa0b84fa468076262e18d5071d284cac5b402a3
Author: Mogball <jeffniu22@gmail.com>
Date:   Wed Dec 15 06:22:04 2021 +0000

    [mlir][ods] Fix OpFormatGen calling inferReturnTypes before region/segment resolution
    
    The generated parser for ops with type inference calls `inferReturnTypes` before region resolution and segment attribute resolution, i.e. regions and the segment attributes are not passed to the `inferReturnTypes` even though it may need that information.
    
    In particular, an op that has sized operand segments which queries those operands in its `inferReturnTypes` function will crash because the segment attributes hadn't been added yet.
    
    Reviewed By: rriddle
    
    Differential Revision: https://reviews.llvm.org/D115782

--
    This patch ensures that any global const that does not
    have constant initialization stays in address space 1.
    
    Note - a second patch is in the works where all global
    constants are placed in address space 1 during
    codegen and then the opt pass InferAdressSpaces
    will promote to address space 4 where necessary.
    
    Reviewed By: JonChesterfield
    
    Differential Revision: https://reviews.llvm.org/D115661
--

commit 843534db3cc90d4cabaf67b225256ecd53aeb613
Author: Mogball <jeffniu22@gmail.com>
Date:   Fri Dec 10 15:51:02 2021 +0000

    [mlir][ods] Fix OpDefinitionsGen infer return types builder with regions
    
    Despite handling regions and inferred return types, the builder was never generated for ops with both InferReturnTypeOpInterface and regions.
    
    Reviewed By: jpienaar
    
    Differential Revision: https://reviews.llvm.org/D115525

--
Date:   Fri Dec 10 21:27:20 2021 +0000

    [mlir][tensor] Fix insert_slice + tensor cast overflow
    
    InsertSliceOp may have subprefix semantics where missing trailing dimensions
    are automatically inferred directly from the operand shape.
    This revision fixes an overflow that occurs in such cases when the impl is based on the op rank.
    
    Differential Revision: https://reviews.llvm.org/D115549

commit 9a3df8fbc2283da50b66cda42f122f9f4ff065a0
--

commit e40624ae604fc292cb8a7102b0b91b571b26a32a
Author: Mogball <jeffniu22@gmail.com>
Date:   Fri Dec 10 15:04:46 2021 +0000

    [mlir][ods] Fix OpFormatGen sometimes not calling inferReturnTypes
    
    Reviewed By: jpienaar
    
    Differential Revision: https://reviews.llvm.org/D115522

--

commit 3b5e104b2293f21f1192f27dd83a1a2be93d63bf
Author: Paul Robinson <paul.robinson@sony.com>
Date:   Fri Dec 10 07:54:17 2021 -0800

    Verify inferattrs doesn't infer unexpected attributes
    
    Add --match-full-lines or `{{$}}` to ensure that no unexpected
    attributes appear at the ends of lines.  Account for the cases
    where attributes were in fact appearing.
    
--

    Set a default number of address bits on Darwin arm64 systems
    
    With arm64e ARMv8.3 pointer authentication, lldb needs to know how
    many bits are used for addressing and how many are used for pointer
    auth signing.  This should be determined dynamically from the inferior
    system / corefile, but there are some workflows where it still isn't
    recorded and we fall back on a default value that is correct on some
    Darwin environments.
    
    This patch also explicitly sets the vendor of mach-o binaries to
--
    evaluation accross 'development' and 'release' scenarios more reusable.
    This patch:
    - extends support to tensors of any shape (not just scalars, like we had
    in the inliner -Oz case). While the tensor shape can be anything, we
    assume row-major layout and expose the tensor as a buffer.
    - exposes the NoInferenceModelRunner, which we use in the 'development'
    mode to keep the evaluation code path consistent and simplify logging,
    as we'll want to reuse it in the regalloc case.
    
    Differential Revision: https://reviews.llvm.org/D115306

--
Author: Anna Thomas <anna@azul.com>
Date:   Wed Dec 8 16:53:09 2021 -0500

    Update sink instruction testcase
    
    Add inferable writeonly attribute. Simplify testcase.

commit f638c4d6e4a28fbd5508f853a8715cc92bb66d48
Author: Arthur O'Dwyer <arthur.j.odwyer@gmail.com>
Date:   Wed Oct 6 20:12:27 2021 -0400

--

commit 7b54de5feffedfc08e5a02d6c9e27c54e3b7f119
Author: Philip Reames <listmail@philipreames.com>
Date:   Fri Dec 3 08:52:40 2021 -0800

    [funcattrs] Fix a bug in recently introduced writeonly argument inference
    
    This fixes a bug in 740057d.  There's two ways to describe the issue:
    * One caller hasn't yet proven nocapture on the argument.  Given that, the inference routine is responsible for bailing out on a potential capture.
    * Even if we know the argument is nocapture, the access inference needs to traverse the exact set of users the capture tracking would (or exit conservatively).  Even if capture tracking can prove a store is non-capturing (e.g. to a local alloc which doesn't escape), we still need to track the copy of the pointer to see if it's later reloaded and accessed again.
    
    Note that all the test changes except the newly added ones appear to be false negatives.  That is, cases where we could prove writeonly, but the current code isn't strong enough.  That's why I didn't spot this originally.

commit 74cc0fa1db74d678436020a64a8ca0e9e99954d1
Author: Simon Pilgrim <llvm-dev@redking.me.uk>
--
Date:   Thu Dec 2 16:23:09 2021 +0000

    [TableGen][SelectionDAG] Use ComplexPattern type for non-leaf nodes
    
    When used as a non-leaf node, TableGen does not currently use the type
    of a ComplexPattern for type inference, which also means it does not
    check it doesn't conflict with the use. This differs from when used as a
    leaf value, where the type is used for inference. This addresses that
    discrepancy. The test case is not representative of most real-world uses
    but is sufficient to demonstrate inference is working.
    
    Some of these uses also make use of ValueTypeByHwMode rather than
    SimpleValueType and so the existing type inference is extended to
    support that alongside the new type inference.
    
    There are also currently various cases of using ComplexPatterns with an
    untyped type, but only for non-leaf nodes. For compatibility this is
    permitted, and uses the old behaviour of not inferring for non-leaf
    nodes, but the existing logic is still used for leaf values. This
    remaining discrepancy should eventually be eliminated, either by
    removing all such uses of untyped so the special case goes away (I
    imagine Any, or a more specific type in certain cases, would be
    perfectly sufficient), or by copying it to the leaf value case so
--
Date:   Thu Dec 2 15:21:28 2021 +0000

    [AArch64][NFC] Alter ComplexPattern types to be consistent with their uses
    
    When used as a non-leaf node, TableGen does not currently use the type
    of a ComplexPattern for type inference, which also means it does not
    check it doesn't conflict with the use. This differs from when used as a
    leaf value, where the type is used for inference. Fixing that
    discrepancy is something I intend to upstream as a subsequent review.
    
    AArch64 currently has several ComplexPatterns that are used in contexts
    where they're expected to be an iPTR. The cases that lead to type
    contradictions are separated out in D108759, but there are additional
--
Date:   Thu Dec 2 15:21:12 2021 +0000

    [AMDGPU][NFC] Alter ComplexPattern types to be consistent with their uses
    
    When used as a non-leaf node, TableGen does not currently use the type
    of a ComplexPattern for type inference, which also means it does not
    check it doesn't conflict with the use. This differs from when used as a
    leaf value, where the type is used for inference. Fixing that
    discrepancy is something I intend to upstream as a subsequent review.
    
    AMDGPU currently has several ComplexPatterns that are used in contexts
    where they're expected to be an iPTR, and where using an iPTR instead of
    a fixed-width integer type matters. With my locally-patched TableGen,
    none of these mismatches result in type contradictions, but do change
    the patterns and cause various failures to select. These changes to the
    ComplexPatterns' types reflect how they are actually used, result in
    bit-for-bit identical TableGen output (without my local TableGen patch),
    and ensure that with improved type inference AMDGPU's backend will
    continue to work.
    
    Reviewed By: arsenm
    
    Differential Revision: https://reviews.llvm.org/D109032
--
Date:   Thu Dec 2 15:21:01 2021 +0000

    [AArch64][NFC] Fix ComplexPattern types conflicting with uses
    
    When used as a non-leaf node, TableGen does not currently use the type
    of a ComplexPattern for type inference, which also means it does not
    check it doesn't conflict with the use. This differs from when used as a
    leaf value, where the type is used for inference. Fixing that
    discrepancy is something I intend to upstream as a subsequent review,
    but these are all the type conflicts found (all legitimate) by my
    locally-patched TableGen.
    
    Reviewed By: paulwalker-arm
--
    the process will have both a dyld, and a dyld_sim present.  The dyld_sim
    is an iOS Simulator binary.  The dyld is a macOS binary.  Both are
    MH_DYLINKER filetypes.  lldb needs to identify & set a breakpoint in
    dyld, so it has to distinguish between these two.
    
    Previously lldb was checking if the inferior target was x86 (indicating
    macOS) and the OS of the MH_DYLINKER binary was iOS/watchOS/etc -- if
    so, then this is dyld_sim and we should ignore it.  Now with arm64
    macOS systems, this check was invalid, and we would set our breakpoint
    for new binaries being loaded in dyld_sim, causing binary loading to
    be missed by lldb.
--
Author: Steven Wan <wanyu9511@gmail.com>
Date:   Thu Dec 2 18:29:43 2021 -0500

    [analyzer]Skip unstable CSA tests failing on several platforms
    
    Clang static analyzer uses bitwidth to infer the integer value type, that is, any 32-bit integer is considered of type `int`, and any 64-bit integer is considered of type `long`. This isn't always true, for instance, in ILP32 (e.g., 32-bit AIX), 32-bit could be `long`, and in LP64 (e.g., 64-bit wasm64), 64-bit could be `long long`.
    
    Reviewed By: steakhal
    
    Differential Revision: https://reviews.llvm.org/D114454

--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Thu Dec 2 16:31:56 2021 -0500

    AMDGPU: Sanitized functions require implicit arguments
    
    Do not infer no-amdgpu-implicitarg-ptr for sanitized functions. If a
    function is explicitly marked amdgpu-no-implicitarg-ptr and
    sanitize_address, infer that it is required.

commit e45705ad5051247e1cb2355094ef77316ae24c37
Author: Ulysse Beaugnon <ulysse@google.com>
Date:   Thu Dec 2 23:49:02 2021 +0100

--

commit 740057d185ea0e8b5a4f8b7c78fdf38ae7a66f76
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Dec 2 12:56:09 2021 -0800

    [funcattrs] Infer writeonly argument attribute
    
    This change extends the current logic for inferring readonly and readnone argument attributes to also infer writeonly.
    
    This change is deliberately minimal; there's a couple of areas for follow up.
    * I left out all call handling and thus any benefit from the SCC walk. When examining the test changes, I realized the existing code is imprecise, and am going to fix that in it's own revision before adding in the writeonly handling. (Mostly because updating the tests is hard when I, the human, can't figure out whether the result is correct.)
    * I left out handling for storing a value (as opposed to storing to a pointer). This should benefit readonly/readnone as well, and applies to a bunch of other instructions. Seemed worth having as a separate review.
    
--

commit 93a2c2919f7339bd9e942ef69ebbf0883a2ef727
Author: spupyrev <spupyrev@fb.com>
Date:   Thu Dec 2 11:59:33 2021 -0800

    profi - a flow-based profile inference algorithm: Part III (out of 3)
    
    This is a continuation of D109860 and D109903.
    
    An important challenge for profile inference is caused by the fact that the
    sample profile is collected on a fully optimized binary, while the block and
    edge frequencies are consumed on an early stage of the compilation that operates
    with a non-optimized IR. As a result, some of the basic blocks may not have
    associated sample counts, and it is up to the algorithm to deduce missing
    frequencies. The problem is illustrated in the figure where three basic
--

commit 98dd2f9ed3ddb0a114582d48d48f781d9c80a2da
Author: spupyrev <spupyrev@fb.com>
Date:   Thu Dec 2 10:19:32 2021 -0800

    profi - a flow-based profile inference algorithm: Part II (out of 3)
    
    This is a continuation of D109860.
    
    Traditional flow-based algorithms cannot guarantee that the resulting edge
    frequencies correspond to a *connected* flow in the control-flow graph. For
    example, for an instance in the attached figure, a flow-based (or any other)
    inference algorithm may produce an output in which the hot loop is disconnected
    from the entry block (refer to the rightmost graph in the figure). Furthermore,
    creating a connected minimum-cost maximum flow is a computationally NP-hard
    problem. Hence, we apply a post-processing adjustments to the computed flow
    by connecting all isolated flow components ("islands").
    
--

commit d9bb9bd4bf7a661cbb67f49e2c65f637367393eb
Author: Florian Hahn <flo@fhahn.com>
Date:   Thu Dec 2 10:11:54 2021 +0000

    [InferAttrs] Add memset_pattern{4,8} declarations to test.

commit c5bfffed4831fd8ef3aa1fa3d9d4268d546bf6c5
Author: Fangrui Song <i@maskray.me>
Date:   Thu Dec 2 05:02:19 2021 +0000

--

commit 3dfa76b695f8812e70b2b46bb12dfc2a76ab296a
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Dec 1 19:48:21 2021 -0800

    [tests] Precommit tests for writeonly argument attribute inference

commit 4479138de8e662f0dc64a92008b126f050e18b77
Author: Matthias Springer <springerm@google.com>
Date:   Thu Dec 2 11:57:26 2021 +0900

--

commit 7cc2493daaf549f2e8bf899a34e3326884104afe
Author: spupyrev <spupyrev@fb.com>
Date:   Wed Dec 1 15:29:35 2021 -0800

    profi - a flow-based profile inference algorithm: Part I (out of 3)
    
    The benefits of sampling-based PGO crucially depends on the quality of profile
    data. This diff implements a flow-based algorithm, called profi, that helps to
    overcome the inaccuracies in a profile after it is collected.
    
    Profi is an extended and significantly re-engineered classic MCMF (min-cost
    max-flow) approach suggested by Levin, Newman, and Haber [2008, Complementing
    missing and inaccurate profiling using a minimum cost circulation algorithm]. It
    models profile inference as an optimization problem on a control-flow graph with
    the objectives and constraints capturing the desired properties of profile data.
    Three important challenges that are being solved by profi:
    - "fixing" errors in profiles caused by sampling;
    - converting basic block counts to edge frequencies (branch probabilities);
    - dealing with "dangling" blocks having no samples in the profile.
    
    The main implementation (and required docs) are in SampleProfileInference.cpp.
    The worst-time complexity is quadratic in the number of blocks in a function,
    O(|V|^2). However a careful engineering and extensive evaluation shows that
    the running time is (slightly) super-linear. In particular, instances with
    1000 blocks are solved within 0.1 second.
    
--
    the compiler might be needed to re-tune existing optimization passes relying on
    profile counts.
    
    UPD Dec 1st 2021:
    - synced the declaration and definition of the option `SampleProfileUseProfi ` to use type `cl::opt<bool`;
    - added `inline` for `SampleProfileInference<BT>::findUnlikelyJumps` and `SampleProfileInference<BT>::isExit` to avoid linking problems on windows.
    
    Reviewed By: wenlei, hoy
    
    Differential Revision: https://reviews.llvm.org/D109860

--
    [mlir][MemRef] Fix SubViewOp canonicalization when a subset of unit-dims are dropped.
    
    The canonical type of the result of the `memref.subview` needs to make
    sure that the previously dropped unit-dimensions are the ones dropped
    for the canonicalized type as well. This means the generic
    `inferRankReducedResultType` cannot be used. Instead the current
    dropped dimensions need to be querried and the same need to be dropped.
    
    Reviewed By: nicolasvasilache, ThomasRaoux
    
    Differential Revision: https://reviews.llvm.org/D114751
--

commit 1392b654ff6573ca2dba4101f72e990822539c7d
Author: Mehdi Amini <joker.eph@gmail.com>
Date:   Tue Nov 23 20:10:36 2021 +0000

    Revert "profi - a flow-based profile inference algorithm: Part I (out of 3)"
    
    This reverts commit 884b6dd311422bbfac62b8a90fbfff8e77ba8121.
    The windows build is broken with a linker error.

commit b57e2f071a2e47147a57c52a6a8c6aa062230cd8
--

commit 884b6dd311422bbfac62b8a90fbfff8e77ba8121
Author: spupyrev <spupyrev@fb.com>
Date:   Tue Nov 23 08:47:23 2021 -0800

    profi - a flow-based profile inference algorithm: Part I (out of 3)
    
    The benefits of sampling-based PGO crucially depends on the quality of profile
    data. This diff implements a flow-based algorithm, called profi, that helps to
    overcome the inaccuracies in a profile after it is collected.
    
    Profi is an extended and significantly re-engineered classic MCMF (min-cost
    max-flow) approach suggested by Levin, Newman, and Haber [2008, Complementing
    missing and inaccurate profiling using a minimum cost circulation algorithm]. It
    models profile inference as an optimization problem on a control-flow graph with
    the objectives and constraints capturing the desired properties of profile data.
    Three important challenges that are being solved by profi:
    - "fixing" errors in profiles caused by sampling;
    - converting basic block counts to edge frequencies (branch probabilities);
    - dealing with "dangling" blocks having no samples in the profile.
    
    The main implementation (and required docs) are in SampleProfileInference.cpp.
    The worst-time complexity is quadratic in the number of blocks in a function,
    O(|V|^2). However a careful engineering and extensive evaluation shows that
    the running time is (slightly) super-linear. In particular, instances with
    1000 blocks are solved within 0.1 second.
    
--

commit 065f777d2740653fac79fe44cda121bce11013b8
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Nov 23 09:18:28 2021 -0800

    Revert "profi - a flow-based profile inference algorithm: Part I (out of 3)"
    
    This reverts commit b00fc198224efa038a7469e068dd920b3f1aba75.  This change fails to build (link) on ubuntu x86,

commit 18086186ab5ac7698db0fbc45c58cff2a7747da6
Author: Philip Reames <listmail@philipreames.com>
--

commit b00fc198224efa038a7469e068dd920b3f1aba75
Author: spupyrev <spupyrev@fb.com>
Date:   Tue Nov 23 08:47:23 2021 -0800

    profi - a flow-based profile inference algorithm: Part I (out of 3)
    
    The benefits of sampling-based PGO crucially depends on the quality of profile
    data. This diff implements a flow-based algorithm, called profi, that helps to
    overcome the inaccuracies in a profile after it is collected.
    
    Profi is an extended and significantly re-engineered classic MCMF (min-cost
    max-flow) approach suggested by Levin, Newman, and Haber [2008, Complementing
    missing and inaccurate profiling using a minimum cost circulation algorithm]. It
    models profile inference as an optimization problem on a control-flow graph with
    the objectives and constraints capturing the desired properties of profile data.
    Three important challenges that are being solved by profi:
    - "fixing" errors in profiles caused by sampling;
    - converting basic block counts to edge frequencies (branch probabilities);
    - dealing with "dangling" blocks having no samples in the profile.
    
    The main implementation (and required docs) are in SampleProfileInference.cpp.
    The worst-time complexity is quadratic in the number of blocks in a function,
    O(|V|^2). However a careful engineering and extensive evaluation shows that
    the running time is (slightly) super-linear. In particular, instances with
    1000 blocks are solved within 0.1 second.
    
--

commit 6f9cceb7751a6afdbf900d7dd7f84f9a5ce1c24d
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Sun Nov 21 14:41:11 2021 -0800

    [mlir] Move trait to InferTypeOpInterface
    
    Step towards removing the hard coded behavior for this trait and to instead use common interface.
    
    Differential Revision: https://reviews.llvm.org/D114208

--
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Nov 18 10:05:04 2021 -0800

    [SCEV] Move mustprogress based no-self-wrap logic so it applies to all exit conditions
    
    This change moves logic which we'd added specifically for less than tests so that it applies to equalities and greater than tests as well. The basic idea is that if we can show an IV cycles infinitely through the same series on self-wrap, and that the exit condition must be taken to prevent UB, we can conclude that it must be taken before self-wrap and thus infer said flag.
    
    The motivation here is simple loops with unsigned induction variables w/non-one steps and inequality tests. A toy example would be:
    for (unsigned i = 0; i != N; i += 2) { body; }
    
    If body contains no side effects, and this is a mustprogress function, we can assume that this must be a finite loop and thus that the exit count is N/2.
--

commit 044e7e013ef066590282549f31ab51a64359706b
Author: Rob Suderman <rob.suderman@gmail.com>
Date:   Wed Nov 17 14:48:09 2021 -0800

    [mlir][tosa] Fixed shape inference for tosa.transpose_conv2d
    
    Transpose conv2d shape inference was incorrect, tests did not properly validate
    that the shape inference was executing. Corrected shape inference, and extended
    tests to actually execute.
    
    Reviewed By: NatashaKnk
    
    Differential Revision: https://reviews.llvm.org/D114026
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Nov 16 11:53:14 2021 -0800

    [SCEV] Canonicalize X - urem X, Y patterns
    
    There are multiple possible ways to represent the X - urem X, Y pattern. SCEV was not canonicalizing, and thus, depending on which you analyzed, you could get different results. The sub representation appears to produce strictly inferior results in practice, so I decided to canonicalize to the Y * X/Y version.
    
    The motivation here is that runtime unroll produces the sub X - (and X, Y-1) pattern when Y is a power of two. SCEV is thus unable to recognize that an unrolled loop exits because we don't figure out that the new unrolled step evenly divides the trip count of the unrolled loop. After instcombine runs, we convert the the andn form which SCEV recognizes, so essentially, this is just fixing a nasty pass ordering dependency.
    
    The ARM loop hardware interaction in the test diff is opague to me, but the comments in the review from others knowledge of the infrastructure appear to indicate these are improvements in loop recognition, not regressions.
    
--
    non-`const`-qualified operator*().
    
    The removed operator*() was from 175d70ee5c2f03f6 to get
    iterator_facade_base::operator->() working, and this fixes the root
    cause instead: setting `T` to `const ValueType` causes
    iterator_facade_base to infer `PointerT` as `const ValueType*`.
    
    Ironically, this is the last blocker for removing the const-incorrect
    overload of `iterator_facade_base::operator->()`, whose presence
    triggered adding the workaround in the first place :).
    
--
    [runtime-unroll] Use incrementing IVs instead of decrementing ones
    
    This is one of those wonderful "in theory X doesn't matter, but in practice is does" changes. In this particular case, we shift the IVs inserted by the runtime unroller to clamp iteration count of the loops* from decrementing to incrementing.
    
    Why does this matter?  A couple of reasons:
    * SCEV doesn't have a native subtract node.  Instead, all subtracts (A - B) are represented as A + -1 * B and drops any flags invalidated by such.  As a result, SCEV is slightly less good at reasoning about edge cases involving decrementing addrecs than incrementing ones.  (You can see this in the inferred flags in some of the test cases.)
    * Other parts of the optimizer produce incrementing IVs, and they're common in idiomatic source language.  We do have support for reversing IVs, but in general if we produce one of each, the pair will persist surprisingly far through the optimizer before being coalesced.  (You can see this looking at nearby phis in the test cases.)
    
    Note that if the hardware prefers decrementing (i.e. zero tested) loops, LSR should convert back immediately before codegen.
    
    * Mostly irrelevant detail: The main loop of the prolog case is handled independently and will simple use the original IV with a changed start value.  We could in theory use this scheme for all iteration clamping, but that's a larger and more invasive change.
--

commit bf225939bc3acf936c962f24423d3bb5ddd4c93f
Author: Michael Liao <michael.hliao@gmail.com>
Date:   Thu Oct 14 23:41:16 2021 -0400

    [InferAddressSpaces] Support assumed addrspaces from addrspace predicates.
    
    - CUDA cannot associate memory space with pointer types. Even though Clang could add extra attributes to specify the address space explicitly on a pointer type, it breaks the portability between Clang and NVCC.
    - This change proposes to assume the address space from a pointer from the assumption built upon target-specific address space predicates, such as `__isGlobal` from CUDA. E.g.,
    
    ```
--

commit c92de29f8d39729678dfe2c915035e453dd83142
Author: Geoffrey Martin-Noble <gcmn@google.com>
Date:   Mon Nov 1 16:41:44 2021 -0700

    [NFC] Add size inference to to_vector
    
    A default calculated size for SmallVector was added in
    https://reviews.llvm.org/D92522 after discussion in
    https://groups.google.com/g/llvm-dev/c/Z-VwNCTRGSg, but to_vector still
    requires an explicit size. This patch adds the default size to to_vector
--

commit 3d39612b3dd3f6b67ee63da305d30606abbe7287
Author: Tim Northover <t.p.northover@gmail.com>
Date:   Fri Oct 22 09:13:02 2021 +0100

    Coroutines: don't infer function attrs before lowering
    
    Coroutines have weird semantics that don't quite match normal LLVM functions,
    so trying to infer even simple attributes based on thier contents can go wrong.

commit 5f32a851fb14c839555f55ac165cf5c17742e1ea
Author: Markus Böck <markus.boeck02@gmail.com>
Date:   Thu Nov 4 10:59:35 2021 +0100

--
Date:   Mon Nov 1 10:40:56 2021 +0000

    [mlir][Linalg] Refactor vectorization of conv1d more aggressively.
    
    This better decouples transfer read/write from vector-only rewrite of conv.
    This form is close to ready to plop into a new vector.conv op and the vector.transfer operations to be generalized as part of generic vectorization once the properties ConvolutionOpInterface are inferred from the indexing maps.
    
    This also results in a nice perf boost in the dw == 1 cases.
    
    Differential revision: https://reviews.llvm.org/D112822

--

commit 57e093162e27334730d8ed8f7b25b1b6f65ec8c8
Author: Liren Peng <pengliren@linux.alibaba.com>
Date:   Wed Nov 3 10:40:18 2021 +0800

    [ScalarEvolution] Infer loop max trip count from array accesses
    
    Data references in a loop should not access elements over the
    statically allocated size. So we can infer a loop max trip count
    from this undefined behavior.
    
    Reviewed By: reames, mkazantsev, nikic
    
    Differential Revision: https://reviews.llvm.org/D109821
--
Author: Ahmed Taei <ataei@google.com>
Date:   Thu Oct 28 17:37:35 2021 -0700

    Don't drop in_bounds when vector-transfer-collapse-inner-most-dims
    
    When operand is a subview we don't infer in_bounds and some default cases (e.g case in the tests) will crash with `operand is NULL` when converting to LLVM
    
    Reviewed By: ThomasRaoux
    
    Differential Revision: https://reviews.llvm.org/D112772

--

commit ae27c57b1822639999a04442c372b79a30ae4a85
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Tue Oct 26 23:41:02 2021 -0700

    [InferAddressSpaces] Make pass work with opaque pointers
    
    Avoid getPointerElementType().

commit abdefea6a21a26748d4237b70b3f78f29143291b
Author: Dmitry Vyukov <dvyukov@google.com>
--
Date:   Mon Oct 11 15:48:06 2021 +0530

    [MLIR] Fix AffineExpr getLargestKnownDivisor for ceildiv and floordiv
    
    Fix AffineExpr `getLargestKnownDivisor` for ceil/floor div cases.
    In these cases, nothing can be inferred on the divisor of the
    result.
    
    Add test case for `mod` as well.
    
    Differential Revision: https://reviews.llvm.org/D112523
--
    in SCEVExpander if poison-generating flags have been lost. This
    ensures that all values that are in ValueExprMap are also in
    ExprValueMap, so we can use the latter to invalidate the former.
    
    This change is probably not entirely NFC for the case where
    originally the SCEV had no nowrap flags but they were inferred
    later, in which case that would now allow reusing the existing
    value for expansion.
    
    Differential Revision: https://reviews.llvm.org/D112389

--

commit 2995d29bb42729043e707161bd7a7e4e428afbcf
Author: Alex Zinenko <zinenko@google.com>
Date:   Thu Oct 14 17:19:06 2021 +0200

    [mlir][python] Infer result types in generated constructors whenever possible
    
    In several cases, operation result types can be unambiguously inferred from
    operands and attributes at operation construction time. Stop requiring the user
    to provide these types as arguments in the ODS-generated constructors in Python
    bindings. In particular, handle the SameOperandAndResultTypes and
    FirstAttrDerivedResultType traits as well as InferTypeOpInterface using the
    recently added interface support. This is a significant usability improvement
    for IR construction, similar to what C++ ODS provides.
    
    Depends On D111656
    
--
    
    Introduce the initial support for operation interfaces in C API and Python
    bindings. Interfaces are a key component of MLIR's extensibility and should be
    available in bindings to make use of full potential of MLIR.
    
    This initial implementation exposes InferTypeOpInterface all the way to the
    Python bindings since it can be later used to simplify the operation
    construction methods by inferring their return types instead of requiring the
    user to do so. The general infrastructure for binding interfaces is defined and
    InferTypeOpInterface can be used as an example for binding other interfaces.
    
    Reviewed By: gysit
    
    Differential Revision: https://reviews.llvm.org/D111656

--

    [NFC][SCEV] Do not track users of SCEVConstants
    
    Follow-up from D112295, suggested by Nikita: we can avoid tracking
    users of SCEVConstants because dropping their cached info is unlikely
    to give any new prospects for fact inference, and it should not introduce
    any correctness problems.

commit fea4a48c0baabb4732e6a7fd826755f011e19e0a
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Mon Oct 25 11:36:25 2021 +0700
--
    
     #5 0x00007f28ec629859 abort (/lib/x86_64-linux-gnu/libc.so.6+0x25859)
     #6 0x00007f28ec629729 (/lib/x86_64-linux-gnu/libc.so.6+0x25729)
     #7 0x00007f28ec63af36 (/lib/x86_64-linux-gnu/libc.so.6+0x36f36)
     #8 0x00007f28ecc2cc46 llvm::APInt::compareSigned(llvm::APInt const&) const (libLLVMSupport.so.14git+0xeac46)
     #9 0x00007f28e7bbf957 (anonymous namespace)::SymbolicRangeInferrer::VisitBinaryOperator(clang::ento::RangeSet, clang::BinaryOperatorKind, clang::ento::RangeSet, clang::QualType) (libclangStaticAnalyzerCore.so.14git+0x1df957)
     #10 0x00007f28e7bbf2db (anonymous namespace)::SymbolicRangeInferrer::infer(clang::ento::SymExpr const*) (libclangStaticAnalyzerCore.so.14git+0x1df2db)
     #11 0x00007f28e7bb2b5e (anonymous namespace)::RangeConstraintManager::assumeSymNE(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::SymExpr const*, llvm::APSInt const&, llvm::APSInt const&) (libclangStaticAnalyzerCore.so.14git+0x1d2b5e)
     #12 0x00007f28e7bc67af clang::ento::RangedConstraintManager::assumeSymUnsupported(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::SymExpr const*, bool) (libclangStaticAnalyzerCore.so.14git+0x1e67af)
     #13 0x00007f28e7be3578 clang::ento::SimpleConstraintManager::assumeAux(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::NonLoc, bool) (libclangStaticAnalyzerCore.so.14git+0x203578)
     #14 0x00007f28e7be33d8 clang::ento::SimpleConstraintManager::assume(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::NonLoc, bool) (libclangStaticAnalyzerCore.so.14git+0x2033d8)
     #15 0x00007f28e7be32fb clang::ento::SimpleConstraintManager::assume(llvm::IntrusiveRefCntPtr<clang::ento::ProgramState const>, clang::ento::DefinedSVal, bool) (libclangStaticAnalyzerCore.so.14git+0x2032fb)
--
    
    Summary:
    `a % b != 0` implies that `a != 0` for any `a` and `b`. This patch
    extends the ConstraintAssignor to do just that. In fact, we could do
    something similar with division and in case of multiplications we could
    have some other inferences, but I'd like to keep these for future
    patches.
    
    Fixes https://bugs.llvm.org/show_bug.cgi?id=51940
    
    Reviewers: noq, vsavchenko, steakhal, szelethus, asdenyspetrov
--
    
    This revision uses the newly refactored StructuredGenerator to create a simple vectorization for conv1d_nwc_wcf.
    
    Note that the pattern is not specific to the op and is technically not even specific to the ConvolutionOpInterface (modulo minor details related to dilations and strides).
    
    The overall design follows the same ideas as the lowering of vector::ContractionOp -> vector::OuterProduct: it seeks to be minimally complex, composable and extensible while avoiding inference analysis. Instead, we metaprogram the maps/indexings we expect and we match against them.
    
    This is just a first stab and still needs to be evaluated for performance.
    Other tradeoffs are possible that should be explored.
    
    Reviewed By: ftynse
--

commit 8bac18be0e45adc7b096375bf4f65635fb994df0
Author: Pavel Labath <pavel@labath.sk>
Date:   Mon Oct 18 14:45:57 2021 +0200

    [lldb] Reduce code duplication around inferior building
    
    We had two sets of build<flavour> methods, whose bodies were largely
    identical. This makes any kind of modification in their vicinity
    repetitive and error-prone.
    
--
Author: Alex Zinenko <zinenko@google.com>
Date:   Wed Oct 13 15:20:31 2021 +0200

    [mlir][python] Add custom constructor for memref load
    
    The type can be inferred trivially, but it is currently done as string
    stitching between ODS and C++ and is not easily exposed to Python.
    
    Reviewed By: nicolasvasilache
    
    Differential Revision: https://reviews.llvm.org/D111712
--

commit c3dcf39554dbea780d6cb7e12239451ba47a2668
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Mon Oct 11 14:56:28 2021 -0700

    [mlir] Restrict to requiring traits when using InferTensorType trait.
    
    Avoids running into segfaults accidentally.
    
    Differential Revision: https://reviews.llvm.org/D110297

--

commit 1760d8b36b4804758a9a4801edc1d97c0ba4f25c
Author: Daniel Resnick <danielzresnick@gmail.com>
Date:   Wed Oct 6 18:50:38 2021 -0600

    [mlir][ODS] Support result type inference in custom assembly format
    
    Operations that have the InferTypeOpInterface trait can now omit the return
    types in their custom assembly formats.
    
    Differential Revision: https://reviews.llvm.org/D111326

commit 25fabc434ad5d1d7edd994b1fafb87e70ee2cda1
--
    runs it as if there were no semantic errors. This class is for developer
    actions only (i.e.  front-end driver options).
    
    The new behaviour does not affect the return code from `flang-new -fc1`
    when the input file is semantically incorrect. The return code is
    inferred from the number of driver diagnostics generated in
    `CompilerInstance::ExecuteAction` and this patch does not change that.
    More specifically, the semantic errors are still reported and hence the
    driver is able to correctly report that the compilation has failed (with
    a non-zero return code).
    
--

commit 483db1c706864d0940206228dfe64bdcd17faa4e
Author: Muhammad Omair Javaid <omair.javaid@linaro.org>
Date:   Mon Oct 11 14:34:41 2021 +0500

    [LLDB] Remove xfail decorator TestInferiorAssert.py AArch64/Linux
    
    TestInferiorAssert.py test_inferior_asserting_disassemble passes after
    upgrading LLDB AArch64/Linux buildbot to Ubuntu Focal.

commit d11ec6f67e45c630ab87bfb6010dcc93e89542fc
Author: Qiu Chaofan <qiucofan@cn.ibm.com>
Date:   Mon Oct 11 17:38:04 2021 +0800
--
Date:   Fri Oct 8 05:20:45 2021 -0400

    Fix a variety of bugs with nil-receiver checks when targeting
    non-Darwin ObjC runtimes:
    
    - Use the same logic the Darwin runtime does for inferring that a
      receiver is non-null and therefore doesn't require null checks.
      Previously we weren't skipping these for non-super dispatch.
    
    - Emit a null check when there's a consumed parameter so that we can
      destroy the argument if the call doesn't happen.  This mostly
--
    /usr/bin/gdb: warning: Couldn't determine a path for the index cache
    directory.
    No symbol table is loaded.  Use the "file" command.
    warning: Error disabling address space randomization: Operation not
    permitted
    warning: Could not trace the inferior process.
    warning: ptrace: Operation not permitted
    
    error: command failed with exit status: 255
    ```
    
--

commit 1183d65b4d85de7065070176e6ac5caff13978b6
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Oct 6 15:07:10 2021 -0700

    [SCEV] Search operand tree for scope bound when inferring flags from IR
    
    When checking to see if we can apply IR flags to a SCEV, we need to identify a bound on the defining scope of the SCEV to be produced.  We'd previously added support for a couple SCEVExpr types which trivially imply bounds, but hadn't handled types such as umax where the bounds come from the bounds of the operands.  This does the obvious thing, and recurses through operands searching for a tighter bound on the defining scope.
    
    I'm honestly surprised by how little this seems to mater on existing tests, but it's worth doing for completeness sake alone.
    
--

commit 0658bab870c89d81678f1f37aac0396ddd0913b3
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Oct 6 10:35:01 2021 -0700

    [SCEV] Infer flags from add/gep in any block
    
    This patch removes a compile time restriction from isSCEVExprNeverPoison. We've strengthened our ability to reason about flags on scopes other than addrecs, and this bailout prevents us from using it. The comment is also suspect as well in that we're in the middle of constructing a SCEV for I. As such, we're going to visit all operands *anyways*.
    
    Differential Revision: https://reviews.llvm.org/D111186

--
    
    This is in line with the examined lattice representations in LLVM:
    * lattice for `BitTracker::BitValue` in `Hexagon/BitTracker.h`
    * lattice for constant propagation in `HexagonConstPropagation.cpp`
    * lattice in `VarLocBasedImpl.cpp`
    * lattice for address space inference code in `InferAddressSpaces.cpp`
    
    Reviewed By: silvas, jpienaar
    
    Differential Revision: https://reviews.llvm.org/D110766

--

commit 94c1c56cc54b809d70d0b13a7334654402d775f1
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Oct 5 13:16:10 2021 -0700

    [tests] Cover cases we could infer SCEV flags, but don't

commit 84afd0252504bcce91da9337ad2a852f4df32290
Author: Vitaly Buka <vitalybuka@google.com>
Date:   Tue Oct 5 13:08:16 2021 -0700

--
Author: Christopher Tetreault <ctetreau@quicinc.com>
Date:   Thu Sep 30 16:39:48 2021 -0700

    [NFC] Fix build failure in ScopDetection
    
    In some build environments, the C++ compiler is unable to infer the
    correct type for the DenseMap::insert in isErrorBlock. Typing out
    std::make_pair helps.

commit df1f03280c4f4b28e6a8f8b7d8a89e62112162ab
Author: Christopher Tetreault <ctetreau@quicinc.com>
--

commit 5f7a5353301b776ffb0e5fb048992898507bf7ee
Author: Philip Reames <listmail@philipreames.com>
Date:   Sun Oct 3 16:14:06 2021 -0700

    [SCEV] Cap the number of instructions scanned when infering flags
    
    This addresses a comment from review on D109845.  The concern was raised that an unbounded scan would be expensive.  Long term plan is to cache this search - likely reusing the existing mechanism for loop side effects - but let's be simple and conservative for now.

commit 35ab211c37534fda0288acda510ee5bc6b85f96a
Author: Philip Reames <listmail@philipreames.com>
Date:   Sun Oct 3 16:01:30 2021 -0700

    [SCEV] Use trivial bound on defining scope of all SCEVs when computing flags
    
    This addresses a comment from review on D109845.  Even for SCEVs which we can't find true bounds without recursing through operands, entry to the function forms a trivial upper bound.  In some cases, this trivial bound is enough to prove safety of flag inference.

commit d02db32644b7360bcda54cdf739fa42abe450fcd
Author: Philip Reames <listmail@philipreames.com>
Date:   Sun Oct 3 15:32:15 2021 -0700

    [SCEV] Use full logic when infering flags on add and gep
    
    This is a followon to D109845. With that landed, we will have fixed all known instances of pr51817, and can thus start inferring flags more aggressively with greatly reduced risk of miscompiles. This patch simply applies the same inference logic used in that patch to our other major flag inference path.
    
    We can still do much better here (on both paths), but this is our first step.
    
    Differential Revision: https://reviews.llvm.org/D111003

--

    [SCEV] Correctly propagate nowrap flags across scopes when folding invariant add through addrec
    
    This fixes a violation of the wrap flag rules introduced in c4048d8f. This is an alternate fix to D106852.
    
    The basic problem being fixed is that we infer a set of flags which is valid at some inner scope S1 (usually by correctly propagating them from IR), and then (incorrectly) extend them to a SCEV in scope S2 where S1 != S2. This is not in general safe per the wrap flags semantics recently defined.
    
    In this patch, I include a simple inference step to handle the case where we can prove that S2 is the preheader of the loop S1, and that entry into S2 implies execution of S1. See the code for a more detailed explanation.
    
    One worry I have with this patch is that I might be over-fitting what shows up in tests - and thus hiding negative impact we'd see in the real world. My best defense is that the rule used here very closely follows the one used to propagate the flags from IR to the inner add to start with, and thus if one is reasonable, so probably is the other. Curious what others think about that piece.
    
    The test diffs are roughly as expected. Mostly analysis only, with two transform changes. Oddly, the result looks better in the loop-idiom test, and I don't understand the PPC output enough to have tell. Nothing terrible looking though. (For context, without the scope inference peephole, the test delta includes a couple of vectorization tests. Again, not super concerning, but slightly more so.)
    
    Differential Revision: https://reviews.llvm.org/D109845

commit c661d85d9170dc0a112f95296723e0b8b41cf0c9
Author: Greg Lueck <gregory.m.lueck@intel.com>
--
    
    This fixes a violation of the wrap flag rules introduced in c4048d8f. This was also noted in the (very old) PR23527.
    
    The issue being fixed is that we assume the inbound flag on any GEP assumes that all users of *any* gep (or add) which happens to map to that SCEV would also be UB if the (other) gep overflowed. That's simply not true.
    
    In terms of the test diffs, I don't see anything seriously problematic. The lost flags are expected (given the semantic restriction on when its legal to tag the SCEV), and there are several cases where the previously inferred flags are unsound per the new semantics.
    
    The only common trend I noticed when looking at the deltas is that by not considering branch on poison as immediate UB in ValueTracking, we do miss a few cases we could reclaim. We may be able to claw some of these back with the follow ideas mentioned in PR51817.
    
    It's worth noting that most of the changes are analysis result only changes. The two transform changes are pretty minimal. In one case, we miss the opportunity to infer a nuw (correctly). In the other, we fail to fold an exit and produce a loop invariant form instead. This one is probably over-reduced as the program appears to be undefined in practice, and neither before or after exploits that.
    
    Differential Revision: https://reviews.llvm.org/D109789

commit 24cde2f6023a765b66923f4a4ac033a91878b856
Author: Philip Reames <listmail@philipreames.com>
--

    [BasicAA] Make test more robust (NFC)
    
    When taking into account the fact that GEP indices are truncated
    to 32-bits in this test, the "path dependence" goes away, so
    inferring MustAlias for all pointers would be correct. As this
    goes against the spirit of the test, change it to extend from
    i16 instead.

commit b7ff0489158cc842ab70a6744815180be37e29a2
Author: Nikita Popov <nikita.ppv@gmail.com>
--
Date:   Tue Sep 28 18:48:35 2021 -0700

    [mlir][tosa] Ranked check for transpose was wrong.
    
    Should have verified the perm length and input rank were the same before
    inferring shape. Caused a crash with invalid IR.
    
    Differential Revision: https://reviews.llvm.org/D110674

commit 1c0e8a98e4916038dc77a406d3b0c7f707e8233f
Author: Amara Emerson <amara@apple.com>
--
    pointers-to-members. The underlying reason for this is that we represent
    pointers-to-function-members as {i8 addrspace(200)*, i64} and generate the
    constant offsets using (gep i8 null, <index>). We use a constant GEP here
    since inttoptr should be avoided for CHERI capabilities. The pointer-to-member
    call uses ptrtoint to extract the index, and due to this missing fold we can't
    infer the actual value loaded from the vtable.
    This is the initial constant folding change for this pattern, I will add
    an InstCombine fold as a follow-up.
    
    We could fold all inbounds GEP to null (and therefore the ptrtoint to
    zero) since zero is the only valid offset for an inbounds GEP. If the
--

commit 0bd9162fd78da878f1cfd4b65c4f450c0c25fd47
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Mon Sep 27 15:00:56 2021 +0700

    [Test] Add test showing that SCEV cannot properly infer ranges of cycled phis

commit 92b475f0b079e125c588b121dc50116ea5d6d9f2
Author: Krasimir Georgiev <krasimir@google.com>
Date:   Mon Sep 27 09:35:58 2021 +0200

--
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Mon Sep 27 12:12:51 2021 +0700

    [Test] Add some simple tests where IndVars cannot remove a check in loop
    
    Previously I've added tests that require context for inference, but it
    seems tha SCEV can't prove same facts even when the context isn't required.

commit 91f46bb77e6d56955c3b96e9e844ae6a251c41e9
Author: Michael Kruse <llvm-project@meinersbur.de>
Date:   Sun Sep 26 20:10:26 2021 -0500
--
Author: Matthias Springer <springerm@google.com>
Date:   Fri Sep 24 16:39:37 2021 +0900

    [mlir][linalg] Fix result type in FoldSourceTensorCast
    
    * Do not discard static result type information that cannot be inferred from lower/upper padding.
    * Add optional argument to `PadTensorOp::inferResultType` for specifying known result dimensions.
    
    Differential Revision: https://reviews.llvm.org/D110380

commit 03142c5f67788bcc1573f76732d0fccd75c6b965
Author: Petr Hosek <phosek@google.com>
--

    AMDGPU: Refactor getWavesPerEU to separate flat workgroup size query
    
    Add an overload to pass the flat workgroup range in separately. This
    will allow the attributor to use the assumed value for
    amdgpu-flat-workgroup-sizes when inferring amdgpu-waves-per-eu.

commit ffa9fa9ed232f35c0b0dcd4ab48fc565cf8a2f42
Author: Chen Zheng <czhengsz@cn.ibm.com>
Date:   Wed Sep 22 01:54:12 2021 +0000

--
    This test relies on being able to unwind from an arbitrary place inside
    libc. While I am not sure this is the cause of the observed flakyness,
    it is known that we are not able to unwind correctly from some places in
    (linux) libc.
    
    This patch adds additional synchronization to ensure that the inferior
    is in the main function (instead of pthread guts) when lldb tries to
    unwind it. At the very least, it should make the test runs more
    predictable/repeatable.

commit 0d12c99191de5736a2a49e99121ed8059cb7afd3
--

    [SCEV] Generalize implication when signedness of FoundPred doesn't matter
    
    The implication logic for two values that are both negative or non-negative
    says that it doesn't matter whether their predicate is signed and unsigned,
    but only flips unsigned into signed for further inference. This patch adds
    support for flipping a signed predicate into unsigned as well.
    
    Differential Revision: https://reviews.llvm.org/D109959
    Reviewed By: nikic

--
    [lldb][crashlog] Avoid specifying arch for image when a UUID is present
    
    When adding an image to a target for crashlog purposes, avoid specifying
    the architecture of the image.
    
    This has the effect of making SBTarget::AddModule infer the ArchSpec for
    the image based on the SBTarget's architecture, which LLDB puts serious
    effort into calculating correctly (in TargetList::CreateTargetInternal).
    
    The status quo is that LLDB randomly guesses the ArchSpec for a module
    if its architecture is specified, via:
--

commit e4da0f9657b475f62b68a7e7e6cc06855e2f4985
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Thu Sep 16 15:08:24 2021 +0700

    [Test] Add test showing missing opportunity in range inference for SCEV

commit ceded4153245322c45d28068860fb3d8d0a4884d
Author: Jason Molenda <jason@molenda.com>
Date:   Thu Sep 16 01:36:56 2021 -0700

--
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Sep 14 14:08:47 2021 -0700

    [SCEV] Stop applying contextual flags in applyLoopGuards
    
    This fixes a violation of the wrap flag rules introduced in c4048d8f. As noted in the original review, the NUW is legal to infer from the structure of the replacee, but a) there's no test coverage, and b) this should be done generically for all multiplies.
    
    Differential Revision: https://reviews.llvm.org/D109782

commit 66902a32c83809d26662f76e4107d5dd777610c3
Author: Vedant Kumar <vsk@apple.com>
--
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Wed Aug 10 05:08:24 2022 -0700

    [mlir][shape] Update meet to handle all size & shape types
    
    Also tighten up return type inference & compatibility functions.
    
    Differential Revision: https://reviews.llvm.org/D130866

commit 8a4c40bfe8e6605ffc9d866f8620618dfdde2875
Author: Wei Yi Tee <wyt@google.com>
--

commit b73e8325fb25b27f898190d81a0d62e92c06694c
Author: not-jenni <jennik@google.com>
Date:   Mon Aug 8 15:19:51 2022 -0700

    [mlir][tosa] Updates tosa.equal to use the InferTensorType interface
    
    Reviewed By: jpienaar
    
    Differential Revision: https://reviews.llvm.org/D130373

--

commit b0532286fe486b5ee208bae53c7afba278cbd609
Author: Rob Suderman <rob.suderman@gmail.com>
Date:   Thu Aug 26 19:21:29 2021 -0700

    [mlir][tosa] Add shape inference for tosa.while
    
    Tosa.while shape inference requires repeatedly running shape inference across
    the body of the loop until the types become static as we do not know the number
    of iterations required by the loop body. Once the least specific arguments are
    known they are propagated to both regions.
    
    To determine the final end type, the least restrictive types are determined
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Sep 9 14:07:22 2021 -0700

    [SCEV] Allow negative steps for LT exit count computation for unsigned comparisons
    
    This bit of code is incredibly suspicious. It allows fully unknown (but potentially negative) steps, but not steps known to be negative. The comment about scev flag inference is worrying, but also not correct to my knowledge.
    
    At best, this might be covering up some related miscompile. However, there's no test in tree for it, the review history doesn't include obvious motivation, and the C++ example doesn't appear to give wrong results when hand translated to IR. I think it's time to remove this and see what falls out.
    
    During review, there were concerns raised about the correctness of the corresponding signed case.  This change was deliberately narrowed to the unsigned case which has been auditted and appears correct for negative values.  We need to get back to the known-negative signed case, but that'll be a future patch if nothing falls out from this one.
    
--
Date:   Wed Sep 8 04:53:13 2021 -0400

    [WebAssembly] Add explict TLS symbol flag
    
    As before we maintain backwards compat with older object files
    by also infering the TLS flag based on the name of the segment.
    
    This change is was split out from https://reviews.llvm.org/D108877.
    
    Differential Revision: https://reviews.llvm.org/D109426

--
      // preserve it with assume.
    ```
    
    If we remove the branch basing on knowledge about UB in a successor block,
    then the fact that x <= 10 is other.succ might be lost if this condition is
    not inferrable from any dominating condition. To preserve this knowledge, we
    can add assume intrinsic with (possibly inverted) branch condition.
    
    Patch by Dmitry Bakunevich!
    
    Differential Revision: https://reviews.llvm.org/D109054
--

commit aa4dfba522538019740268bd0c018e1674adb1c9
Author: Fangrui Song <i@maskray.me>
Date:   Tue Sep 7 20:46:37 2021 -0700

    [ELF] Infer EM_HEXAGON in getBitcodeMachineKind

commit 8eb617d719bdc6a4ed7773925d2421b9bbdd4b7a
Author: Wei Mi <wmi@google.com>
Date:   Tue Sep 7 19:33:36 2021 -0700

--

commit 6cdca906c79fb4e0eae940f11d585c1b08358104
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Sep 7 16:58:18 2021 -0700

    [SCEV] Use no-self-wrap flags infered from exit structure to compute trip count
    
    The basic problem being solved is that we largely give up when encountering a trip count involving an IV which is not an addrec. We will fall back to the brute force constant eval, but that doesn't have the information about the fact that we can't cycle back through the same set of values.
    
    There's a high level design question of whether this is the right place to handle this, and if not, where that place is. The major alternative here would be to return a conservative upper bound, and then rely on two invocations of indvars to add the facts to the narrow IV, and then reconstruct SCEV. (I have not implemented the alternative and am not 100% sure this would work out.) That's arguably more in line with existing code, but I find this substantially easier to reason about.  During review, no one expressed a strong opinion, so we went with this one.
    
--
Author: wlei <wlei@fb.com>
Date:   Tue Aug 31 13:27:42 2021 -0700

    [llvm-profgen] Support LBR only perf script
    
    This change aims at supporting LBR only sample perf script which is used for regular(Non-CS) profile generation.  A LBR perf script includes a batch of LBR sample which starts with a frame pointer and a group of 32 LBR entries is followed. The FROM/TO LBR pair and the range between two consecutive entries (the former entry's TO and the latter entry's FROM) will be used to infer function profile info.
    
    An example of LBR perf script(created by `perf script -F ip,brstack -i perf.data`)
    ```
               40062f 0x40062f/0x4005b0/P/-/-/9  0x400645/0x4005ff/P/-/-/1  0x400637/0x400645/P/-/-/1 ...
               4005d7 0x4005d7/0x4005e5/P/-/-/8  0x40062f/0x4005b0/P/-/-/6  0x400645/0x4005ff/P/-/-/1 ...
--

commit 0abdfd62743158005b803b05b4a19dfa92d8f147
Author: Philip Salzmann <philip.salzmann@uibk.ac.at>
Date:   Mon Aug 30 08:31:01 2021 +0200

    [SYCL][CUDA] Don't infer memcpy src/dst pitches from copied region (#3563)
    
    Previously, when passing 0 for row/slice pitches for source and/or
    destination to `commonEnqueueMemBufferCopyRect`, the function would
    infer the row/slice pitches from the copied region.
    
    This does not work when copying with an offset, as `cuMemcpy3DAsync`
    checks whether the pitches are at least as large as the offset + copied
    range, otherwise returning CUDA_ERROR_INVALID_VALUE.
    
--
    assertions to check that for 2D and 3D copies, non-zero pitches are
    provided.
    
    In some situations, a zero row/slice pitch is passed for source and/or
    destination to `commonEnqueueMemBufferCopyRect`. In this case, the
    pitches are inferred from the copied region. However, if source and/or
    destination have offsets in the x or y dimension, those must be taken
    into account as well (CUDA checks this, and will otherwise return
    `CUDA_ERROR_INVALID_VALUE`).

commit ab40dbfe03d50a2e4a12168beb0ad9ae660916cf
--

commit 98d7aa435f5036b03048bdad24065c635959ac6b
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Aug 13 20:43:32 2021 -0400

    AMDGPU: Stop inferring use of llvm.amdgcn.kernarg.segment.ptr
    
    We no longer use this intrinsic outside of the backend and no longer
    support using it outside of kernels.

commit f5cff292e297ad5094f35d6223a199e389adcd99
--
    
    Previously when emitting a C++ guarded initializer, we tried to work out what
    the enclosing function would be used for and added it to the COMDAT containing
    the variable if we thought that doing so would be correct. But this was done
    from a context in which we didn't -- and realistically couldn't -- correctly
    infer how the enclosing function would be used.
    
    Instead, add the initialization function to a COMDAT from the code that
    creates it, in the case where it makes sense to do so: when we know that
    the one and only reference to the initialization function is in
    @llvm.global.ctors and that reference is in the same COMDAT.
--

commit ec8d87e9f56203df851e2d20750224d4a04803be
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Aug 24 14:23:03 2021 -0700

    [SCEV] Infer nuw from nw for addrecs
    
    This was previously committed in 914836b, and reverted due to confusion on the status of the review.
    
    Differential Revision: https://reviews.llvm.org/D108601

--

commit 58582bae6392b4ceef1536c3b4c3326c2fa25049
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Aug 24 09:27:53 2021 -0700

    Revert "[SCEV] Infer nsw/nuw from nw for addrecs"
    
    This reverts commit 914836b1c8b36d4a317ef6c233746f6ec37b57a5.  Further comments on review came up after initial approval.  Reverting while addressing.

commit f387a361786081f8aadf079aa32e73ed05386242
Author: Andrei Elovikov <andrei.elovikov@intel.com>
--

commit 914836b1c8b36d4a317ef6c233746f6ec37b57a5
Author: Philip Reames <listmail@philipreames.com>
Date:   Mon Aug 23 17:52:09 2021 -0700

    [SCEV] Infer nsw/nuw from nw for addrecs
    
    If we no an addrec doesn't self-wrap, the increment is strictly positive, and the start value is the smallest representable value, then we know that the corresponding wrap type can not occur.
    
    Differential Revision: https://reviews.llvm.org/D108601

--
    
    Renames the blobSerializationRoundTrip test helper function to
    spsSerializationRoundTrip ('blob' was the placeholder name for the serialization
    scheme during prototyping, this function was missed when renaming everything
    for the mainline). Also drops explicit template arguments at call sites where
    they can be inferred (and are obvious) from the call argument type.

commit b088536ce9e0473d6ab63c24ad69ca7ea2339a46
Author: Wang, Pengfei <pengfei.wang@intel.com>
Date:   Sun Aug 22 08:24:20 2021 +0800

--

commit 41e5dbe0fa95933c60bd70eda65af0f2d0243e39
Author: Chia-hung Duan <chiahungduan@google.com>
Date:   Wed Aug 18 20:46:26 2021 +0000

    Enables inferring return types for Shape op if possible
    
    Reviewed By: jpienaar
    
    Differential Revision: https://reviews.llvm.org/D102565

--
Date:   Tue Aug 10 11:44:20 2021 -0700

    [mlir] Enable specifying querying function in ValueShapeRange
    
    This enables querying shapes/values as shapes without mutating the IR
    directly (e.g., towards enabling doing inference in analysis &
    application steps, inferring function shape with constant from callsite,
    ...). Add a new ShapeAdaptor that abstracts over whether shape is from
    Type or ShapedTypeComponents or DenseIntElementsAttribute. This adds new
    accessors to ValueShapeRange to get Shape and value as shape, but
    doesn't restrict or remove the previous way of accessing Type via the
    Value for now, that does mean a less refined shape could be accidentally
--
    only supports cases where constant subgraph evaluation's output is a
    shape. I had considered making it more general, but without TBD extern
    attribute concept or some such a user cannot today uniformly avoid
    overhead.
    
    Update TOSA ops and also the shape inference pass.
    
    Differential Revision: https://reviews.llvm.org/D107768

commit f3932b9a0b0b7787ccd3572bad134acc4146acaa
Author: Jan Kratochvil <jan.kratochvil@redhat.com>
--

commit 143edeca6dfe5d9c006cdadb5be1ec4afd483ca3
Author: Rob Suderman <rob.suderman@gmail.com>
Date:   Tue Aug 3 17:01:56 2021 -0700

    [mlir][tosa] Shape inference for a few remaining easy cases:
    
    Handles shape inference for identity, cast, and rescale. These were missed
    during the initialy elementwise work. This includes resize shape propagation
    which includes both attribute and input type based propagation.
    
    Reviewed By: jpienaar
    
--
Author: Rob Suderman <rob.suderman@gmail.com>
Date:   Thu Jul 22 17:22:11 2021 -0700

    [mlir][tosa] Make tosa MakeBroadcastable pass handle unreanked tensors.
    
    If this pass executes without shape inference its possible for unranked tensors
    to appear in the IR. This pass should gracefully handle unranked tensors.
    
    Differential Revision: https://reviews.llvm.org/D106617

commit 51d8e67e88d1b673c20a61ef4fac201bc15ae664
--

commit a5b889db7fd3be9e33e29aa4f1a2edfff9a69350
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Thu Jul 22 13:57:36 2021 -0700

    [mlir] Also update inferReturnTensorTypes (NFC)
    
    Missed this one in the first go.

commit 254c4d174ea3bd3601818b003fc169cdedf24fb9
Author: Med Ismail Bennani <ismail@bennani.ma>
--
    
    From what I can see this heuristic isn't sound and also unnecessary. The idea
    that inheritance implies that the `class` keyword was used and the default
    visibility is `private` is incorrect. Also both GCC and Clang use
    `DW_TAG_structure_type` and `DW_TAG_class_type` for `struct` and `class` types
    respectively, so the default visibility we infer from that information is always
    correct and there is no need to fix it up.
    
    And finally, the access specifiers we set in the Clang AST are anyway unused
    within LLDB. The expression parser explicitly ignores them to give users access
    to private members and there is not SBAPI functionality that exposes this
    information.
    
    This patch removes all the heuristic code for the reasons above and instead
    just relies on the access values we infer from the tag kind and explicit
    annotations in DWARF.
    
    This patch is NFCI.
    
    Reviewed By: werat
--

commit ec9767ef6479714a1cdba6fdd6b4375063a19082
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Tue Jul 20 18:15:15 2021 -0700

    [mlir] Use OpTraitList to define InferTensorType. NFC

commit 2607209b3fffc0a01e02df3623cf2a46b2be2bc0
Author: Stella Laurenzo <stellaraccident@gmail.com>
Date:   Tue Jul 20 15:53:15 2021 -0700

--

    [clang][darwin] add support for Mac Catalyst availability
    
    This commit adds support for Mac Catalyst availability attribute, as
    supported by the Apple clang compiler. A follow-up commit will provide
    additional support for inferring Mac Catalyst availability from macOS
    availability using the mapping in the SDKSettings.json.
    
    Differential Revision: https://reviews.llvm.org/D105052

commit 0c0549fbb3e910ea28a27d901a40410d048f26ac
--

commit 9afc065743de8bfb6eaa7ea87a32422ae32943c7
Author: MaheshRavishankar <ravishankarm@google.com>
Date:   Mon Jul 19 14:35:20 2021 -0700

    Split `InferShapedTypeOpInterface` to create `ReifyRankedShapedTypeInterface`.
    
    The `reifyReturnTypeShapesPerResultDim` method supports shape
    inference for rsults that are ranked types. These are used lower in
    the codegeneration stack than its counter part `reifyReturnTypeShapes`
    which also supports unranked types, and is more suited for use higher
    up the compilation stack. To have separation of concerns, this method
    is split into its own interface.
    See discussion : https://llvm.discourse.group/t/better-layering-for-infershapedtypeopinterface/3823
    
    Differential Revision: https://reviews.llvm.org/D106133

commit 693881ad046ef7f96fce32ea012f47999751ced4
Merge: fe7b527082b5 59e4e53ead25
--
    we succeeded and the target stopped, we want to clear out the
    thread plans and breakpoints in case we still need to resume to complete
    killing the process.  If the target was exited or detached, it's
    pointless but harmless to do this.  But if the state is eStateInvalid -
    for instance if we tried to interrupt the target to Halt it and that
    fails - we don't want to keep trying to interact with the inferior,
    so we shouldn't do this work.
    
    This change explicitly checks eStateStopped, and only does the pre-resume
    cleanup if we did manage to stop the process.

--

commit b988d69ea2864a1bdf9789f930ecf7f41d109653
Author: Artem Belevich <tra@google.com>
Date:   Thu Jul 15 13:39:47 2021 -0700

    [infer-address-spaces] Handle complex non-pointer constexpr arguments.
    
    Fixes https://bugs.llvm.org/show_bug.cgi?id=51099
    
    Differential Revision: https://reviews.llvm.org/D106098

--

commit 11dda1a234620639a856de61f8a2c0dc3a8bdd2a
Author: Rob Suderman <rob.suderman@gmail.com>
Date:   Mon Jul 19 10:31:02 2021 -0700

    [mlir][tosa] Added shape inference for tosa convolution operations
    
    Added shape inference handles cases for convolution operations. This includes
    conv2d, conv3d, depthwise_conv2d, and transpose_conv2d. With transpose conv
    we use the specified output shape when possible however will shape propagate
    if the output shape attribute has dynamic values.
    
    Reviewed By: jpienaar
--

commit 68fa6f7c7ccc88efc511bf1b26142cdd48c5dc5c
Author: Wenlei He <aktoon@gmail.com>
Date:   Sun Jul 18 12:13:30 2021 -0700

    [CSSPGO][NFC] Allow cl::ZeroOrMore for use-iterative-bfi-inference

commit 28a3ad3f862445a92c3cfeeba7ae37197c2f4072
Author: Eli Friedman <efriedma@quicinc.com>
Date:   Sun Jul 18 13:12:25 2021 -0700

--
    [MLIR][CAPI] On MINGW don't link against libMLIR
    
    Cross-compiling MLIR with MINGW failed because adding libMLIR to the libraries to link against would lead to duplicated symbols.
    
    ```
    [09:28:14] ninja: job failed: : && /opt/bin/i686-w64-mingw32-libgfortran4-cxx03/i686-w64-mingw32-g++ --sysroot=/opt/i686-w64-mingw32/i686-w64-mingw32/sys-root/  -remap -D__USING_SJLJ_EXCEPTIONS__ -D__CRT__NO_INLINE -fno-gnu-unique -Werror=date-time -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -Wno-long-long -Wimplicit-fallthrough -Wno-maybe-uninitialized -Wno-noexcept-type -Wdelete-non-virtual-dtor -Wno-comment  -O2 -DNDEBUG   -shared -o bin/libMLIRPublicAPI.dll -Wl,--out-implib,lib/libMLIRPublicAPI.dll.a -Wl,--major-image-version,0,--minor-image-version,0 tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/AffineExpr.cpp.obj tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/AffineMap.cpp.obj tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/BuiltinAttributes.cpp.obj tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/BuiltinTypes.cpp.obj tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/Diagnostics.cpp.obj tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/IntegerSet.cpp.obj tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/IR.cpp.obj tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/Pass.cpp.obj tools/mlir/lib/CAPI/IR/CMakeFiles/obj.MLIRCAPIIR.dir/Support.cpp.obj tools/mlir/lib/CAPI/Registration/CMakeFiles/obj.MLIRCAPIRegistration.dir/Registration.cpp.obj tools/mlir/lib/CAPI/Dialect/CMakeFiles/obj.MLIRCAPILinalg.dir/Linalg.cpp.obj tools/mlir/lib/CAPI/Dialect/CMakeFiles/obj.MLIRCAPISCF.dir/SCF.cpp.obj tools/mlir/lib/CAPI/Dialect/CMakeFiles/obj.MLIRCAPIShape.dir/Shape.cpp.obj tools/mlir/lib/CAPI/Dialect/CMakeFiles/obj.MLIRCAPIStandard.dir/Standard.cpp.obj tools/mlir/lib/CAPI/Dialect/CMakeFiles/obj.MLIRCAPITensor.dir/Tensor.cpp.obj tools/mlir/lib/CAPI/Transforms/CMakeFiles/obj.MLIRCAPITransforms.dir/Passes.cpp.obj  lib/libMLIR.dll.a  lib/libMLIRIR.a  lib/libMLIRParser.a  lib/libMLIRSupport.a  lib/libMLIRPass.a  lib/libMLIRCAPIIR.a  lib/libMLIRAffine.a  lib/libMLIRAffineEDSC.a  lib/libMLIRAffineTransforms.a  lib/libMLIRAffineUtils.a  lib/libMLIRArmNeon.a  lib/libMLIRArmSVE.a  lib/libMLIRAsync.a  lib/libMLIRAsyncTransforms.a  lib/libMLIRAVX512.a  lib/libMLIRComplex.a  lib/libMLIRGPU.a  lib/libMLIRLinalgAnalysis.a  lib/libMLIRLinalgEDSC.a  lib/libMLIRLinalg.a  lib/libMLIRLinalgTransforms.a  lib/libMLIRLinalgUtils.a  lib/libMLIRLLVMIRTransforms.a  lib/libMLIRLLVMIR.a  lib/libMLIRLLVMAVX512.a  lib/libMLIRLLVMArmNeon.a  lib/libMLIRLLVMArmSVE.a  lib/libMLIRNVVMIR.a  lib/libMLIRROCDLIR.a  lib/libMLIROpenACC.a  lib/libMLIROpenMP.a  lib/libMLIRPDL.a  lib/libMLIRPDLInterp.a  lib/libMLIRQuant.a  lib/libMLIRSCF.a  lib/libMLIRSCFTransforms.a  lib/libMLIRSDBM.a  lib/libMLIRShape.a  lib/libMLIRShapeOpsTransforms.a  lib/libMLIRSPIRV.a  lib/libMLIRSPIRVModuleCombiner.a  lib/libMLIRSPIRVConversion.a  lib/libMLIRSPIRVTransforms.a  lib/libMLIRSPIRVUtils.a  lib/libMLIRStandard.a  lib/libMLIRStandardOpsTransforms.a  lib/libMLIRTensor.a  lib/libMLIRTensorTransforms.a  lib/libMLIRTosa.a  lib/libMLIRTosaTransforms.a  lib/libMLIRVector.a  lib/libMLIRCAPIIR.a  lib/libMLIRLinalg.a  lib/libMLIRCAPIIR.a  lib/libMLIRSCF.a  lib/libMLIRCAPIIR.a  lib/libMLIRShape.a  lib/libMLIRCAPIIR.a  lib/libMLIRStandard.a  lib/libMLIRCAPIIR.a  lib/libMLIRTensor.a  lib/libMLIRTransforms.a  lib/libMLIRAsync.a  lib/libMLIRAffineUtils.a  lib/libMLIRLinalgAnalysis.a  lib/libMLIRLinalgEDSC.a  lib/libMLIRVectorToSCF.a  lib/libMLIRVectorToLLVM.a  lib/libMLIRArmNeonToLLVM.a  lib/libMLIRArmNeon.a  lib/libMLIRLLVMArmNeon.a  lib/libMLIRAVX512ToLLVM.a  lib/libMLIRAVX512.a  lib/libMLIRLLVMAVX512.a  lib/libMLIRArmSVEToLLVM.a  lib/libMLIRArmSVE.a  lib/libMLIRLLVMArmSVE.a  lib/libMLIRStandardToLLVM.a  lib/libMLIRTargetLLVMIRModuleTranslation.a  lib/libMLIRLLVMIRTransforms.a  lib/libMLIRLLVMIR.a  lib/libMLIROpenMP.a  lib/libMLIRTranslation.a  lib/libMLIRSPIRVConversion.a  lib/libMLIRSPIRV.a  lib/libMLIRParser.a  lib/libMLIRTransforms.a  lib/libMLIRVector.a  lib/libMLIRAffineEDSC.a  lib/libMLIRLinalg.a  lib/libMLIRCopyOpInterface.a  lib/libMLIRTosa.a  lib/libMLIRQuant.a  lib/libMLIRTransformUtils.a  lib/libMLIRLoopAnalysis.a  lib/libMLIRPresburger.a  lib/libMLIRRewrite.a  lib/libMLIRPDLToPDLInterp.a  lib/libMLIRPass.a  lib/libMLIRAnalysis.a  lib/libMLIRAffine.a  lib/libMLIRSCF.a  lib/libMLIRLoopLikeInterface.a  lib/libMLIRPDLInterp.a  lib/libMLIRPDL.a  lib/libMLIRInferTypeOpInterface.a  lib/libMLIRStandard.a  lib/libMLIRTensor.a  lib/libMLIREDSC.a  lib/libMLIRCastInterfaces.a  lib/libMLIRVectorInterfaces.a  lib/libMLIRSideEffectInterfaces.a  lib/libMLIRDialect.a  lib/libMLIRViewLikeInterface.a  lib/libMLIRCallInterfaces.a  lib/libMLIRControlFlowInterfaces.a  lib/libMLIRIR.a  lib/libMLIRSupport.a  lib/libLLVM.dll.a  -lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32 && :
    [09:28:14] lib/libMLIRAffine.a(AffineOps.cpp.obj):AffineOps.cpp:(.text+0x1d600): multiple definition of `mlir::AffineDialect::initialize()'
    [09:28:14] lib/libMLIR.dll.a(d008729.o):(.text+0x0): first defined here
    [09:28:14] lib/libMLIRArmSVE.a(ArmSVEDialect.cpp.obj):ArmSVEDialect.cpp:(.text+0x5be0): multiple definition of `mlir::arm_sve::ArmSVEDialect::initialize()'
    [09:28:14] lib/libMLIR.dll.a(d039020.o):(.text+0x0): first defined here
    [09:28:14] lib/libMLIRAsync.a(Async.cpp.obj):Async.cpp:(.text+0xc0d0): multiple definition of `mlir::async::AsyncDialect::initialize()'
--
    
    Here's the e75a2dfe context repeated:
    
    There's a potential change in dereferenceability attribute semantics in the nearish future.  See llvm-dev thread "RFC: Decomposing deref(N) into deref(N) + nofree" and D99100 for context.
    
    This change simply adds appropriate attributes to tests to keep transform logic exercised under both old and new/proposed semantics.  Note that for many of these cases, O3 would infer exactly these attributes on the test IR.
    
    This change handles the idiomatic pattern of a dereferenceable object being passed to a call which can not free that memory.  There's a couple other tests which need more one-off attention, they'll be handled in another change.

commit ac500fd18f0615c45d9d127bfb576ffa1e11425a
Author: Kirill Stoimenov <kstoimenov@google.com>
--

commit 7b47de774fd43eb5be7aee86c6f8c15999295b36
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Wed Jul 14 20:06:16 2021 +0000

    [mlir] NFC - Add AffineMap::replace variant with dim/symbol inference

commit b86ddfdb9a80f2343510e07209ceda59d72972e3
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Jul 14 13:19:48 2021 -0700

--

    [tests] Stablize tests for possible change in deref semantics
    
    There's a potential change in dereferenceability attribute semantics in the nearish future.  See llvm-dev thread "RFC: Decomposing deref(N) into deref(N) + nofree" and D99100 for context.
    
    This change simply adds appropriate attributes to tests to keep transform logic exercised under both old and new/proposed semantics.  Note that for many of these cases, O3 would infer exactly these attributes on the test IR.
    
    This change handles the idiomatic pattern of a dereferenceable object being passed to a call which can not free that memory.  There's a couple other tests which need more one-off attention, they'll be handled in another change.

commit 76b7d3432e38bb7690c3bbd4940786b5cb751b95
Author: Stanislav Mekhanoshin <Stanislav.Mekhanoshin@amd.com>
--

commit 087310c71e5c1c70818ac62acd781860d59a6ce7
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Jul 13 11:51:02 2021 -0700

    [SCEV] Strengthen inference of RHS > Start in howManyLessThans
    
    Split off from D105216 to simplify review.  Rewritten with a lambda to be easier to follow.  Comments clarified.
    
    Sorry for no test case, this is tricky to exercise with the current structure of the code.  It's about to be hit more frequently in a follow up patch, and the change itself is simple.

--
Date:   Fri Jul 9 12:36:13 2021 +0300

    [analyzer][solver][NFC] Refactor how we detect (dis)equalities
    
    This patch simplifies the way we deal with (dis)equalities.
    Due to the symmetry between constraint handler and range inferrer,
    we can have very similar implementations of logic handling
    questions about (dis)equality and assumptions involving (dis)equality.
    
    It also helps us to remove one more visitor, and removes uncertainty
    that we got all the right places to put `trackNE` and `trackEQ`.
--
Author: Valeriy Savchenko <vsavchenko@apple.com>
Date:   Thu Jul 8 20:09:04 2021 +0300

    [analyzer][solver][NFC] Introduce ConstraintAssignor
    
    The new component is a symmetric response to SymbolicRangeInferrer.
    While the latter is the unified component, which answers all the
    questions what does the solver knows about a particular symbolic
    expression, assignor associates new constraints (aka "assumes")
    with symbolic expressions and can imply additional knowledge that
    the solver can extract and use later on.
    
    - Why do we need it and why is SymbolicRangeInferrer not enough?
    
    As it is noted before, the inferrer only helps us to get the most
    precise range information based on the existing knowledge and on the
    mathematical foundations of different operations that symbolic
    expressions actually represent.  It doesn't introduce new constraints.
    
    The assignor, on the other hand, can impose constraints on other
    symbols using the same domain knowledge.
    
    - But for some expressions, SymbolicRangeInferrer looks into constraints
      for similar expressions, why can't we do that for all the cases?
    
    That's correct!  But in order to do something like this, we should
    have a finite number of possible "similar expressions".
    
    Let's say we are asked about `$a - $b` and we know something about
    `$b - $a`.  The inferrer can invert this expression and check
    constraints for `$b - $a`.  This is simple!
    But let's say we are asked about `$a` and we know that `$a * $b != 0`.
    In this situation, we can imply that `$a != 0`, but the inferrer shouldn't
    try every possible symbolic expression `X` to check if `$a * X` or
    `X * $a` is constrained to non-zero.
    
    With the assignor mechanism, we can catch this implication right at
    the moment we associate `$a * $b` with non-zero range, and set similar
--

    [ScalarEvolution] Fix overflow when computing max trip counts
    
    This is split from D105216 to reduce patch complexity.  Original code by Eli with very minor modification by me.
    
    The primary point of this patch is to add the getUDivCeilSCEV routine.  I included the two callers with constant arguments as we know those must constant fold even without any of the fancy inference logic.

commit 489742991f7dc4c621264d223e8973ff876e9080
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Tue Jul 13 09:57:37 2021 -0700

--

commit 5a4e7760101581c394aa4235c55885ec960c8b3b
Author: Rob Suderman <rob.suderman@gmail.com>
Date:   Fri Jul 2 17:00:20 2021 -0700

    [mlir][tosa] Added more shape inference for tosa ops
    
    Added shape inference for:
    - scatter
    - gather
    - transpose
    - slice
    - pad
    - concat
    - reduction operations
    
    Also updated reshape for more aggressive shape inference.
    
    Differential Revision: https://reviews.llvm.org/D105383

commit a95f56f60089ce810dd1d66a640042133f56ccd8
Author: Fangrui Song <i@maskray.me>
--

commit d124133f17357536c4034cb2b2c0bec537cd8fd5
Author: Adrian Prantl <aprantl@apple.com>
Date:   Fri Jul 9 13:36:26 2021 -0700

    Add scoped timers to ReadMemoryFromInferior and ReadMemoryFromFileCache.

commit 3338819b08faa7f23f65fb4e67154583984ebf5c
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Fri Jul 9 13:20:37 2021 -0700

--

commit 9a7afae4927c5a379631b538116c3796f402a970
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Fri Jul 9 10:28:50 2021 -0700

    [OpaquePtr][InferAddrSpace] Use PointerType::getWithSamePointeeType()

commit 47db32e542eb84ca9d4bed798bbdfd40200ac1ef
Author: Fangrui Song <i@maskray.me>
Date:   Fri Jul 9 10:26:53 2021 -0700

--

commit a0ab45799b597f5523b14e5910e25256f5b8a489
Author: Stanislav Mekhanoshin <Stanislav.Mekhanoshin@amd.com>
Date:   Tue Jul 6 14:34:28 2021 -0700

    [AMDGPU] Move atomic expand past infer address spaces
    
    There are cases where infer address spaces pass cannot yet
    infer an address space in the opt pipeline and then in the
    llc pipeline it runs too late for atomic expand pass to
    benefit from a specific address space.
    
    Move atomic expand pass past the infer address spaces.
    
    Fixes: SWDEV-293410
    
    Differential Revision: https://reviews.llvm.org/D105511

--

commit 8dea784b3ed7df3edd9e3b59b1e1b58d2a4ac175
Author: Rob Suderman <rob.suderman@gmail.com>
Date:   Thu Jun 17 15:58:37 2021 -0700

    [mlir][tosa] Add tosa shape inference with InferReturnTypeComponent
    
    Added InferReturnTypeComponents for NAry operations, reshape, and reverse.
    With the additional tosa-infer-shapes pass, we can infer/propagate shapes
    across a set of TOSA operations. Current version does not modify the
    FuncOp type by inserting an unrealized conversion cast prior to any new
    non-matchin returns.
    
    Differential Revision: https://reviews.llvm.org/D105312
--

commit f4ea6531e677b1a3c107d7009a7e2f195c8fa915
Author: Florian Hahn <flo@fhahn.com>
Date:   Wed Jun 30 18:00:36 2021 +0100

    [BasicAA] Add test for incorrectly inferring noalias due to scale sign.
    
    This patch adds a test where we currently incorrectly determine noalias,
    because the sign of Scale is adjusted after 91fa3565da16.

commit ec74192f52472c1ce928f8ca3cfeed8038a68066
--
    
    GlobalISel is relying on regular MachineMemOperands to track all of
    the memory properties of accesses. Just the raw byte size is
    insufficent to disambiguate all situations. For example, if we need to
    split an unaligned extending load, we need to know the number of bits
    in the original source value and can't infer it from the result
    type. This is also a problem for extending vector loads.
    
    This does decrease the maximum representable size from the full
    uint64_t bytes to a maximum of 16-bits. No in tree testcases hit this,
    other than places using UINT64_MAX for unknown sizes. This may be an
--

    [mlir] Add support for LLVM's dso_local attr
    
    This patch brings support for setting runtime preemption specifiers of
    LLVM's GlobalValues. In LLVM semantics, if the `dso_local` attribute
    is not explicitly requested, then it is inferred based on linkage and
    visibility. We model this same behavior with a UnitAttribute: if it is
    present, then we explicitly request the GlobalValue to marked as
    `dso_local`, otherwise we rely on the GlobalValue itself to make this
    decision.
    
--

commit ae983de6cce23dfeeb629395f86528e911218ba4
Author: Reshabh Sharma <Reshabhkumar.Sharma@amd.com>
Date:   Mon Jun 28 19:18:39 2021 +0530

    [InferAddressSpaces] NFC: For noop IntToPtr/PtrToInt pair cast to operator instead of PtrToInt
    
    Compiler crashes at an assertion while casting operands to PtrToIntInst at some cases when
    ptrtoint is present as an explicit operand to inttoptr. Explicit instruction operator as
    operand can not be casted to an Instruction.
    
--

commit 3ed3e438a75d9cf756f6004b60dd5b3feec96b0b
Author: MaheshRavishankar <ravishankarm@google.com>
Date:   Wed Jun 16 22:12:16 2021 -0700

    [mlir] Move `memref.dim` canonicalization using `InferShapedTypeOpInterface` to a separate pass.
    
    Based on dicussion in
    [this](https://llvm.discourse.group/t/remove-canonicalizer-for-memref-dim-via-shapedtypeopinterface/3641)
    thread the pattern to resolve the `memref.dim` of a value that is a
    result of an operation that implements the
    `InferShapedTypeOpInterface` is moved to a separate pass instead of
    running it as a canonicalization pass. This allows shape resolution to
    happen when explicitly required, instead of automatically through a
    canonicalization.
    
    Differential Revision: https://reviews.llvm.org/D104321
--
    
    4. Improving counts quality by respecting the counts already collected on the non-dangling copy of a probe. A probe, when duplicated, gets two copies at runtime. If one of them is dangling while the other is not, merging the two probes at profile generation time will cause the real samples collected on the non-dangling one to be discarded. Not reporting the dangling counterpart will keep the real samples.
    
    5. Better readability.
    
    6. Be consistent with non-CS dwarf line number based profile. Zero counts are trusted by the compiler counts inferencer while missing counts will be inferred by the compiler.
    
    Note that the current patch does include any work for #3. There will be follow-up changes.
    
    For #1, I've seen for a large Facebook service, the text profile is reduced by 7%. For extbinary profile, the size of  LBRProfileSection is reduced by 35%.
    
--
Date:   Tue Jun 15 19:23:51 2021 +0200

    [lldb] Make the ClassTemplateDecl merging logic in TypeSystemClang respect template parameters
    
    DWARF doesn't describe templates itself but only actual template instantiations.
    Because of that LLDB has to infer the parameters of the class template
    declarations from the actual instantiations when creating the internal Clang AST
    from debug info
    
    Because there is no dedicated DIE for the class template, LLDB also creates the
    `ClassTemplateDecl` implicitly when parsing a template instantiation. To avoid
--

commit 0a0800c4d10c250ffb152b5f059d6f9a19ed8efe
Author: spupyrev <spupyrev@fb.com>
Date:   Fri Jun 11 21:45:47 2021 -0700

    A post-processing for BFI inference
    
    The current implementation for computing relative block frequencies does
    not handle correctly control-flow graphs containing irreducible loops. This
    results in suboptimally generated binaries, whose perf can be up to 5%
    worse than optimal.
--
    updates block frequencies based on the frequencies of their predesessors.
    This corresponds to finding the stationary point of the Markov chain by
    an iterative method aka "PageRank computation". The algorithm takes at
    most O(|E| * IterativeBFIMaxIterations) steps but typically converges faster.
    
    It is turned on by passing option `use-iterative-bfi-inference`
    and applied only for functions containing profile data and irreducible loops.
    
    Tested on SPEC06/17, where it is helping to get correct profile counts for one of
    the binaries (403.gcc). In prod binaries, we've seen a speedup of up to 2%-5%
    for binaries containing functions with hot irreducible loops.
--
Author: Ayush Sahay <asahay@qti.qualcomm.com>
Date:   Fri Jun 11 21:22:15 2021 +0530

    [lldb-vscode] Synchronize calls to SendTerminatedEvent
    
    If an inferior exits prior to the processing of a disconnect request,
    then the threads executing EventThreadFunction and request_discontinue
    respectively may call SendTerminatedEvent simultaneously, in turn,
    testing and/or setting g_vsc.sent_terminated_event without any
    synchronization. In case the thread executing EventThreadFunction sets
    it before the thread executing request_discontinue has had a chance to
--
    
    Together, these let us conclude that the trip count of this loop must come before unsigned overflow unless the body would form a well defined infinite loop.
    
    A couple notes for those reading along:
    * I reused the loop properties code which is overly conservative for this case. I may follow up in another patch to generalize it for the actual UB rules.
    * We could cache the n(s/u)w facts. I left that out because doing a pre-patch which cached existing inference showed a lot of diffs I had trouble fully explaining. I plan to get back to this, but I don't want it on the critical path.
    
    Differential Revision: https://reviews.llvm.org/D103118

commit 00b6463b269f6815a8a110b9208f483e239ce1e2
Author: William S. Moses <gh@wsmoses.com>
--

commit 14f350daf290e9d7f3eef700acf930d8b0887007
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Mon May 31 21:22:21 2021 +0200

    [IndVars] Don't forget value when inferring nowrap flags
    
    When SimplifyIndVars infers IR nowrap flags from SCEV, this may
    happen in two ways: Either nowrap flags were already present in
    SCEV and just get transferred to IR. Or zero/sign extension of
    addrecs infers additional nowrap flags, and those get transferred
    to IR. In the latter case, calling forgetValue() ensures that the
    newly inferred nowrap flags get propagated to any other SCEV
    expressions based on the addrec. However, the invalidation can
    also have a major compile-time effect in some cases. For
    https://bugs.llvm.org/show_bug.cgi?id=50384 with n=512 compile-
    time drops from 7.1s to 0.8s without this invalidation. At the
    same time, removing the invalidation doesn't affect any codegen
--

commit 7defab082070adf3d04b326ba160b029394edc7c
Author: Michael Spencer <bigcheesegs@gmail.com>
Date:   Thu May 20 10:54:11 2021 +0200

    Reapply "[clang][deps] Support inferred modules"
    
    This reverts commit 76b8754d and ensures the PCM files are created in the correct directory (not in the current working directory).

commit 4a35c51c655852d03de6da6ccf743d40a935b293
Author: Roman Lebedev <lebedev.ri@gmail.com>
--

commit 76b8754d1bba6a8490c0f7e8a9e2fb3d181f0b03
Author: Frederik Gossen <frgossen@google.com>
Date:   Wed May 19 19:19:37 2021 +0200

    Revert "Reapply "[clang][deps] Support inferred modules""
    
    This reverts commit c98833cdaad01787ea70ecdfabb05a7e142a6671.
    The test `ClangScanDeps/modules-inferred-explicit-build.m` creates files
    in the current directory.

commit f66ba4cfa7ca312caee5f8f32fcceff592a15acd
Author: Sanjay Patel <spatel@rotateright.com>
Date:   Wed May 19 12:40:09 2021 -0400
--

commit c98833cdaad01787ea70ecdfabb05a7e142a6671
Author: Michael Spencer <bigcheesegs@gmail.com>
Date:   Wed May 19 13:04:56 2021 +0200

    Reapply "[clang][deps] Support inferred modules"
    
    This reapplies commit 95033eb3 that reverted commit 1d9e8e13.
    
    The tests were failing on Windows due to spaces and backslashes in paths not being handled carefully.

--

commit 851d02f61e945d335021858111416f444139e2b2
Author: Wenyi Zhao <reyizero@gmail.com>
Date:   Wed May 19 02:11:33 2021 +0000

    Enhance InferShapedTypeOpInterface to make it accessible during dialect conversion
    
    Original interfaces are not safe to be called during dialect conversion.
    This is because some ops (e.g. `dynamic_reshape(input, target_shape)`)
    depend on the values of their operands to calculate the output shape.
    However the operands may be out of reach during dialect conversion (e.g.
--
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Mon May 17 11:47:19 2021 -0700

    Add type function for ConstShape op.
    
    - Enables inferring return type for ConstShape, takes into account valid return types;
    - The compatible return type function could be reused, leaving that for next use refactoring;
    
    Differential Revision: https://reviews.llvm.org/D102182

commit 0c557db617112b429e5abfbcec72d181221bfead
--

commit ccd485e55424b78c07c2f9520faf00b805f78c9b
Author: Jan Svoboda <jan_svoboda@apple.com>
Date:   Mon May 17 13:23:05 2021 +0200

    Revert "[clang][deps] Support inferred modules"
    
    This reverts commit 1d9e8e13
    
    Something is off with handling Windows paths: http://45.33.8.238/win/38908/step_7.txt
    Most likely introduced in https://reviews.llvm.org/D102491
--

commit 1d9e8e13dd7b3204fa51ada17d1608bdbd1bed66
Author: Michael Spencer <bigcheesegs@gmail.com>
Date:   Mon May 17 10:41:44 2021 +0200

    [clang][deps] Support inferred modules
    
    This patch adds support for inferred modules to the dependency scanner.
    
    Effectively a cherry-pick of https://github.com/apple/llvm-project/pull/699 authored by @Bigcheese with libclang and other changes omitted.
    
    Contains following changes:
    
    1. [Clang][ScanDeps] Ignore __inferred_module.map dependency.
      * This shows up with inferred modules, but it doesn't exist on disk, so don't report it as a dependency.
    
    2. [Clang][ScanDeps] Use the module map a module was inferred from for inferred modules.
    
    Also includes a smoke test that uses clang-scan-deps output to perform an explicit build. There's no intention to duplicate whatever `test/Modules` contains, just to verify the produced command-line does "work" (with very loose definition of work).
    
    Split from D100934.
    
--

commit d3676d4b666ead794fc58bbc7e07aa406dcf487a
Author: Michael Spencer <bigcheesegs@gmail.com>
Date:   Mon May 17 09:40:29 2021 +0200

    [clang][modules] Build inferred modules
    
    This patch enables explicitly building inferred modules.
    
    Effectively a cherry-pick of https://github.com/apple/llvm-project/pull/699 authored by @Bigcheese with libclang and dependency scanner changes omitted.
    
    Contains the following changes:
    
    1. [Clang] Fix the header paths in clang::Module for inferred modules.
      * The UmbrellaAsWritten and NameAsWritten fields in clang::Module are a lie for framework modules. For those they actually are the path to the header or umbrella relative to the clang::Module::Directory.
      * The exception to this case is for inferred modules. Here it actually is the name as written, because we print out the module and read it back in when implicitly building modules. This causes a problem when explicitly building an inferred module, as we skip the printing out step.
      * In order to fix this issue this patch adds a new field for the path we want to use in getInputBufferForModule. It also makes NameAsWritten actually be the name written in the module map file (or that would be, in the case of an inferred module).
    
    2. [Clang] Allow explicitly building an inferred module.
      * Building the actual module still fails, but make sure it fails for the right reason.
    
    Split from D100934.
    
    Reviewed By: dexonsmith
--
    * The `test/builtins/Unit/` test suite always tested the just built runtime
      libraries.
    * All other testsuites implicitly use whatever runtime library the
      compiler decides to link.
    
    There is no way for us to infer which type of testing the developer
    wants so this patch introduces a new
    `COMPILER_RT_TEST_STANDALONE_BUILD_LIBS` CMake
    option which explicitly declares which runtime libraries should be
    tested. If it is `ON` then the just built libraries should be tested,
    otherwise the libraries in the external compiler should be tested.
--
    Currently we didn't support multiple return type, we work around to use error_code to represent:
    
    1)  The dangling probe.
    2)  Ignore the weight of non-probe instruction
    
    While merging the instructions' weight for the whole BB, it will filter out the error code. But If all instructions of the BB give error_code, the outside logic will mark it as a BB requiring the inference algorithm to infer its weight. This is different from the zero value which will be treated as a cold block.
    
    Fix one place that if we can't find the FunctionSamples in the profile data which indicates the BB is cold, we choose to return zero.
    
    Also refine the comments.
    
--
    I noticed that rs4gc is not stripping a number of memory aliasing related attributes. We do strip some from call sites, but don't strip the same ones from declarations or parameters.
    
    Why do we need to strip these? Two answers:
    
        Safepoints conceptually read and write to the entire garbage collected heap in the physical model. We need this to preserve ordering of all loads and stores with respect to possible relocation.
        We can infer other attributes from these. For instance, readnone can imply both nofree and nosync. Both of which don't hold after physical rewriting.
    
    Note: This exposed a latent issue which was fixed a couple weeks back in 01801d5274.
    
    Differential Revision: https://reviews.llvm.org/D99802

--
    
    We already apply loop-guards when computing the maximum with unitary
    steps. This extends the code to also do so when dealing with non-unitary
    steps.
    
    This allows us to infer a tighter maximum in some cases.
    
    Reviewed By: nikic
    
    Differential Revision: https://reviews.llvm.org/D102267

--

commit afee09751d2d744a753ef4d3e8d83857dcd0f682
Author: Jason Molenda <jason@molenda.com>
Date:   Thu May 13 00:46:21 2021 -0700

    [NFC] Add GetInferiorAddrSize method, unify code to compute
    
    MachProcess.mm has a sequence to get the address size in
    the inferior in three places; and I'm about to add a fourth
    in a future patch.  Not a fan.

commit 107d19eb017ff6734986af077eb2e9f6600114a9
Author: Jingu Kang <jingu.kang@arm.com>
Date:   Thu May 13 08:22:26 2021 +0100
--
    fixes needed, but I was able to temporarily do it and passed the RISCV
    lit tests with these changes.
    
    The changes to isPow2VectorType and getPow2VectorType are copied from EVT.
    
    The change to TypeInfer::EnforceSameNumElts reduces the size of AArch64's isel table.
    We're now considering SameNumElts to require the scalable property to match which
    removes some unneeded type checks.
    
    This was motivated by the bug I fixed yesterday in 80b9510806cf11c57f2dd87191d3989fc45defa8
    
--
Author: Frederik Gossen <frgossen@google.com>
Date:   Mon May 10 10:22:23 2021 +0200

    [MLIR][Shape] Concretize broadcast result type if possible
    
    As a canonicalization, infer the resulting shape rank if possible.
    
    Differential Revision: https://reviews.llvm.org/D102068

commit 541f107871bc9c020925a6e5342542a47c902d12
Author: Guillaume Chatelet <gchatelet@google.com>
--

    [Attributor] Add AAExecutionDomainInfo interface to OpenMPOpt
    
    Summary:
    Add the AAExecutionDomainInfo attributor instance to OpenMPOpt.
    This will infer information relating to domain information that an
    instruction might be expecting in. Right now this only includes a very
    crude check for instructions that will be executed by the master thread
    by comparing a thread-id function with a constant zero.
    
    Reviewed By: jdoerfert
--
    [mlir][linalg] Fix vectorization bug in vector transfer indexing map calculation
    
    The current implementation had a bug as it was relying on the target vector
    dimension sizes to calculate where to insert broadcast. If several dimensions
    have the same size we may insert the broadcast on the wrong dimension. The
    correct broadcast cannot be inferred from the type of the source and
    destination vector.
    
    Instead when we want to extend transfer ops we calculate an "inverse" map to the
    projected permutation and insert broadcast in place of the projected dimensions.
    
--

commit e20b32ff3b029f50c7237f49e5e5c97bd47ea540
Author: Dávid Bolvanský <david.bolvansky@gmail.com>
Date:   Thu Apr 29 00:16:57 2021 +0200

    [BuildLibCalls] Remove inaccessiblememonly inference for calloc
    
    Solves regression mentioned in PR50143.
    
    As noted in D101440, proper modelling for calloc would require new attribute inaccessible_or_returned_memonly.

--
Author: Frederik Gossen <frgossen@google.com>
Date:   Wed Apr 28 11:56:48 2021 +0200

    [MLIR][Shape] Concretize broadcast result type if possible
    
    As a canonicalization, infer the resulting shape rank if possible.
    
    Differential Revision: https://reviews.llvm.org/D101377

commit 2d37f2115d173a2c9117c6dbb4720dc7aefb9f42
Author: Hans Wennborg <hans@hanshq.net>
--
    enables it and reports to the client as supported by the server.
    
    The extension is enabled on the process instance by calling
    SetEnabledExtensions() method.  This is done after qSupported exchange
    (if the debugger is attached to any process), as well as after launching
    or attaching to a new inferior.
    
    The patch adds 'fork' extension corresponding to 'fork-events+'
    qSupported feature and 'vfork' extension for 'vfork-events+'.  Both
    features rely on 'multiprocess+' being supported as well.
    
--
Author: wlei <wlei@fb.com>
Date:   Fri Apr 23 12:35:12 2021 -0700

    [CSSPGO] Fix missing debug info of dangling pseudo probe
    
    While doing speculative execution opt, it conservatively drops all insn's debug info in the merged `ThenBB`(see the loop at line 2384) including the dangling probe. The missing debug info of the dangling probe will cause the wrong inference computation.
    
    So we should avoid dropping the debug info from pseudo probe, this change try to fix this by moving the to-be dangling probe to the merging target BB before the debug info is dropped.
    
    Reviewed By: hoy, wenlei
    
--
Author: Hongtao Yu <hoy@fb.com>
Date:   Fri Apr 23 00:26:11 2021 -0700

    [CSSPGO]  Fix incorrect prorating indirect call distribution factor that leads to target count loss.
    
    Pseudo probe distribution factor is used to scale down profile samples to avoid misleading the counts inference due to the usage of "maximum" in `getBlockWeight`. For callsites, the scaling down can come from code duplication prior to the sample profile loader (prelink or postlink), or due to the indirect call promotion in sample loader inliner. This patch fixes an issue in sample loader ICP where the leftover indirect callsite scaling down causes the loss of non-promoted call target samples unexpectedly. While the scaling down is to favor BFI/BPI with accurate an callsite count, it doesn't fit in the current distribution factor that represents code duplication changes. Ideally,  we would need two factors, one is for code duplication, the other is for ICP. However this seems over complicated. I'm going to trade one usage (callsite counts) for the other (call target counts).
    
    Seeing perf win on one benchmark (mcf) of SPEC2017 with others unchanged.
    
    Reviewed By: wenlei
    
--
Author: Hongtao Yu <hoy@fb.com>
Date:   Mon Apr 19 18:04:43 2021 -0700

    [CSSPGO][llvm-profgen] Always report dangling probes for frames with real samples.
    
    Report dangling probes for frames that have real samples collected. Dangling probes are the probes associated to an empty block. When reported, sample count on a dangling probe will not be trusted by the compiler and we will rely on the counts inference algorithm to get the probe a reasonable count. This actually fixes a bug where previously only those dangling probes with samples collected were reported.
    
    This patch also fixes two existing issues. Pseudo probes are stored in `Address2ProbesMap` and their pointers are used in `PseudoProbeInlineTree`. Previously `std::vector` was used to store probes and the pointers to probes may get obsolete as the vector grows. I'm changing `std::vector` to `std::list` instead.
    
    The other issue is that all outlined functions shared the same inline frame previously due to the unchanged `Index` value as the dummy inlineSite identifier.
    
--

commit 62cdcd6c5aee89e2cbdc498e5a6193d19bd498fb
Author: sstefan1 <sstipanovic@s-energize.com>
Date:   Wed Apr 21 21:02:28 2021 +0200

    [FuncAttrs] Don't infer willreturn for nonexact definitions
    
    Discovered during attributor testing comparing stats with
    and without the attributor. Willreturn should not be inferred
    for nonexact definitions.
    
    Differential Revision: https://reviews.llvm.org/D100988

commit 6ae7fc0a299c40c68b41b113561df03aa814412d
--

commit 55ee541653a817c77a6b5b837c4b8cc50ed3ae0e
Author: Pavel Labath <pavel@labath.sk>
Date:   Wed Apr 21 17:31:41 2021 +0200

    [lldb/test] Clean up TestThreadSpecificBpPlusCondition inferior
    
    The test had a race that could cause two threads to end up with the same
    "thread local" value. I believe this would not cause the test to fail,
    but it could cause it to succeed even when the functionality is broken.
    
--

commit 953f580b904989af11a69a2fbcb046cf0e10cdc5
Author: Pavel Labath <pavel@labath.sk>
Date:   Fri Apr 16 21:52:59 2021 +0200

    [lldb/test] Modernize lldb-server test inferior
    
    Avoid c string manipulation by introducing a StringRef-like
    consume_front operation.

commit 56f987fafebfd5a50551b5d33e5637aa73c97b99
--

    free(nullptr) does not violate the nofree specification
    
    This fixes a subtle and nasty bug in my 86664638. The problem is that free(nullptr) is well defined (and common).
    
    The specification for the nofree attributes talks about memory objects, and doesn't explicitly address null, but I think it's reasonable to assume that nofree doesn't disallow a call to free(nullptr). If it did, we'd have to prove nonnull on an argument to ever infer nofree which doesn't seem to be the intent.
    
    This was found by Nuno and Alive2 over in https://reviews.llvm.org/D100141#2697374.
    
    Differential Revision: https://reviews.llvm.org/D100779

--

commit 11707435ccb44a9377bfed407453e0646a159636
Author: Philip Reames <listmail@philipreames.com>
Date:   Fri Apr 16 15:28:15 2021 -0700

    [inferattrs] Don't infer lib func attributes for nobuiltin functions
    
    If we have a nobuiltin function, we can't assume we know anything about the implementation.
    
    I noticed this when tracing through a log from an in the wild miscompile (https://github.com/emscripten-core/emscripten/issues/9443) triggered after 8666463.  We were incorrectly assuming that a custom allocator could not free.  (It's not clear yet this is the only problem in said issue.)
    
--

    [funcattrs] Add the maximal set of implied attributes to definitions
    
    Have funcattrs expand all implied attributes into the IR. This expands the infrastructure from D100400, but for definitions not declarations this time.
    
    Somewhat subtly, this mostly isn't semantic. Because the accessors did the inference, any client which used the accessor was already getting the stronger result. Clients that directly checked presence of attributes (there are some), will see a stronger result now.
    
    The old behavior can end up quite confusing for two reasons:
    * Without this change, we have situations where function-attrs appears to fail when inferring an attribute (as seen by a human reading IR), but that consuming code will see that it should have been implied. As a human trying to sanity check test results and study IR for optimization possibilities, this is exceeding error prone and confusing. (I'll note that I wasted several hours recently because of this.)
    * We can have transforms which trigger without the IR appearing (on inspection) to meet the preconditions. This change doesn't prevent this from happening (as the accessors still involve multiple checks), but it should make it less frequent.
    
    I'd argue in favor of deleting the extra checks out of the accessors after this lands, but I want that in it's own review as a) it's purely stylistic, and b) I already know there's some disagreement.
    
    Once this lands, I'm also going to do a cleanup change which will delete some now redundant duplicate predicates in the inference code, but again, that deserves to be a change of it's own.
    
    Differential Revision: https://reviews.llvm.org/D100226

commit 7c02dc22e487637abe752939c0e82d36be9921df
Author: Guillaume Chatelet <gchatelet@google.com>
--

commit 3e7ee5428d3442564b9581adc2fb14f4e0a54bcd
Author: Florian Hahn <flo@fhahn.com>
Date:   Thu Apr 15 22:52:22 2021 +0100

    [InferAttrs] Do not mark first argument of str(n)cat as writeonly.
    
    str(n)cat appends a copy of the second argument to the end of the first
    argument. To find the end of the first argument, str(n)cat has to read
    from it until it finds the terminating 0. So it should not be marked as
    writeonly. I think this means the argument should not be marked as
--

commit dd985551c247752ee2be71f04a141225a40641ef
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Apr 14 16:06:25 2021 -0700

    Reapply "[InferAttributes] Materialize all infered attributes for declaration"" and follow on patches.
    
    This reverts commit ab98f2c7129a52e216fd7e088b964cf4af27b0f2 and 98eea392cdbcdb7360e58b46e9329573f092cd96.
    
    It includes a fix for the clang test which triggered the revert.  I failed to notice this one because there was another AMDGPU llvm test with a similiar name and the exact same text in the error message.  Odd.  Since only one build bot reported the clang test, I didn't notice that one.

--

commit ab98f2c7129a52e216fd7e088b964cf4af27b0f2
Author: Nico Weber <thakis@chromium.org>
Date:   Wed Apr 14 18:41:02 2021 -0400

    Revert "[InferAttributes] Materialize all infered attributes for declaration"
    
    Breaks check-clang, see comments on D100400
    
    Also revert follow-up "[NFC] Move a recently added utility into a location to enable reuse"
    
--

commit 61a85da88235983da565bda0160367461fa0f382
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Apr 14 14:43:53 2021 -0700

    [InferAttributes] Materialize all infered attributes for declaration
    
    We have some cases today where attributes can be inferred from another on access, but the result is not explicitly materialized in IR. This change is a step towards changing that.
    
    Why? Two main reasons:
    
    * Human clarity. It's really confusing trying to figure out why a transform is triggering when the IR doesn't appear to have the required attributes.
    * This avoids the need to special case declarations in e.g. functionattrs. Since we can assume the attribute is present, we can work directly from attributes (and only attributes) without also needing to query accessors on Function to avoid missing cases due to unannotated (but infered on use) declarations. (This piece will appear must easier to follow once D100226 also lands.)
    
    Differential Revision: https://reviews.llvm.org/D100400

commit 61500016a59616a8f5ba5a389bafec3b33845279
Author: Chia-hung Duan <chiahungduan@google.com>
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Apr 13 10:22:30 2021 -0700

    Remove a -O2 usage from a CSE specific test file
    
    Given this is checking attributes, there are a bunch of valid ways that O2 can infer attributes that CSE will not.

commit 2b56ac92ac0539a1113adc3d7beed40e6471f757
Author: Stuart Adams <stuartdadams@gmail.com>
Date:   Tue Apr 13 18:24:48 2021 +0100

--
    * X u<= INT_MIN --> X  is always fine
      https://alive2.llvm.org/ce/z/QB8j-C https://alive2.llvm.org/ce/z/7sFKpS
    * X s<= 0 --> -X  is always fine
      https://alive2.llvm.org/ce/z/QbGSyq https://alive2.llvm.org/ce/z/APsN84
    
    If all else fails, try to inferr NSW flag:
    https://alive2.llvm.org/ce/z/qCJfYm

commit b6aaa8836ee0f8a6ec13319bf26523ec73cdbed4
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sat Apr 10 15:41:43 2021 +0300
--

    For non-null pointer checks, do not descend through out-of-bounds GEPs
    
    In LazyValueInfoImpl::isNonNullAtEndOfBlock we populate a set of
    pointers, known to be non-null at the end of a block (e.g. because we
    did a load through them). We then infer that any pointer, based on an
    element of this set is non-null as well ("based" here meaning a
    non-null pointer is the underlying object). This is incorrect, even if
    the base pointer was non-null, the value of a GEP, that lacks the
    inbounds` attribute, may be null.
    
--

commit 39ae25fb8c648b0e710ba2d2d46e7a5b7fafff19
Author: Alexander Belyaev <pifon@google.com>
Date:   Fri Apr 9 10:02:24 2021 +0200

    [lldb] Update object.test after 'nosync' inference was enabled.
    
    https://reviews.llvm.org/D99769

commit 8bc08c55179f81d79e54d1033355faf0471ef081
Author: Alexander Belyaev <pifon@google.com>
--

commit 35393c865c2cb1afbf1315a9d48ac41994cd1344
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 8 14:02:39 2021 -0700

    [funcattrs] Infer nosync from instruction walk
    
    Pretty straightforward use of existing infrastructure and port of the attributor inference rules for nosync.
    
    A couple points of interest:
    * I deliberately switched from "monotonic or better" to "unordered or better". This is simply me being conservative and is better in line with the rest of the optimizer. We treat monotonic conservatively pretty much everywhere.
    * The operand bundle test change is suspicious. It looks like we might have missed something here, but if so, it's an issue with the existing nofree inference as well. I'm going to take a closer look at that separately.
    * I needed to keep the previous inference from readnone. This surprised me, but made sense once I realized readonly inference goes to lengths to reason about local vs non-local memory and that writes to local memory are okay. This is fine for the purpose of nosync, but would e.g. prevent us from inferring nofree from readnone - which is slightly surprising.
    
    Differential Revision: https://reviews.llvm.org/D99769

commit c5d1ccbcdfb11c29c89a2789ac1e89cf4b270be7
Author: Arthur Eubanks <aeubanks@google.com>
--

    [lldb] [client] Support for multiprocess extension
    
    Add a minimal support for the multiprocess extension in gdb-remote
    client.  It accepts PIDs as part of thread-ids, and rejects PIDs that
    do not match the current inferior.
    
    Differential Revision: https://reviews.llvm.org/D99603

commit 2a1f87167cc01261e1164772ba58418fea58326b
Author: Mikael Holmen <mikael.holmen@ericsson.com>
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Fri Apr 2 09:12:24 2021 -0700

    [rs4gc] Strip nofree and nosync attributes when lowering from abstract model
    
    The safepoints being inserted exists to free memory, or coordinate with another thread to do so.  Thus, we must strip any inferred attributes and reinfer them after the lowering.
    
    I'm not aware of any active miscompiles caused by this, but since I'm working on strengthening inference of both and leveraging them in the optimization decisions, I figured a bit of future proofing was warranted.

commit d01653f827cc962734f464be9502eb16cd907a44
Author: Philip Reames <listmail@philipreames.com>
Date:   Fri Apr 2 08:56:49 2021 -0700

--

commit 17800f900dca8243773dec5f90578cce03069b8f
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 1 13:58:13 2021 -0700

    [tests] Add tests for forthcoming funcattrs nosync inference improvement
    
    These are basically all the attributor tests for the same attribute with some minor cleanup for readability and autogened.

commit 76d9bc72784d88f4dd57b9939e52c73739438af5
Author: Jian Cai <jiancai@google.com>
--

commit 1e69a5af92242cfffc88df91fa990a8e17441b48
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 1 12:01:29 2021 -0700

    [Attributor] Cleanup detection of non-relaxed atomics in nosync inference
    
    The code was checking for cases which are disallowed by the verifier.  Delete dead code and adjust style.

commit c4d08f5f7bfcdb2b9d0866bb7a430d6bbfd4c747
Author: John Pennycook <john.pennycook@intel.com>
--

commit 8e596f7e27b47a4bf7c0890214a89b5e60a01b77
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 1 11:48:19 2021 -0700

    [Attributor] Cleanup intrinsic handling in nosync inference [mostly NFC]
    
    Mostly stylistic adjustment, but the old code didn't handle the memcpy.inline intrinsic.  By using the matcher class, we now do.

commit 01aa9e1f6e7df5a936612084c73be704e300c881
Author: Martin Storsjö <martin@martin.st>
--

commit 6ef4505298be08b8cb4243c7d28751e0e315370a
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 1 11:34:43 2021 -0700

    [funcattrs] Infer nosync from readnone and non-convergent
    
    This implements the most basic possible nosync inference. The choice of inference rule is taken from the comments in attributor and the discussion on the review of the change which introduced the nosync attribute (0626367202c).
    
    This is deliberately minimal. As noted in code comments, I do plan to add a more robust inference which actually scans the function IR directly, but a) I need to do some refactoring of the attributor code to use common interfaces, and b) I wanted to get something in. I also wanted to minimize the "interesting" analysis discussion since that's time intensive.
    
    Context: This combines with existing nofree attribute inference to help prove dereferenceability in the ongoing deref-at-point semantics work.
    
    Differential Revision: https://reviews.llvm.org/D99749

commit 2d733923b8d32230d5af777dd1d84ae2c7fc968d
Author: Greg Clayton <gclayton@fb.com>
--

commit db357891f0cf76253be3cd75f682b68544a411da
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 1 11:32:22 2021 -0700

    Infer dereferenceability from malloc and friends
    
    Hookup TLI when inferring object size from allocation calls. This allows the analysis to prove dereferenceability for known allocation functions (such as malloc/new/etc) in addition to those marked explicitly with the allocsize attribute.
    
    This is a follow up to 0129cd5 now that the bug fixed by e2c6621e6 is resolved.
    
    As noted in the test, this relies on being able to prove that there is no free between allocation and context (e.g. hoist location). At the moment, this is handled conservatively. I'm working strengthening out ability to reason about no-free regions separately.
    
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 1 10:37:22 2021 -0700

    Mark unordered memset/memmove/memcpy as nosync
    
    Mostly a means to remove a bit of code from attributor in advance of implementing a FuncAttr inference for nosync.

commit d157e3f387c918a6736fb29fccd78a80425e5f88
Author: Craig Topper <craig.topper@sifive.com>
Date:   Thu Apr 1 10:17:53 2021 -0700

--

commit 97834378852b1eeef34fae7c9354a7f33327004e
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 1 09:03:13 2021 -0700

    [tests] Cover the most basic cases of nosync inference

commit 56b39afb58627507ffbc7eaa749781a30b750c03
Author: cchen <chichunchen844@gmail.com>
Date:   Thu Apr 1 11:02:23 2021 -0500

--

commit e2c6621e638e4dc30963293bff052784d3a3305a
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Apr 1 08:29:47 2021 -0700

    [deref-at-point] restrict inference of dereferenceability based on allocsize attribute
    
    Support deriving dereferenceability facts from allocation sites with known object sizes while correctly accounting for any possibly frees between allocation and use site. (At the moment, we're conservative and only allowing it in functions where we know we can't free.)
    
    This is part of the work on deref-at-point semantics. I'm making the change unconditional as the miscompile in this case is way too easy to trip by accident, and the optimization was only recently added (by me).
    
--

commit e927053a0d6a3afcae1dc33ebac2fdabbf459e76
Author: Thomas Preud'homme <thomasp@graphcore.ai>
Date:   Sun Mar 28 00:03:37 2021 +0000

    [test, InferFunctionAttrs] Fix use of var defined in CHECK-NOT
    
    LLVM test Transforms/InferFunctionAttrs/annotate contains two RUN
    invokation (UNKNOWN and NVPTX lines) which involve a CHECK-NOT directive
    with a variable not defined by the enabled CHECK prefixes. This commit
    fixes that by:
    
    - enabling CHECK prefix for unknown target with specialisation when it
--
Author: spupyrev <spupyrev@fb.com>
Date:   Tue Mar 30 10:38:58 2021 -0700

    [SamplePGO] Keeping prof metadata for IndirectBrInst
    
    Currently prof metadata with branch counts is added only for BranchInst and SwitchInst, but not for IndirectBrInst. As a result, BPI/BFI make incorrect inferences for indirect branches, which can be very hot.
    This diff adds metadata for IndirectBrInst, in addition to BranchInst and SwitchInst.
    
    Reviewed By: wmi, wenlei
    
    Differential Revision: https://reviews.llvm.org/D99550
--
    As (linux) threads start their life with SIGUSR1 (among others)
    disabled, and only enable it during initialization, injecting the signal
    during this window did not behave as expected. The fix is to change the
    test to ensure the signal gets injected with the signal unblocked.
    
    The simplest way to do this was to write a dedicated inferior for this
    test. I also created a new header to factor out the function retrieving
    the (os-specific) thread id.

commit bd334c790f2e43e72270b8044f08303e1c2f283b
Author: Alexey Bataev <a.bataev@outlook.com>
--
    [lldb] [server] Support for multiprocess extension
    
    Add a minimal support for the multiprocess extension in lldb-server.
    The server indicates support for it via qSupported, and accepts
    thread-ids containing a PID.  However, it still does not support
    debugging more than one inferior, so any other PID value results
    in an error.
    
    Differential Revision: https://reviews.llvm.org/D98482

commit af7e1f07ac03074647897498358aaec165c1aaea
--

commit 9b0517035faee275ce1feabb03d0c7606ea7f819
Author: MaheshRavishankar <ravishankarm@google.com>
Date:   Mon Mar 29 10:57:23 2021 -0700

    [mlir] Enhance InferShapedTypeOpInterface and move LinalgOps to use them.
    
    A new `InterfaceMethod` is added to `InferShapedTypeOpInterface` that
    allows an operation to return the `Value`s for each dim of its
    results. It is intended for the case where the `Value` returned for
    each dim is computed using the operands and operation attributes. This
    interface method is for cases where the result dim of an operation can
    be computed independently, and it avoids the need to aggregate all
--

commit 015c39882ebc1771713a7523ae76903ebae83288
Author: Gabor Marton <gabor.marton@ericsson.com>
Date:   Thu Mar 25 15:29:41 2021 +0100

    [Analyzer] Infer 0 value when the divisible is 0 (bug fix)
    
    Currently, we infer 0 if the divisible of the modulo op is 0:
      int a = x < 0; // a can be 0
      int b = a % y; // b is either 1 % sym or 0
    However, we don't when the op is / :
      int a = x < 0; // a can be 0
      int b = a / y; // b is either 1 / sym or 0 / sym
--

commit 4054b8322fd8ef706bd486128a57bc8b709e2319
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Mar 24 16:18:09 2021 -0700

    [deref] Implement initial set of inference rules for deref-at-point
    
    This implements a subset of the initial set of inference rules proposed in the llvm-dev thread "RFC: Decomposing deref(N) into deref(N) + nofree". The nolias one got moved to a separate review as there was some concerns raised which require further discussion.
    
    Differential Revision: https://reviews.llvm.org/D99135

commit c8ef98e5de0ec5ebd4efc80ad8938ed53b268ce3
Author: Matt Morehouse <mascasa@google.com>
--
Author: Richard Smith <richard@metafoo.co.uk>
Date:   Mon Mar 22 17:45:39 2021 -0700

    Improve module dumping for debugging.
    
      * List inferred lists of imports in `#pragma clang __debug module_map`.
    
      * Add `#pragma clang __debug modules {all,visible,building}` to dump
        lists of known / visible module names or the building modules stack.

commit a28fee9cb2eddaaa85457b6ff9869195cbfaed3d
--
    
    This allows adding a C function pointer as a matchAndRewrite style pattern, which
    is a very common case.  This adopts it in ExpandTanh to show how it reduces a level
    of nesting.
    
    We could allow C++ lambdas here, but that doesn't work as well with type inference
    in the common case.  Instead of:
    
      patterns.insert(convertTanhOp);
    
    you need to specify:
--

    Update basic deref API to account for possiblity of free [NFC]
    
    This patch is plumbing to support work towards the goal outlined in the recent llvm-dev post "[llvm-dev] RFC: Decomposing deref(N) into deref(N) + nofree".
    
    The point of this change is purely to simplify iteration on other pieces on way to making the switch. Rebuilding with a change to Value.h is slow and painful, so I want to get the API change landed. Once that's done, I plan to more closely audit each caller, add the inference rules in their own patch, then post a patch with the langref changes and test diffs. The value of the command line flag is that we can exercise the inference logic in standalone patches without needing the whole switch ready to go just yet.
    
    Differential Revision: https://reviews.llvm.org/D98908

commit 66f340051ac2d334f30ef85251323b12cb2e6e5f
Author: Vy Nguyen <vyng@google.com>
--
        ptr = ptr->next;
      }
      printf("%f\n", sum);
    }
    ```
    By explicit assignment  `a->next = NULL`, we can infer the length of the link list is `1`. In this case we can eliminate while loop traversal entirely. This elimination is supposed to be performed by GVN/MemoryDependencyAnalysis/PhiTranslation .
    
    The final IR before this patch:
    
    ```
    define dso_local void @foo(i32* nocapture readnone %r) local_unnamed_addr #0 {
--
Date:   Tue Mar 9 16:22:46 2021 -0800

    Log in SetPrivateState when unwind logging enabled
    
    It is easier to read the unwind logging when you can see
    when the inferior resumes / stops and we're doing new unwinds.

commit b627802e81ee5ab176f9e8b318e01f73c1e961b9
Author: David Blaikie <dblaikie@gmail.com>
Date:   Tue Mar 9 15:50:25 2021 -0800

--

commit a25b537bf437864232cb5826539eb4cee7c47b74
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Mar 9 12:35:16 2021 -0800

    [SCEV] Infer known bits from known sign bits
    
    This was suggested by lebedev.ri over on D96534.  You'll note lack of tests.  During review, we weren't actually able to find a case which exercises it, but both I and lebedev.ri feel it's a reasonable change, straight forward, and near free.
    
    Differential Revision: https://reviews.llvm.org/D97064

--
Date:   Sat Mar 6 10:24:34 2021 +0100

    [LVI] Simplify and generalize handling of clamp patterns
    
    Instead of handling a number of special cases for selects, handle
    this generally when inferring ranges from conditions. We already
    infer ranges from `x + C pred C2` to `x`, so doing the same for
    `x pred C2` to `x + C` is straightforward.

commit 906deaa0d9124387d4acb83b924c6b86f6d45219
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Sat Mar 6 10:35:30 2021 +0100
--
    
    If we have a value live over a call which is used for deopt at the call, we know that the value must be a base pointer. We can avoid potentially inserting IR to materialize a base for this value.
    
    In it's current form, this is mostly a compile time optimization.   Building the base pointer graph (and then optimizing it away again) is a relatively expensive operation.  We also sometimes end up with better codegen in practice - due to failures in optimizing away the inserted base pointer propogation - but those are optimization bugs we're fixing concurrently.
    
    The alternative to this would be to extend the base pointer inference with the ability to generally reuse multiple-base input instructions (phis and selects).  That's somewhat invasive and complicated, so we're defering it a bit longer.
    
    Differential Revision: https://reviews.llvm.org/D97885

commit 2b50ce152417286e0091a1683482457473d4d7a8
Author: Zarko Todorovski <zarko@ca.ibm.com>
--
Author: Hongtao Yu <hoy@fb.com>
Date:   Wed Feb 24 23:47:29 2021 -0800

    [CSSPGO] Deduplicating dangling pseudo probes.
    
    Same dangling probes are redundant since they all have the same semantic that is to rely on the counts inference tool to get reasonable count for the same original block. Therefore, there's no need to keep multiple copies of them. I've seen jump threading created tons of redundant dangling probes that slowed down the compiler dramatically. Other optimization passes can also result in redundant probes though without an observed impact so far.
    
    This change removes block-wise redundant dangling probes specifically introduced by jump threading. To support removing redundant dangling probes caused by all other passes, a final function-wise deduplication is also added.
    
    An 18% size win of the .pseudo_probe section was seen for SPEC2017. No performance difference was observed.
    
--
Author: Hongtao Yu <hoy@fb.com>
Date:   Thu Feb 25 00:52:58 2021 -0800

    [CSSPGO] Unblocking optimizations by dangling pseudo probes.
    
    This change fixes a couple places where the pseudo probe intrinsic blocks optimizations because they are not naturally removable. To unblock those optimizations, the blocking pseudo probes are moved out of the original blocks and tagged dangling, instead of allowing pseudo probes to be literally removed. The reason is that when the original block is removed, we won't be able to sample it. Instead of assigning it a zero weight, moving all its pseudo probes into another block and marking them dangling should allow the counts inference a chance to assign them a more reasonable weight. We have not seen counts quality degradation from our experiments.
    
    The optimizations being unblocked are:
    
            1. Removing conditional probes for if-converted branches. Conditional probes are tagged dangling when their homing branch arms are folded so that they will not be over-counted.
            2. Unblocking jump threading from removing empty blocks. Pseudo probe prevents jump threading from removing logically empty blocks that only has one unconditional jump instructions.
--
    
    Dangling probes are the probes associated to an empty block. This usually happens when all real instructions are optimized away from the block. There is a problem with dangling probes during the offline counts processing. The way the sample profiler works is that samples collected on the first physical instruction following a probe will be counted towards the probe. This logically equals to treating the instruction next to a probe as if it is from the same block of the probe. In the dangling probe case, the real instruction following a dangling probe actually starts a new block, and samples collected on the new block may cause issues when counted towards the empty block.
    
    To mitigate this issue, we first try to move around a dangling probe inside its owning block. If there are still native instructions preceding the probe in the same block, we can then use them as a place holder to collect samples for the probe. A pass is added to walk each block backwards looking for probes not followed by any real instruction and moving them before the first real instruction. This is done right before the object emission.
    
    If we are unlucky to find such in-block preceding instructions for a probe, the solution we are taking is to tag such probe as dangling so that the samples reported for them will not be trusted by the compiler. We leave it up to the counts inference algorithm to get such probes a reasonable count. The number `UINT64_MAX` is used to mark sample count as collected for a dangling probe.
    
    Reviewed By: wmi
    
    Differential Revision: https://reviews.llvm.org/D95962

--
    We previously defaulted to x86_64 and an unknown platform, which was fine when
    we only supported one arch and did no platform checks, but that will no longer
    be true going ahead. Therefore, we should require those flags to be specified
    whenever the linker is invoked.
    
    Note that LLD-ELF and ld64 both infer the arch from their input object files,
    but the usefulness of that is questionable since clang will always specify these
    flags, and most of the time `lld` will be invoked via clang.
    
    Reviewed By: #lld-macho, thakis
    
--

commit 2f0b4db5ea52148a91c57fcb192856bab567de5a
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Mon Mar 1 05:21:07 2021 -0800

    [mlir] Add convenience grouping for tensor type inference
    
    For ops that produces tensor types and implement the shaped type component interface, the type inference interface can be used. Create a grouping of these together to make it easier to specify (it cannot be added into a list of traits, but must rather be appended/concated to one as it isn't a trait but a list of traits).
    
    Differential Revision: https://reviews.llvm.org/D97636

commit 7b319df29bf4ebe690ca0c41761e46d8b0081293
Author: serge-sans-paille <sguelton@redhat.com>
--
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Wed Feb 24 11:04:47 2021 -0800

    [lldb] Support debugging utility functions
    
    LLDB uses utility functions to run code in the inferior for its own
    internal purposes, such as reading classes from the Objective-C runtime
    for example. Because these expressions should be transparent to the
    user, we ignore breakpoints and unwind the stack on errors, which
    makes them hard to debug.
    
--
    [lld-macho] Check for arch compatibility when loading ObjFiles and TBDs
    
    The silent failures had confused me a few times.
    
    I haven't added a similar check for platform yet as we don't yet have logic to
    infer the platform automatically, and so adding that check would require
    updating dozens of test files.
    
    Reviewed By: #lld-macho, thakis, alexshap
    
    Differential Revision: https://reviews.llvm.org/D97209
--

commit b3c227a25a231248e3752918c2cac1a7b9414ef1
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Thu Feb 18 22:03:02 2021 +0000

    [mlir] Better support for rank-reducing subview / subtensor type inference.
    
    Differential Revision: https://reviews.llvm.org/D96995

commit 1a2b3536efef20f12c44201c2834a383b7c5c4c2
Author: Djordje Todorovic <djordje.todorovic@syrmia.com>
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Feb 18 08:33:12 2021 -0800

    [instcombine] Exploit UB implied by nofree attributes
    
    This patch simply implements the documented UB of the current nofree attributes as specified. It doesn't try to be fancy about inference (yet), it just implements the cases already specified and inferred.
    
    Note: When this lands, it may expose miscompiles. If so, please revert and provide a test case. It's likely the bug is in the existing inference code and without a relatively complete test case, it will be hard to debug.
    
    Differential Revision: https://reviews.llvm.org/D96349

commit 46757ccb49ab88da54ca8ddd43665d5255ee80f7
Author: Jeroen Dobbelaere <jeroen.dobbelaere@synopsys.com>
--

commit 059cfe30939db19ed042c80c8cba349f8a4d3c7f
Author: Florian Hahn <flo@fhahn.com>
Date:   Thu Feb 18 11:13:05 2021 +0000

    [FuncAttrs] Add tests for willreturn callsite inference.

commit 24aa30254dceea3f55860f8cdcb6b65bf37a5176
Author: Simon Pilgrim <llvm-dev@redking.me.uk>
Date:   Wed Feb 17 18:17:50 2021 +0000

--

    [mlir] Add clone method to ShapedType
    
    Allow clients to create a new ShapedType of the same "container" type
    but with different element or shape. First use case is when refining
    shape during shape inference without needing to consider which
    ShapedType is being refined.
    
    Differential Revision: https://reviews.llvm.org/D96682

commit e4796aae18168dcb7be2856576e791f35a27f9f1
--

commit 5bc4f8846c07bc3b355c8f303416784a10d1a298
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Thu Feb 11 22:26:49 2021 +0000

    s[mlir] Tighten computation of inferred SubView result type.
    
    The AffineMap in the MemRef inferred by SubViewOp may have uncompressed symbols which result in type mismatch on otherwise unused symbols. Make the computation of the AffineMap compress those unused symbols which results in better canonical types.
    Additionally, improve the error message to report which inferred type was expected.
    
    Differential Revision: https://reviews.llvm.org/D96551

commit 9e62c9146d2c125a1abda594add70ed66008e372
Author: ShihPo Hung <shihpo.hung@sifive.com>
--

commit 24db78393804cc255baaf474ac405aaad458a84d
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Wed Feb 10 22:53:33 2021 +0000

    [mlir] NFC - Extend inferResultType API for SubViewOp and SubTensorOp

commit 4643fd27c8a428906b1ed22cb225240a4f52694b
Author: Nicolas Vasilache <nicolas.vasilache@gmail.com>
Date:   Wed Feb 10 22:30:46 2021 +0000

--
    of whether we match them as a standalone splat or as part of
    another operation.
    
    While I was there I added complexities to the simm5/uimm5 patterns so
    we didn't have to assume that the 1 on the non-immediate was lower
    than what tablegen inferred.
    
    I had to make a minor tweak to tablegen to fix one place that
    didn't expect to see a ComplexPattern that wasn't a "leaf".
    
    Reviewed By: frasercrmck
--
Date:   Sat Jan 30 16:53:32 2021 +0000

    [RISCV] Optimize sign-extended EXTRACT_VECTOR_ELT nodes
    
    This patch custom-legalizes all integer EXTRACT_VECTOR_ELT nodes where
    SEW < XLEN to VMV_S_X nodes to help the compiler infer sign bits from
    the result. This allows us to eliminate redundant sign extensions.
    
    For parity, all integer EXTRACT_VECTOR_ELT nodes are legalized this way
    so that we don't need TableGen patterns for some and not others.
    
--

commit ab243efb261ba7e27f4b14e1a6fbbff15a79c0bf
Author: Richard Smith <richard@metafoo.co.uk>
Date:   Thu Feb 4 13:55:28 2021 -0800

    Don't infer attributes on '::operator new'.
    
    These attributes were all incorrect or inappropriate for LLVM to infer:
    - inaccessiblememonly is generally wrong; user replacement operator new
      can access memory that's visible to the caller, as can a new_handler
      function.
    - willreturn is generally wrong; a custom new_handler is not guaranteed
      to terminate.
    - noalias is inappropriate: Clang has a flag to determine whether this
      attribute should be present and adds it itself when appropriate.
    - noundef and nonnull on the return value should be specified by the
      frontend on all 'operator new' functions if we want them, not here.
    
    In any case, inferring attributes on functions declared 'nobuiltin' (as
    these are when Clang emits them) seems questionable.

commit 1484ad4137b5d627573672bad48b03785f8fdefd
Author: Richard Smith <richard@metafoo.co.uk>
Date:   Thu Feb 4 13:38:38 2021 -0800
--
    Please refer https://groups.google.com/g/llvm-dev/c/1p1rdYbL93s and https://reviews.llvm.org/D89707 for more context about CSSPGO and llvm-profgen.
    
    **Implementation**
    
    - Extended `PseudoProbeProfileGenerator` for pseudo probe based profile generation.
    - `populateBodySamplesWithProbes` reading range counter is responsible for recording function body samples and inferring caller's body samples.
    - `populateBoundarySamplesWithProbes` reading branch counter is responsible for recording call site target samples.
    - Each sample is recorded with its calling context(named `ContextId`). Remind that the probe based context key doesn't include the leaf frame probe info, so the `ContextId` string is created from two part: one from the probe stack strings' concatenation and other one from the leaf frame probe.
    - Added regression test
    
    Test Plan:
--
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Tue Feb 2 23:25:27 2021 -0800

    [lldb] Honor the CPU type & subtype when launching on macOS
    
    Honor the CPU type (and subtype) when launching the inferior on macOS.
    
    Part of this functionality was thought to be no longer needed and
    removed in 85bd4369610fe60397455c8e0914a09288285e84, however it's still
    needed, for example to launch binaries under Rosetta 2 on Apple Silicon.
    
--

commit 95935849881c403e6e141da16b41d64dc4e537d3
Author: Vladislav Vinogradov <vlad.vinogradov@intel.com>
Date:   Tue Feb 2 18:27:26 2021 +0000

    [mlir] Print more verbose message in case of type inference error
    
    Include the types into the error message.
    
    Reviewed By: ftynse
    
--
Date:   Thu Jan 28 10:47:07 2021 -0800

    Add convenience function for checking arrays of shapes compatible.
    
    Expand existing one to handle the common case for verifying compatible
    is existing and inferred. This considers arrays equivalent if they they
    have the same size and pairwise compatible elements.

commit 8af0ccf5a498fb75f13aef0e3bd5c00bc348693f
Author: Aart Bik <ajcbik@google.com>
Date:   Thu Jan 28 10:24:33 2021 -0800
--
    [ValueTracking] Don't assume readonly function will return
    
    This is similar to D94106, but for the
    isGuaranteedToTransferExecutionToSuccessor() helper. We should not
    assume that readonly functions will return, as this is only true for
    mustprogress functions (in which case we already infer willreturn).
    As with the DCE change, for now continue assuming that readonly
    intrinsics will return, as not all target intrinsics have been
    annotated yet.
    
    Differential Revision: https://reviews.llvm.org/D95288
--

commit 52586c46b0883600a332fd64731dc5287981f980
Author: Stella Laurenzo <stellaraccident@gmail.com>
Date:   Fri Jan 22 18:43:50 2021 -0800

    [mlir][CAPI] Add result type inference to the CAPI.
    
    * Adds a flag to MlirOperationState to enable result type inference using the InferTypeOpInterface.
    * I chose this level of implementation for a couple of reasons:
      a) In the creation flow is naturally where generated and custom builder code will be invoking such a thing
      b) it is a bit more efficient to share the data structure and unpacking vs having a standalone entry-point
      c) we can always decide to expose more of these interfaces with first-class APIs, but that doesn't preclude that we will always want to use this one in this way (and less API surface area for common things is better for API stability and evolution).
    * I struggled to find an appropriate way to test it since we don't link the test dialect into anything CAPI accessible at present. I opted instead for one of the simplest ops I found in a regular dialect which implements the interface.
--
Date:   Fri Jan 22 21:55:34 2021 +0100

    [InstSimplify] Add willreturn to more libcall tests (NFC)
    
    Annotate more math libcalls with willreturn. The attribute would
    have been added by the InferFuncAttrs.

commit 430d43e010bdd07d73c4d0d6536206d22d35a2cb
Author: MaheshRavishankar <ravishankarm@google.com>
Date:   Fri Jan 22 12:53:27 2021 -0800

--
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Fri Jan 22 21:06:06 2021 +0100

    [Tests] Add willreturn to libcalls in some tests
    
    Willreturn would be inferred by FuncAttrs for these. Annotate them
    to preserve test behavior in the future.

commit 42d682a217b6e04318d11d374e29d7d94ceaed1f
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Fri Jan 22 10:47:10 2021 -0800
--

commit 65fd034b95d69fa0e634861ee165b502ceb92a12
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Wed Jan 13 21:56:08 2021 +0100

    [FunctionAttrs] Infer willreturn for functions without loops
    
    If a function doesn't contain loops and does not call non-willreturn
    functions, then it is willreturn. Loops are detected by checking
    for backedges in the function. We don't attempt to handle finite
    loops at this point.
--
      * separately for every input file (we might be compiling multiple
        Fortran files, some in free form, some in fixed form)
    In other words, we need this to happen early (before any
    `FrontendAction`), but not too early (we need to know what the current
    input file is). In practice, `isFixedForm` can only be set later
    than other options (other options are inferred from compiler flags). So
    we can't really set all of them in one place, which is not ideal.
    
    All changes in this patch are NFCs (hence no new tests). Quick summary:
      * move fixed/free form detection from `FrontendAction::ExecuteAction` to
        `CompilerInstance::ExecuteAction`
--
    duplicated call is actually a huge function which gets inlined
    during LTO.
    
    From the perspective of LV, not much should change overall. Most loops
    calling user-provided functions won't get vectorized to start with
    (unless we can infer that the function does not touch memory, has no
    other side effects). If we do not inline the 'inline-able' call during
    the LTO stage, we merely delayed loop-rotation & vectorization. If we
    inline during LTO, chances should be very high that the inlined code is
    itself vectorizable or the user call was not vectorizable to start with.
    
--

commit e6d758de82b6f93f81e71617aeb5a37e57d6ada9
Author: Florian Hahn <flo@fhahn.com>
Date:   Mon Jan 18 13:40:21 2021 +0000

    [InferAttrs] Mark some library functions as willreturn.
    
    This patch marks some library functions as willreturn. On the first pass, I
    excluded most functions that interact with streams/the filesystem.
    
    Along with willreturn, it also adds nounwind to a set of math functions.
--

commit c23e34e606bf23ee8d4060469ecebe0f7971c5dd
Author: Florian Hahn <flo@fhahn.com>
Date:   Thu Jan 14 12:55:17 2021 +0000

    [InferFunctionAttrs] Improve CHECK variable names (NFC).

commit a1bbd1ef1dbd2a39777ef0b2d623f15f0523cdbf
Author: Andrzej Warzynski <andrzej.warzynski@arm.com>
Date:   Mon Jan 11 16:16:29 2021 +0000

--
    
    Linux systems can be configured (and most of them are configured that
    way) to disable attaching to unrelated processes, /unless/ those
    processes explicitly allow that.
    
    Our test inferiors do that by explicitly calling prctl(PR_SET_PTRACER,
    PR_SET_PTRACER_ANY) (a.k.a., lldb_enable_attach). This requires
    additional synchronization to ensure that the test does not attempt
    attach before that statement is executed.
    
    This is working fine (albeit cumbersome) for most tests but
    TestGdbRemoteAttachWait is special in that it wants to start the
    inferior _after_ issuing the attach request. This means that the usual
    synchronization method does not work.
    
    This patch introduces a different solution -- enable attaching in the
    test harness, before the process is launched. Besides fixing this
    problem, this is also better because it avoids the need to add special
--
    
    This change extends virtual unwinder to support pseudo probe in llvm-profgen. Please refer https://groups.google.com/g/llvm-dev/c/1p1rdYbL93s and https://reviews.llvm.org/D89707 for more context about CSSPGO and llvm-profgen.
    
    **Implementation**
    
    - Added `ProbeBasedCtxKey` derived from `ContextKey` for sample counter aggregation. As we need string splitting to infer the profile for callee function, string based context introduces more string handling overhead, here we just use probe pointer based context.
    - For linear unwinding, as inline context is encoded in each pseudo probe, we don't need to go through each instruction to extract range sharing same inliner. So just record the range for the context.
    - For probe based context, we should ignore the top frame probe since it will be extracted from the address range. we defer the extraction in `ProfileGeneration`.
    - Added `PseudoProbeProfileGenerator` for pseudo probe based profile generation.
    - Some helper function to get pseduo probe info(call probe, inline context) from profiled binary.
    - Added regression test for unwinder's output
--

commit 08d4a50467ecef1337f8d7d9763c7738861bd6f6
Author: Florian Hahn <flo@fhahn.com>
Date:   Mon Jan 11 16:33:22 2021 +0000

    [FunctionAttrs] Precommit tests for willreturn inference.
    
    Tests for D94502.

commit a14040bd4d902419b53cf0ad576caa0f01eccf5c
Author: Craig Topper <craig.topper@sifive.com>
--
Date:   Mon Jan 11 11:55:00 2021 -0800

    [mlir][TypeDefGen] Add support for adding builders when generating a TypeDef
    
    This allows for specifying additional get/getChecked methods that should be generated on the type, and acts similarly to how OpBuilders work. TypeBuilders have two additional components though:
    * InferredContextParam
      - Bit indicating that the context parameter of a get method is inferred from one of the builder parameters
    * checkedBody
      - A code block representing the body of the equivalent getChecked method.
    
    Differential Revision: https://reviews.llvm.org/D94274

--

commit 8b124c19f52cb8ed0236b602df56787553e1e1b6
Author: Aart Bik <ajcbik@google.com>
Date:   Tue Jan 5 13:29:28 2021 -0800

    [mlir][sparse] adjust output shape inference to new tensor abstraction
    
    Nicolas changed the tensor abstraction so that every output has
    its own shape definition. This simplifies the "inference" that
    was used in the sparse compiler.
    
    Reviewed By: penpornk
    
    Differential Revision: https://reviews.llvm.org/D94119
--

commit 8cf1cc578d3288f5b9cfe1584e524f8b1517dc97
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Tue Dec 29 22:58:14 2020 -0800

    [FuncAttrs] Infer noreturn
    
    A function is noreturn if all blocks terminating with a ReturnInst
    contain a call to a noreturn function. Skip looking at naked functions
    since there may be asm that returns.
    
--
    and reports the following situations:
      * parameter is called twice
      * parameter is never called
      * parameter is not called on one of the paths
    
    Current implementation can also automatically infer `called_once`
    attribute for completion handler paramaters that should follow the
    same principle by convention.  This behavior is OFF by default and
    can be turned on by using `-Wcompletion-handler`.
    
    Differential Revision: https://reviews.llvm.org/D92039
--

    Move -fno-semantic-interposition dso_local logic from TargetMachine to Clang CodeGenModule
    
    This simplifies TargetMachine::shouldAssumeDSOLocal and and gives frontend the
    decision to use dso_local. For LLVM synthesized functions/globals, they may lose
    inferred dso_local but such optimizations are probably not very useful.
    
    Note: the hasComdat() condition in canBenefitFromLocalAlias (D77429) may be dead now.
    (llvm/CodeGen/X86/semantic-interposition-comdat.ll)
    (Investigate whether we need test coverage when Fuchsia C++ ABI is clearer)

--

commit c2ef06d3dd09d4e4e9665ca9f61e7672ad937827
Author: Arthur Eubanks <aeubanks@google.com>
Date:   Mon Dec 28 13:07:46 2020 -0800

    [NewPM] Port infer-address-spaces
    
    And add it to the AMDGPU opt pipeline.
    
    Reviewed By: arsenm
    
--
Author: Craig Topper <craig.topper@sifive.com>
Date:   Mon Dec 21 15:16:57 2020 -0800

    [RISCV] Use more precise type constraints for the vmv.v.v and vmv.v.x intrinsics.
    
    We can infer the input type from the result type. For vmv.v.v its
    the same. For vmv.v.x its the element type.

commit 704981b43736b2b9788cff0cf493d8b77ce380f5
Author: Craig Topper <craig.topper@sifive.com>
Date:   Mon Dec 21 14:59:45 2020 -0800
--
Author: Pavel Labath <pavel@labath.sk>
Date:   Thu Dec 17 14:17:03 2020 +0100

    [lldb-vscode] Speculative fix for raciness in TestVSCode_attach
    
    The test appears to expect the inferior to be stopped, but the custom
    "attach commands" leave it in a running state.
    
    It's unclear how this could have ever worked.

commit eb4917d121e21aaf8406efe3d5e4f1f06cb7c238
--

commit 541e476fc0682e71d70f6cfc7a42592910acf2a5
Author: Craig Topper <craig.topper@sifive.com>
Date:   Wed Dec 16 20:55:23 2020 -0800

    [RISCV] Infer mask type from data type for vector vle and vse intrinsics.
    
    The mask type should have the same number of elements as the data
    type.
    
    Similar to D93409 which did this for arithmetic intrinsics.
--

commit 0d7dd026c89baa3f8542ae267d26f55fada36717
Author: Craig Topper <craig.topper@sifive.com>
Date:   Wed Dec 16 20:04:48 2020 -0800

    [RISCV] Infer mask type for vector intrinsics from the data type
    
    We can use LLVMScalarOrSameVectorWidth<0, llvm_i1_ty> to infer the mask type from the anyvector_ty. This will save us from needing to pass it to getDeclaration when creating these intrinsics from clang.
    
    No tests updates are needed because our declarations are exploiting a behavior in the IR parser where the declaration of an intrinsic doesn't need to mention all the types as long as there isn't a name conflict in the file.
    
    Reviewed By: khchen
    
--

commit 2fc2e6de8222ae44fc4fd44fb31238b4a8cc990c
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Tue Dec 15 13:46:09 2020 +0700

    [Test] Test on assertion failure with expensive SCEV range inference

commit ddc5a5920e5d00336ee12f9c4682969ac18bca7f
Author: Kazu Hirata <kazu@google.com>
Date:   Mon Dec 14 22:40:13 2020 -0800

--

commit d6f5e08199f6454b488814b618aaf17b4a49c8bf
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Wed Dec 9 18:39:29 2020 -0800

    [lldb] Kill the inferior instead of detaching during test suite runs
    
    Kill (rather than detach) form the inferior if debugserver loses its
    connection to lldb to prevent zombie processes.
    
    Differential revision: https://reviews.llvm.org/D92908

commit fc3942526f5c048759e90d10289ecef75410f728
--

    [RISCV] Replace custom isel code for RISCVISD::READ_CYCLE_WIDE with isel pattern
    
    This node returns 2 results and uses a chain. As long as we use a DAG as part of the pseudo instruction definition where we can use the "set" operator, it looks like tablegen can handle use a pattern for this without a problem. I believe the original implementation was copied from PowerPC.
    
    This also fixes the pseudo instruction so that it is marked as having side effects to match the definition of CSRRS and the RV64 instruction. And we don't need to explicitly clear mayLoad/mayStore since those can be inferred now.
    
    Differential Revision: https://reviews.llvm.org/D92786

commit 1821265db681cd2289fce9331e3aed26bdf814e3
Author: Yuanfang Chen <yuanfang.chen@sony.com>
--
    A breakdown of noteworthy changes:
    - Added `HybridSample` class as the abstraction perf sample including LBR stack and call stack
    * Extended `PerfReader` to implement auto-detect whether input perf script output contains CS profile, then do the parsing. Multiple `HybridSample` are extracted
    * Speed up by aggregating  `HybridSample` into `AggregatedSamples`
    * Added VirtualUnwinder that consumes aggregated  `HybridSample` and implements unwinding of calls, returns, and linear path that contains implicit call/return from inlining. Ranges and branches counters are aggregated by the calling context.  Here calling context is string type, each context is a pair of function name and callsite location info, the whole context is like `main:1 @ foo:2 @ bar`.
    * Added PorfileGenerater that accumulates counters by ranges unfolding or branch target mapping, then generates context-sensitive function profile including function body, inferring callee's head sample, callsite target samples, eventually records into ProfileMap. 
    * Leveraged LLVM build-in(`SampleProfWriter`) writer to support different serialization format with no stop
    - `getCanonicalFnName` for callee name and name from ELF section
    - Added regression test for both unwinding and profile generation
    
    Test Plan:
--
Author: Pavel Labath <pavel@labath.sk>
Date:   Sun Dec 6 20:39:38 2020 +0100

    [lldb/test] Simplify TestLldbGdbServer.py
    
    Reuse existing code to start server+inferior.

commit ce279e0c80eb3af913bc2cd08c2bcf4632252675
Author: Pavel Labath <pavel@labath.sk>
Date:   Sun Dec 6 20:37:55 2020 +0100

    [lldb/test] Simplify TestGdbRemoteExitCode.py
    
    Reuse the existing code to launch a debug server + inferior.

commit 78a57069b53a08d5aef98a8472fcfa73dbbc8771
Author: Martin Storsjö <martin@martin.st>
Date:   Sun Dec 6 22:28:33 2020 +0200

--

commit 245233423e466979e11b39cbed676903892d07f8
Author: Rahul Joshi <jurahul@google.com>
Date:   Thu Dec 3 16:18:11 2020 -0800

    [MLIR] Generate inferReturnTypes declaration using InferTypeOpInterface trait.
    
    - Instead of hardcoding the parameters and return types of 'inferReturnTypes', use the
      InferTypeOpInterface trait to generate the method declaration.
    - Fix InferTypeOfInterface to use fully qualified type for inferReturnTypes results.
    
    Differential Revision: https://reviews.llvm.org/D92585

commit ccd19d5cff1a4ed88c472277319f714b6156b339
Author: Buildbot for SYCL <bb-sycl@intel.com>
--

commit 6b043ecdb71bb0354cbd64d766cc21b7d20dca84
Author: Rahul Joshi <jurahul@google.com>
Date:   Tue Dec 1 11:19:59 2020 -0800

    [MLIR] Fix genTypeInterfaceMethods() to work correctly with InferTypeOpInterface
    
    - Change InferTypeOpInterface::inferResultTypes to use fully qualified types matching
      the ones generated by genTypeInterfaceMethods, so the redundancy can be detected.
    - Move genTypeInterfaceMethods() before genOpInterfaceMethods() so that the
      inferResultTypes method generated by genTypeInterfaceMethods() takes precedence
      over the declaration that might be generated by genOpInterfaceMethods()
    - Modified an op in the test dialect to exercise this (the modified op would fail to
      generate valid C++ code due to duplicate inferResultTypes methods).
    
    Differential Revision: https://reviews.llvm.org/D92414

commit 806a76c001233f2c70bf93c73fb955c64c1c080f
Author: Arthur Eubanks <aeubanks@google.com>
--
    
    Similar to D92113. Currently `clang -fstack-size-section -fno-unique-section-names`
    sets the linked-to symbol to the first `.text`, which is:
    
    * incorrect for COMDAT sections
    * inferior for non-COMDAT sections in -ffunction-sections mode (poor --gc-sections: .stack_sizes cannot be separately discarded)
    
    Note, if the section symbol can be referenced in more places (if the
    function begin symbol does not apply), we probably should consider
    defining a different BeginSymbol for sections with ",unique" linkage.
    
--
Date:   Thu Nov 19 19:13:39 2020 +0100

    [lldb] Fix incorrect error handling in  GDBRemoteCommunicationClient::SendGetSupportedTraceType
    
    GDBRemoteCommunicationClient::SendGetSupportedTraceType is checking whether the
    response is `!response.IsNormalResponse()` and infers from that that it is an error response.
    However, it could be either "unsupported" or "error". If we get an unsupported response,
    the code then tries to generate an llvm::Expected from the non-error response which then asserts.
    
    Debugserver doesn't implement `jLLDBTraceSupportedType`, so we get an unsupported response
    whenever this function is called on macOS.
--
Author: Ji Kim <jikimjikim@google.com>
Date:   Thu Nov 19 09:54:31 2020 +0100

    [mlir][TableGen] Support intrinsics with multiple returns and overloaded operands.
    
    For intrinsics with multiple returns where one or more operands are overloaded, the overloaded type is inferred from the corresponding field of the resulting struct, instead of accessing the result directly.
    
    As such, the hasResult parameter of LLVM_IntrOpBase (and derived classes) is replaced with numResults. TableGen for intrinsics also updated to populate this field with the total number of results.
    
    Reviewed By: ftynse
    
--
    
    The stop command is simple and invokes the new method Trace::StopTracingThread(thread).
    
    On the other hand, the start command works by delegating its implementation to a CommandObject provided by the Trace plugin. This is necessary because each trace plugin needs different options for this command. There's even the chance that a Trace plugin can't support live tracing, but instead supports offline decoding and analysis, which means that "thread trace dump instructions" works but "thread trace start" doest. Because of this and a few other reasons, it's better to have each plugin provide this implementation.
    
    Besides, I'm using the GetSupportedTraceType method introduced in D90490 to quickly infer what's the trace plug-in that works for the current process.
    
    As an implementation note, I moved CommandObjectIterateOverThreads to its header so that I can use it from the IntelPT plugin. Besides, the actual start and stop logic for intel-pt is not part of this diff.
    
    Reviewed By: clayborg
    
--

commit f375885ab86d1b3e82269725c8e9aa49f347b4a7
Author: Michael Liao <michael.hliao@gmail.com>
Date:   Sat Nov 7 06:47:57 2020 -0500

    [InferAddrSpace] Teach to handle assumed address space.
    
    - In certain cases, a generic pointer could be assumed as a pointer to
      the global memory space or other spaces. With a dedicated target hook
      to query that address space from a given value, infer-address-space
      pass could infer and propagate that to all its users.
    
    Differential Revision: https://reviews.llvm.org/D91121

commit 38621c45a8fe8ef6b96f4c92919f6fd35b15f3d6
Author: Kazushi (Jam) Marukawa <marukawa@nec.com>
--

commit f2710d4b576053d405af7a0e2a62ea06d5a978e3
Author: Nico Weber <thakis@chromium.org>
Date:   Mon Nov 16 15:23:02 2020 -0500

    lld/mach-o: Infer darwinnew from filename ld64.lld.darwinnew too
    
    `-flavor` is difficult to use through the clang driver since it
    must be the first argument.
    
    clang's `-fuse-ld=foo` looks for `ld64.foo` when targeting darwin,
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Mon Nov 16 10:51:31 2020 -0800

    [SCEV] Factor out part of wrap flag detection logic [NFC](try 2)
    
    This is a cut down version of 1ec6e1 which was reverted due to a compile time issue.  The key changes made from that patch: 1) only infer the flags needed along each path, 2) be careful to preserve order of checks, and 3) avoid computing NW flags at all since we need to prove the stronger property (does not cross 0) in the caller anyways.
    
    Assuming this doesn't trip regressions, I'm going to try weakening (1).  My end objective is to move flag inference into addrec construction.  If I can't weaken (1) without compile time impact, I'll have a problem.

commit d861cc0e4311ec193cea9aaa5cfdc2b55563222c
Author: Arnold Schwaighofer <aschwaighofer@apple.com>
Date:   Mon Nov 16 07:51:20 2020 -0800

--
    
    This change causes a significant compile-time regression:
    https://llvm-compile-time-tracker.com/compare.php?from=dd0b8b94d0796bd895cc998dd163b4fbebceb0b8&to=1ec6e1eb8a084bffae8a40236eb9925d8026dd07&stat=instructions
    
    I assume that this is due to the non-NFC part of the change, which
    now performs expensive nowrap inference even for nowrap flags that
    are not used by the particular code.

commit 581ebf44d28b3e12bab771737e508fde9d22b25e
Author: Vitaly Buka <vitalybuka@google.com>
Date:   Sat Nov 14 23:22:57 2020 -0800
--

    [hip] Remove the coercion on aggregate kernel arguments.
    
    - If an aggregate argument is indirectly accessed within kernels, direct
      passing results in unpromotable `alloca`, which degrade performance
      significantly. InferAddrSpace pass is enhanced in
      [D91121](https://reviews.llvm.org/D91121) to take the assumption that
      generic pointers loaded from the constant memory could be regarded
      global ones. The need for the coercion on aggregate arguments is
      mitigated.
    
--
    operand groups as the ODS specification, i.e. one group per each operand
    or result. Optional elements accept None but cannot be omitted. Variadic
    groups accept iterable objects and cannot be replaced with a single
    object.
    
    For some operations, it is possible to infer the result type given the
    traits, but most traits rely on inline pieces of C++ that we cannot
    (yet) forward to Python bindings. Since the Ops where the inference is
    possible (having the `SameOperandAndResultTypes` trait or
    `TypeMatchesWith` without transform field) are a small minority, they
    also require the result type to make the builder syntax more consistent.
    
    Reviewed By: stellaraccident
--

commit 89a1042b6ad5443935f1b542ee892bf420b061fd
Author: Jonas Paulsson <paulsson@linux.vnet.ibm.com>
Date:   Wed Nov 4 13:49:24 2020 +0100

    Make inferLibFuncAttributes() add SExt attribute on second arg to ldexp.
    
    This was missing as discovered by the SystemZ multistage bot:
    http://lab.llvm.org:8011/#/builders/8, where wrong code resulted when this
    extension was not performed.
    
--

commit 9e1409aa1e0bb1963757941cf4db539147614fbf
Author: Michał Górny <mgorny@moritz.systems>
Date:   Fri Nov 6 15:32:43 2020 +0100

    [lldb] [Process/FreeBSDRemote] Handle exec() from inferior
    
    Differential Revision: https://reviews.llvm.org/D90938

commit a7a447be0fa934505f0c423fb97b91a68c1cc715
Author: Georgii Rymar <grimar@accesssoftek.com>
--

commit 1776581be44a2efe232f7b1a03a564844d1728fd
Author: Max Kazantsev <mkazantsev@azul.com>
Date:   Fri Nov 6 14:23:44 2020 +0700

    [Test] Run test with expensive SE inference. NFC
    
    The planned changes require expensive inference to kick in

commit e38c8e7590a0a82be24f3bcc5b87736498f2cb07
Author: Yevgeny Rouban <yrouban@azul.com>
Date:   Fri Nov 6 13:11:08 2020 +0700

--
Author: Pavel Labath <pavel@labath.sk>
Date:   Fri Oct 30 14:24:21 2020 +0100

    [lldb/test] Remove a double debugserver launch in TestGdbRemoteGPacket
    
    Debug server is already launched by prep_debug_monitor_and_inferior. The
    second seems to have been benign so far, but after 8cc49bec2 this test
    started failing frequently on GreenDragon, and this is the only unusual
    thing about it.

commit a895a446bcde4d78572ced8ff0b559f476aa4274
--

commit 7a2abf5aca227e6382a3b4fe7c026bb620a544a8
Author: Dávid Bolvanský <david.bolvansky@gmail.com>
Date:   Thu Oct 29 19:14:55 2020 +0100

    [InferAttrs] Add nocapture/writeonly to string/mem libcalls
    
    One step closer to fix PR47644.
    
    Differential Revision: https://reviews.llvm.org/D89645

--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Oct 23 15:45:43 2020 -0400

    RegAlloc: Clear isSSA
    
    The MIR parser may infer SSA, so -run-pass=regallocgreedy would hit a
    verifier error after multiple vreg defs are added.

commit 39a555efc6fc70afc998e60b16d0b525ce75d147
Author: mdtoguchi <47896532+mdtoguchi@users.noreply.github.com>
Date:   Wed Oct 28 09:00:16 2020 -0700
--
Author: Alex Richardson <Alexander.Richardson@cl.cam.ac.uk>
Date:   Tue Oct 20 11:41:54 2020 +0100

    [ValueTracking] Add more tests for alignment assume bundles
    
    I noticed that alignment was no longer inferred as well after I last merged
    our CHERI fork from upstream. I opened this review before seeing that D88669
    already fixes the same problem, so this commit simply adds the new test that
    I added as part of this change.
    
    Reviewed By: jdoerfert
--
    As mentioned in the comment inside the code, the Intel documentation
    states that the internal CPU buffer is flushed out to RAM only when tracing is
    disabled. Otherwise, the buffer on RAM might be stale.
    
    This diff disables tracing when the trace buffer is going to be read. This is a
    quite safe operation, as the reading is done when the inferior is paused at a
    breakpoint, so we are not losing any packets because there's no code being
    executed.
    
    After the reading is finished, tracing is enabled back.
    
--
Date:   Tue Oct 20 16:08:47 2020 +0200

    [SYCL] Add `private_memory::operator()` support to xmethods (#2657)
    
    Allows to inspect values wrapped into private_memory<T> by evaluating
    `operator()` from GDB. Necessary for GPU devices where inferior calls
    are not supported, however Host implementation is also provided for
    completeness.
    
    Also slightly tweaks existing class naming scheme in the GDB python
    script.
--
    [SVE] Replace TypeSize comparison operators in llvm/utils/TableGen
    
    In CodeGenDAGPatterns.cpp we were relying upon TypeSize comparison
    operators for ordering types, when we can actually just use the known
    minimum size since the scalable property is already being taken into
    account. Also, in TypeInfer::EnforceSameSize I fixed some implicit
    TypeSize->uint64_t casts by changing the code to test the equality
    of TypeSize objects instead.
    
    In other places I have replaced calls to getSizeInBits() with
    getFixedSizeInBits() because we are only ever expecting integer values.
--

commit 65e94cc946b0109bc4e1150a9a46d104317cc940
Author: Dávid Bolvanský <david.bolvansky@gmail.com>
Date:   Sat Oct 17 22:23:39 2020 +0200

    [InferAttrs] Add argmemonly attribute to string libcalls
    
    Reviewed By: jdoerfert
    
    Differential Revision: https://reviews.llvm.org/D89602

--

commit 2a75e956e5ce7ea212333a86fe65fc68185cbf48
Author: Dávid Bolvanský <david.bolvansky@gmail.com>
Date:   Sat Oct 17 23:29:02 2020 +0200

    Revert "[InferAttrs] Add argmemonly attribute to string libcalls"
    
    This reverts commit b77dd32a6fcc53908aaffc065d4d5b05026ddda7. Sanitizer tests are broken.

commit b77dd32a6fcc53908aaffc065d4d5b05026ddda7
Author: Dávid Bolvanský <david.bolvansky@gmail.com>
Date:   Sat Oct 17 22:23:39 2020 +0200

    [InferAttrs] Add argmemonly attribute to string libcalls
    
    Reviewed By: jdoerfert
    
    Differential Revision: https://reviews.llvm.org/D89602

--
Author: Rob Suderman <rob.suderman@gmail.com>
Date:   Thu Oct 15 17:01:06 2020 -0700

    [MLIR] Fix gcc5 in D89161
    
    Missing .str() makes gcc5 unable to infer the template to use.
    
    Differential Revision: https://reviews.llvm.org/D89516

commit fc031d29bea856f2b91a250fd81c5f9fb79dbe07
Author: Richard Smith <richard@metafoo.co.uk>
--
      will of course continue to be exposed for power users.
    
    The naming on tensor_load/tensor_to_memref and their pretty forms are
    not very intuitive. I'm open to any suggestions here. One key
    observation is that the memref type must always be the one specified in
    the pretty form, since the tensor type can be inferred from the memref
    type but not vice-versa.
    
    With this, I've been able to replace all my custom bufferization type
    converters in npcomp with BufferizeTypeConverter!
    
--
    This also fixes a secondary problem where it was inserting
    addrspacecasts which may not have been legal (i.e. it changed the
    source address space). Start visiting all pointer users and fail out
    if we can't process them. Also start handling the relevant memory
    intrinsic users. These cases can be dealt with by running
    InferAddressSpaces separately.

commit 0728b67b2718c114eed0639a134c1e5c1c1eff13
Author: Louis Dionne <ldionne@apple.com>
Date:   Wed Oct 14 12:40:59 2020 -0400

--
Date:   Fri Oct 9 13:59:50 2020 +0200

    [lldb-server][linux] Add ability to allocate memory
    
    This patch adds support for the _M and _m gdb-remote packets, which
    (de)allocate memory in the inferior. This works by "injecting" a
    m(un)map syscall into the inferior. This consists of:
    - finding an executable page of memory
    - writing the syscall opcode to it
    - setting up registers according to the os syscall convention
    - single stepping over the syscall
    
--

commit f218652a36bdf0ecd842c30da7a3936dc6580e96
Author: Konstantin Zhuravlyov <kzhuravl_dev@outlook.com>
Date:   Tue Oct 13 11:54:30 2020 -0400

    LLD/AMDGPU: Infer os abi based on input llvm bitcode
    
    Differential Revision: https://reviews.llvm.org/D89042

commit e2eaa914514c26c8e51c76148996a2e9cf74613c
Author: Konstantin Zhuravlyov <kzhuravl_dev@outlook.com>
--
Date:   Mon Oct 12 11:45:33 2020 +0200

    [GlobalISel][KnownBits] Early return on out of bound shift amounts
    
    If the known shift amount is bigger than or equal to the bitwidth of the type of the value to be shifted,
    the result is target dependent, so don't try to infer any bits.
    
    This fixes a crash we've seen in one of our internal test suites.
    
    Reviewed By: arsenm
    
--
    that it contains `Elf32_Word` entries for both `32/64` bit objects.
    
    But there is a problem with `EM_S390` and `ELF::EM_ALPHA` platforms: they use 8-bytes entries.
    (see the issue reported: https://bugs.llvm.org/show_bug.cgi?id=47681).
    
    Currently we might infer the size of the dynamic symbols table from hash table,
    but because of the issue mentioned, the calculation is wrong. And also we don't dump the hash table
    properly.
    
    I am not sure if we want to support 8-bytes entries as they violates specification and also the
    `.hash` table is kind of deprecated by itself (the `.gnu.hash` table is used nowadays).
--

commit a0a6fd435c6066d40d9c20835f1e52aad1e8cc65
Author: Utkarsh Saxena <usx@google.com>
Date:   Thu Oct 8 13:13:40 2020 +0200

    [clangd] New CC Ranking Model to fix bad inference due to overflow.
    
    Unreachable file distances are represented as
    `std::numeric_limits<unsigned>::max()`.
    The previous dataset recorded the signals as `signed int` capturing this default
    value as `-1`.
--
Author: Utkarsh Saxena <usx@google.com>
Date:   Tue Sep 29 17:06:13 2020 +0200

    [clangd] Disable msan instrumentation for generated Evaluate().
    
    MSAN build times out for generated DecisionForest inference runtime.
    
    A solution worth trying is splitting the function into 300 smaller
    functions and then re-enable msan.
    
    For now we are disabling instrumentation for the generated function.
--

commit 9d7ec46f5740d7626171c2b8198f825176991e0a
Author: Jessica Paquette <jpaquette@apple.com>
Date:   Wed Sep 23 11:28:10 2020 -0700

    [AArch64][GlobalISel] Infer whether G_PHI is going to be a FPR in regbankselect
    
    Some instructions (G_LOAD, G_SELECT, G_UNMERGE_VALUES) check if their uses
    will define/use FPRs (using `onlyUsesFP` and `onlyDefinesFP`).
    
    The register bank of a use isn't necessarily known when an instruction asks for
--

    Revert "Temporarily Revert "[clangd] Add Random Forest runtime for code completion.""
    
    We intend to replace heuristics based code completion ranking with a Decision Forest Model.
    
    This patch introduces a format for representing the model and an inference runtime that is code-generated at build time.
    - Forest.json contains all the trees as an array of trees.
    - Features.json describes the features to be used.
    - Codegen file takes the above two files and generates CompletionModel containing Feature struct and corresponding Evaluate function.
       The Evaluate function maps a feature to a real number describing the relevance of this candidate.
    - The codegen is part of build system and these files are generated at build time.
--

commit 7d6ca2ec57073b9eabe6808ff1fe0560586c5ffb
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Sep 15 13:46:23 2020 -0400

    InferAddressSpaces: Fix assert with unreachable code
    
    Invalid IR in unreachable code is technically valid IR. In this case,
    the address space of the value was never inferred, and we tried to
    rewrite it with an invalid address space value which would assert.

commit f1a3ab904439a63b21ba1c4521765c46630687c6
Author: Snehasish Kumar <snehasishk@google.com>
Date:   Wed Sep 2 11:00:46 2020 -0700
--

commit 7df873f9c67099a209f0122a1f5411e701a9d425
Author: Georgii Rymar <grimar@accesssoftek.com>
Date:   Tue Sep 1 11:11:34 2020 +0300

    [llvm-readobj/elf] - Don't crash when the size of s dynamic symbol table, inferred from the hash table, is broken.
    
    Currently we might derive the dynamic symbol table size from the DT_HASH hash table (using its `nchain` field).
    It is possible to crash dumpers with a broken relocation that refers to a symbol with an index
    that is too large. To trigger it, the inferred size of the dynamic symbol table should go past the end of the object.
    
    This patch adds a size validation + warning.
    
    Differential revision: https://reviews.llvm.org/D86923

--
Author: Eric Astor <epastor@google.com>
Date:   Mon Sep 14 14:25:39 2020 -0400

    [ms] [llvm-ml] Add support for size queries in MASM
    
    Add support for size inference, sizeof, typeof, and lengthof.
    
    Reviewed By: thakis
    
    Differential Revision: https://reviews.llvm.org/D86947

--
Date:   Thu Sep 10 22:04:58 2020 -0700

    [mlir] Fix some edge cases around 0-element TensorFromElementsOp
    
    This introduces a builder for the more general case that supports zero
    elements (where the element type can't be inferred from the ValueRange,
    since it might be empty).
    
    Also, fix up some cases in ShapeToStandard lowering that hit this. It
    happens very easily when dealing with shapes of 0-D tensors.
    
--
    
    Currently only 2 options are supported: `-help` and `--version`.
    
    `flang-new` is implemented in terms of libclangDriver, defaulting the driver
    mode to `FlangMode` (added to libclangDriver in [4]). This ensures that the
    driver runs in Flang mode regardless of the name of the binary inferred from
    argv[0].
    
    The design of the new Flang compiler and frontend drivers is inspired by it
    counterparts in Clang [3]. Currently, the new Flang compiler and frontend
    drivers re-use Clang libraries: clangBasic, clangDriver and clangFrontend.
--

commit d95ef009bd502a1c2c82952d4fa6fd1db836cef9
Author: Azharuddin Mohammed <azhar@apple.com>
Date:   Tue Sep 8 10:57:06 2020 -0700

    Update clang/test/Driver/darwin-infer-simulator-sdkroot.c
    
     - Fix it to work on Apple Silicon
     - Add testcases for simulators running on Apple Silicon

commit f6b87da0c73fcf7f8f051151ce62d2e07a466a8e
--
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Sun Sep 6 23:14:05 2020 +0200

    [ValueTracking] Avoid known bits fallback for non-zero get check (NFCI)
    
    The known bits fall back will never be able to infer a non-null
    value here, so don't bother.

commit 8542dab909f895a8b6812428bb5e1acf7ea15305
Author: Brad Smith <brad@comstyle.com>
Date:   Sun Sep 6 15:54:24 2020 -0400
--

commit ee679638d75ca9a7f7d7be728fa069606dcc8ec7
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Sun Jun 28 11:34:42 2020 -0400

    MIR: Infer not-SSA for subregister defs
    
    It's possible to have a single virtual register def with a subreg
    index that would pass the previous check, but it's not possible to
    have a subregister def in SSA.
    
--
Date:   Wed Aug 26 20:34:36 2020 +0800

    [DWARFYAML] Make the unit_length and header_length fields optional.
    
    This patch makes the unit_length and header_length fields of line tables
    optional. yaml2obj is able to infer them for us.
    
    Reviewed By: jhenderson
    
    Differential Revision: https://reviews.llvm.org/D86590

--

commit 6a3c69e918b13482f2f8492ddd3a79ccdcb70f76
Author: Thomas Raoux <thomasraoux@google.com>
Date:   Tue Aug 25 23:19:09 2020 -0700

    [mlir][spirv] Infer converted type of scf.for from the init value
    
    Instead of using the TypeConverter infer the value of the alloca created based
    on the init value. This will allow some ambiguous types like multidimensional
    vectors to be converted correctly.
    
    Differential Revision: https://reviews.llvm.org/D86582

--
    #2  0x0000000804916229 in abort () at /usr/src/lib/libc/stdlib/abort.c:67
    #3  0x000000000451b5f5 in fatalUncheckedError () at /usr/src/contrib/llvm-project/llvm/lib/Support/Error.cpp:112
    #4  0x00000000019cf008 in GetEntryPointAddress () at /usr/src/contrib/llvm-project/llvm/include/llvm/Support/Error.h:267
    #5  0x0000000001bccbd8 in ConstructorSetup () at /usr/src/contrib/llvm-project/lldb/source/Target/ThreadPlanCallFunction.cpp:67
    #6  0x0000000001bcd2c0 in ThreadPlanCallFunction () at /usr/src/contrib/llvm-project/lldb/source/Target/ThreadPlanCallFunction.cpp:114
    #7  0x00000000020076d4 in InferiorCallMmap () at /usr/src/contrib/llvm-project/lldb/source/Plugins/Process/Utility/InferiorCallPOSIX.cpp:97
    #8  0x0000000001f4be33 in DoAllocateMemory () at /usr/src/contrib/llvm-project/lldb/source/Plugins/Process/FreeBSD/ProcessFreeBSD.cpp:604
    #9  0x0000000001fe51b9 in AllocatePage () at /usr/src/contrib/llvm-project/lldb/source/Target/Memory.cpp:347
    #10 0x0000000001fe5385 in AllocateMemory () at /usr/src/contrib/llvm-project/lldb/source/Target/Memory.cpp:383
    #11 0x0000000001974da2 in AllocateMemory () at /usr/src/contrib/llvm-project/lldb/source/Target/Process.cpp:2301
    #12 CanJIT () at /usr/src/contrib/llvm-project/lldb/source/Target/Process.cpp:2331
--
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Mon Aug 17 11:45:35 2020 -0700

    [lldb] Skip test_launch_simple with reproducers
    
    The test checks the inferior's output. During replay the binary doesn't
    actually run and the output isn't captured by the reproducers.

commit 0f14b2e6cbb54c84ed3b00b0db521f5ce2d1e3f2
Author: Dávid Bolvanský <david.bolvansky@gmail.com>
Date:   Mon Aug 17 20:42:57 2020 +0200
--
Date:   Fri Aug 14 08:32:21 2020 -0700

    [lldb] Use file to synchronize TestDeepBundle and TestBundleWithDotInFilename
    
    Currently these two tests use an arbitrary wait of 5 seconds for the
    inferior to finish setting up. When the test machine is under heavy load
    this sometimes is insufficient leading to spurious test failures. This
    patch adds synchronization trough a token on the file system. In
    addition to making the test more reliable it also makes it much faster
    because we no longer have to wait the full 5 seconds if the setup was
    completed faster than that.
--
Date:   Wed Aug 12 21:47:27 2020 +0800

    [DWARFYAML] Make the address size of compilation units optional.
    
    This patch makes the 'AddrSize' field optional. If the address size is
    missing, yaml2obj will infer it from the object file.
    
    Reviewed By: jhenderson
    
    Differential Revision: https://reviews.llvm.org/D85805

--
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Tue Aug 11 12:47:54 2020 -0700

    [lldb] Fix the last remaining tests not inheriting TCC permissions
    
    After this patch all test should have the inferior inheriting the TCC
    permissions from its parent.

commit e74e8b2b6957b4613b0fef2a964d40313074f435
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Tue Aug 11 22:40:08 2020 +0300
--

commit 1d4bc08ce43c8e2f07df3aa22a0787907750bf88
Author: Xing GUO <higuoxing@gmail.com>
Date:   Tue Aug 11 22:41:14 2020 +0800

    [DWARFYAML] Let the address size of line tables inferred from the object file.
    
    Currently, the line table uses the first compilation unit's address size
    as its address size. It's not the right behavior. The address size should be
    inferred from the target machine.
    
    Reviewed By: jhenderson
    
    Differential Revision: https://reviews.llvm.org/D85707

--

commit 13d05787d0d2dfdfd81939c2e5c41b6a913f5619
Author: Rahul Joshi <jurahul@google.com>
Date:   Fri Aug 7 14:02:19 2020 -0700

    [MLIR][TableGen] Fix ambiguous build methods when inferring result types.
    
    - Fix ODS framework to suppress build methods that infer result types and are
      ambiguous with collective variants. This applies to operations with a single variadic
      inputs whose result types can be inferred.
    - Extended OpBuildGenTest to test these kinds of ops.
    
    Differential Revision: https://reviews.llvm.org/D85060

commit 3162c6aa4587d5161008d2b9729b5f2873b0fff9
--
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Wed Aug 5 10:02:51 2020 -0700

    [lldb] Add an option to inherit TCC permissions from parent.
    
    Add an option that allows the user to decide to not make the inferior is
    responsible for its own TCC permissions. If you don't make the inferior
    responsible, it inherits the permissions of its parent. The motivation
    is the scenario of running the LLDB test suite from an external hard
    drive. If the inferior is responsible, every test needs to be granted
    access to the external volume. When the permissions are inherited,
    approval needs to be granted only once.
    
    Differential revision: https://reviews.llvm.org/D85237

--
    D68041 placed `__profc_`,  `__profd_` and (if exists) `__profvp_` in different comdat groups.
    There are some issues:
    
    * Cost: one or two additional section headers (`.group` section(s)): 64 or 128 bytes on ELF64.
    * `__profc_`,  `__profd_` and (if exists) `__profvp_` should be retained or
      discarded. Placing them into separate comdat groups is conceptually inferior.
    * If the prevailing group does not include `__profvp_` (value profiling not
      used) but a non-prevailing group from another translation unit has `__profvp_`
      (the function is inlined into another and triggers value profiling), there
      will be a stray `__profvp_` if --gc-sections is not enabled.
      This has been fixed by 3d6f53018f845e893ad34f64ff2851a2e5c3ba1d.
--
    introduces operations for arbitrary precision floating point numbers.
    The hls_float datatype is represented as a pseudo type using
    OpTypeInt. Its parameters are:
    * W - width of the datatype. It's encoded in the width of the OpTypeInt.
    * E - represents the number of exponent bits. Exponent values
          are inferred from the width of corresponding variable.
    * M - represents the number of mantissa bits.
    The total width W is equal to `E+M+1` where the last bit is used to
    represent the sign.
    
    Full specification (intel/llvm#1934):
--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Thu Jul 23 21:11:46 2020 -0400

    AMDGPU: Serialize MFI spill fields
    
    These should probably be inferred from the function on parse, but the
    target specific infrastructure currently does not give you a way to do
    this. SILowerSGPRSpills early exits without this reporting spills,
    which makes it difficult to write a MIR test for.

commit cc4845a09d82b73aac53fbbb0759a4b2c9fd7237
--
Date:   Thu Jul 23 10:20:54 2020 -0700

    [mlir][Linalg] Fixing bug in subview size computation in Linalg tiling.
    
    The `makeTiledViews` did not use the sizes of the tiled views based on
    the result of the loop bound inference computation. This manifested as
    an error in computing tile sizes with convolution where not all the
    result expression of concatenated affine maps are simple
    AffineDimExpr.
    
    Differential Revision: https://reviews.llvm.org/D84366
--

commit 92874d286695d2233a3fc526b07896c3676ec1d3
Author: Xing GUO <higuoxing@gmail.com>
Date:   Thu Jul 23 23:00:19 2020 +0800

    [DWARFYAML] Refactor emitDebugInfo() to make the length be inferred.
    
    This patch refactors `emitDebugInfo()` to make the length field be
    inferred from its content. Besides, the `Visitor` class is removed in
    this patch. The original `Visitor` class helps us determine an
    appropriate length and emit the .debug_info section. These two
    processes can be merged into one process. Besides, the length field
    should be inferred when it's missing rather than when it's zero.
    
    Reviewed By: jhenderson, labath
    
    Differential Revision: https://reviews.llvm.org/D84008

--

commit e4dd964df0164651f1804612ad41582fb801607f
Author: Jakub Lichman <limo@google.com>
Date:   Thu Jul 23 10:58:21 2020 +0200

    [mlir] Loop bounds inference in linalg.generic op improved to support bounds for convolution
    
    Loop bound inference is right now very limited as it supports only permutation maps and thus
    it is impossible to implement convolution with linalg.generic as it requires more advanced
    loop bound inference. This commits solves it for the convolution case.
    
    Depends On D83158
    
    Differential Revision: https://reviews.llvm.org/D83191

--
    intrinsics. Having target specific code in general passes was noted as
    an area for improvement for a long time.
    
    D81728 moves most target specific code out of the InstCombine pass.
    Applying the target specific combinations in an extra pass would
    probably result in inferior optimizations compared to the current
    fixed-point iteration, therefore the InstCombine pass resorts to newly
    introduced functions in the TargetTransformInfo when it encounters
    unknown intrinsics.
    The patch should not have any effect on generated code (under the
    assumption that code never uses intrinsics from a foreign target).
--

    [lldb/test] Delete result formatter machinery entirely
    
    After more investigation, I realised this part of the code is totally
    unused. It was used for communicating the test results from the
    "inferior" dotest process to the main "dosep" process running
    everything. Now that everything is being orchestrated through lit, this
    is not used for anything.

commit bef56f7fe2382ed1476aa67a55626b364635b44e
Author: Sander de Smalen <sander.desmalen@arm.com>
--
Author: Florian Hahn <flo@fhahn.com>
Date:   Tue Jul 21 10:01:42 2020 +0100

    [SCCP] Add range metadata to call sites with known return ranges.
    
    If we inferred a range for the function return value, we can add !range
    at all call-sites of the function, if the range does not include undef.
    
    Reviewers: efriedma, davide, nikic
    
    Reviewed By: efriedma
--
    adaptor-wrapped user passes from the text pipeline interface which is needed
    by D82344 test cases. This also seems useful in general. See comments above
    `parsePassPipeline`.
    
    The syntax would be like mixing passes of different types, but it is
    not the same as inferring the correct pass type and then adding the
    matching nested pass managers. Strictly speaking, the resulted pipelines
    are different.
    
    Reviewed By: asbirlea, aeubanks
    
--
    `[ S (sign bit) ][ E (Exponent) ][ M (Mantissa) ]`
    
    The width of the data `(E+M+1)` is encoded with the width of the
    arbitrary precision integer variable. Mantissa (namely `M`) is encoded
    within each of the signature of the operations. Exponent values
    (namely `E`) are inferred from the width of corresponding variable.
    
    Usage example:
      _ExtInt(Wa) a;
      _ExtInt(Wb) b;
      _ExtInt(Wout) res = __spirv_ArbitraryFloatAddINTEL<Wa, Wb, Wout>(a, Ma, b, Mb, Mout);
--
    LLDB can get the images from the target process memory though.
    
    This has 2 consequences:
     - LLDB cannot load the images before the process starts, reporting
       an error if someone tries to break on a system symbol.
     - Loading the symbols by downloading the data from the inferior
       is super slow. It takes tens of seconds at the start of the
       debug session to populate the Module list.
    
    To fix this, we can use the library images LLDB has in its own
    mapping of the shared cache. Shared cache images are somewhat
--

commit 0c3c76311a148653a01a4f20d946b02cb8ac298b
Author: John Pennycook <john.pennycook@intel.com>
Date:   Thu Jul 16 05:59:55 2020 -0700

    [SYCL] Infer IdT in GroupBroadcast from group type (#2115)
    
    - Work-group => any integral type
    - Sub-group => unsigned 32-bit integer
    
    Signed-off-by: John Pennycook <john.pennycook@intel.com>
--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Jun 8 21:32:39 2020 -0400

    GlobalISel: Verify G_BITCAST changes the type
    
    Updated the AArch64 tests the best I could with my vague, inferred
    understanding of AArch64 register banks. As far as I can tell, there
    is only one 32-bit/64-bit type which will use the gpr register bank,
    so we have to use the fpr bank for the other operand.

commit 7a5d79de9511e3e84aad2adb327b27c9069703ea
--
    Summary:
    Add support for user-defined types to MasmParser, including initialization and field access.
    
    Known issues:
    - Omitted entry initializers (e.g., <,0>) do not work consistently for nested structs/arrays.
    - Size checking/inference for values with known types is not yet implemented.
    - Some ml64.exe syntaxes for accessing STRUCT fields are not recognized.
      - `[<register>.<struct name>].<field>`
      - `[<register>[<struct name>.<field>]]`
      - `(<struct name> PTR [<register>]).<field>`
      - `[<variable>.<struct name>].<field>`
--
    Instead of detecting it automatically (in libc++) and relying on
    _LIBCXXABI_NO_EXCEPTIONS being set explicitly (in libc++abi), always
    detect whether exceptions are enabled automatically.
    
    This commit also removes support for specifying -D_LIBCPP_NO_EXCEPTIONS
    and -D_LIBCXXABI_NO_EXCEPTIONS explicitly -- those should just be inferred
    from using -fno-exceptions (or an equivalent flag).
    
    Allowing both -D_FOO_NO_EXCEPTIONS to be provided explicitly and trying
    to detect it automatically is just confusing, especially since we did
    specify it explicitly when building libc++abi. We should have only one
--

    [LVI][CVP] Handle (x | y) < C style conditions
    
    InstCombine may convert conditions like (x < C) && (y < C) into
    (x | y) < C (for some C). This patch teaches LVI to recognize that
    in this case, it can infer either x < C or y < C along the edge.
    
    This fixes the issue reported at
    https://github.com/rust-lang/rust/issues/73827.
    
    Differential Revision: https://reviews.llvm.org/D82715
--
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Mon Jun 29 16:40:52 2020 -0700

    [ods] Update Operator to record Arg->[Attr|Operand]Index mapping
    
    Also fixed bug in type inferface generator to address bug where operands and
    attributes are interleaved.
    
    Differential Revision: https://reviews.llvm.org/D82819

commit 9b04d69ccefb57ec202a0ecdb36a84ed0568aead
--
Author: Craig Topper <craig.topper@intel.com>
Date:   Sun Jun 28 11:06:40 2020 -0700

    [X86] Explicitly add popcnt feature to Intel CPUs with SSE4.2 in the frontend.
    
    Previously we inferred it if sse4.2 ended up being enabled after
    all feature processing. But writing -march=nehalem -mno-sse4.2
    should have popcnt enabled.

commit b07feef8736d52e11c41631d3813a57a3b3ce6e5
Author: cgyurgyik <gyurgyikcp@gmail.com>
--

commit dccfaacf93e1c4801cbcc4686f64eb8a35564ff7
Author: Michael Liao <michael.hliao@gmail.com>
Date:   Tue Jun 16 00:08:16 2020 -0400

    [InferAddressSpaces] Handle the pair of `ptrtoint`/`inttoptr`.
    
    Summary:
    - `ptrtoint` and `inttoptr` are defined as no-op casts if the integer
      value as the same size as the pointer value. The pair of
      `ptrtoint`/`inttoptr` is in fact a no-op cast sequence between
      different address spaces. Teach `infer-address-spaces` to handle them
      like a `bitcast`.
    
    Reviewers: arsenm, chandlerc
    
    Subscribers: jvesely, wdng, nhaehnle, hiraditya, kerbowa, cfe-commits, llvm-commits
--

commit 31c40f2d6bcf5945da76cda70c088399adb1b3cb
Author: Craig Topper <craig.topper@intel.com>
Date:   Tue Jun 23 23:40:01 2020 -0700

    [X86] Add mayLoad/mayStore flags to some X87 instructions that don't have isel patterns to infer them from.
    
    Should remove part of the differences in D81833 due to some
    some of these getting isel patterns.

commit 6507bc56216ba4441790bc581a5b76d9c2ad9774
--
    [vscode] set default values for terminateDebuggee for the disconnect request
    
    Summary:
    Recently I've noticed that VSCode sometimes doesn't send the terminateDebuggee flag within the disconnectRequest,
    even though lldb-vscode sets the terminateDebuggee capability correctly.
    This has been causing that inferiors don't die after the debug session ends, and many users have reported issues because of this.
    
    An easy way to mitigate this is to set better default values for the terminateDebuggee field in the disconnect request.
    I'm assuming that for a launch request, the default will be true, and for attach it'll be false.
    
    Reviewers: clayborg, labath, aadsm
--
Date:   Tue Jun 16 17:46:22 2020 -0700

    [builtins][test] Delete unneeded file headers
    
    We don't add file headers to tests. The comments are useless as well -
    their purpose can be easily inferred from the filenames.

commit 4a1776979fd8e9473e433d7ec6f2bbf4bf9523ff
Author: Jun Ma <JunMa@linux.alibaba.com>
Date:   Tue Jun 16 14:30:36 2020 +0800

--
    
    Summary:
    This revision replaces MatmulOp, now that DRR rules have been dropped.
    This revision also fixes minor parsing bugs and a plugs a few holes to get e2e paths working (e.g. library call emission).
    
    During the replacement the i32 version had to be dropped because only the EDSC operators +, *, etc support type inference.
    
    Deciding on a type-polymorphic behavior, and implementing it, is left for future work.
    
    Reviewers: aartbik
    
--
    [mlir][Linalg] Retire C++ MatmulOp in favor of a linalg-ods-gen'd op.
    
    This revision replaces MatmulOp, now that DRR rules have been dropped.
    This revision also fixes minor parsing bugs and a plugs a few holes to get e2e paths working (e.g. library call emission).
    
    During the replacement the i32 version had to be dropped because only the EDSC operators +, *, etc support type inference.
    
    Deciding on a type-polymorphic behavior, and implementing it, is left for future work.
    
    Differential Revision: https://reviews.llvm.org/D79762

--

commit ff9c1ae213a2ed6a760659a30f8399ffd56dc9b0
Author: Xing GUO <higuoxing@gmail.com>
Date:   Sun Jun 14 12:00:46 2020 +0800

    [ObjectYAML][DWARF] Let the target address size be inferred from FileHeader.
    
    This patch adds a new field `bool Is64bit` in `DWARFYAML::Data` to indicate the address size of target. It's helpful for inferring the `AddrSize` in some DWARF sections.
    
    Reviewed By: MaskRay
    
    Differential Revision: https://reviews.llvm.org/D81709

--

commit 3c67b9516ae2b545e2b008ba6823c89eb64dc954
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Sat Jun 15 13:25:03 2019 -0400

    Make myself code owner of InferAddressSpaces
    
    The original author isn't active, and I've made most of the commits to
    it.

commit 6fe27b5fed92aca21386a1ec3d1e4aa70e82e9fa
--
Author: James Y Knight <jyknight@google.com>
Date:   Wed Feb 19 10:41:28 2020 -0500

    MachineBasicBlock::updateTerminator now requires an explicit layout successor.
    
    Previously, it tried to infer the correct destination block from the
    successor list, but this is a rather tricky propspect, given the
    existence of successors that occur mid-block, such as invoke, and
    potentially in the future, callbr/INLINEASM_BR. (INLINEASM_BR, in
    particular would be problematic, because its successor blocks are not
    distinct from "normal" successors, as EHPads are.)
--

commit 3b5d4aa258a0f7ccbd5c3ade4286dca8f5d2d984
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Sun May 31 14:19:46 2020 -0400

    GlobalISel: Infer nofpexcept flag during selection for non-strict ops
    
    Match SelectionDAG's behavior of adding nofpexcept to out instructions
    that may raise fp exceptions that are selected from instructions that
    do not.

--

    [mlir] Add verify method to adaptor
    
    This allows verifying op-indepent attributes (e.g., attributes that do not require the op to have been created) before constructing an operation. These include checking whether required attributes are defined or constraints on attributes (such as I32 attribute). This is not perfect (e.g., if one had a disjunctive constraint where one part relied on the op and the other doesn't, then this would not try and extract the op independent from the op dependent).
    
    The next step is to move these out to a trait that could be verified earlier than in the generated method. The first use case is for inferring the return type while constructing the op. At that point you don't have an Operation yet and that ends up in one having to duplicate the same checks, e.g., verify that attribute A is defined before querying A in shape function which requires that duplication. Instead this allows one to invoke a method to verify all the traits and, if this is checked first during verification, then all other traits could use attributes knowing they have been verified.
    
    It is a little bit funny to have these on the adaptor, but I see the adaptor as a place to collect information about the op before the op is constructed (e.g., avoiding stringly typed accessors, verifying what is possible to verify before the op is constructed) while being cheap to use even with constructed op (so layer of indirection between the op constructed/being constructed). And from that point of view it made sense to me.
    
    Differential Revision: https://reviews.llvm.org/D80842

--

commit b6020c330d3826aa542164842d6ba71fdee3650b
Author: Xing GUO <higuoxing@gmail.com>
Date:   Thu Jun 4 09:25:26 2020 +0800

    [ObjectYAML][ELF] Let the endianness of DWARF sections be inferred from FileHeader.
    
    This patch helps infer the endianness of DWARF sections from `FileHeader`.
    
    Reviewed By: jhenderson, grimar
    
    Differential Revision: https://reviews.llvm.org/D81051

--

commit 5b454b98d6488a27decbe7e21a361b2579376ec2
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Wed Jun 3 13:09:07 2020 -0700

    [mlir] Remove unneeded inference trait/fns
    
    Therse are all handled with the simple return type inference in ODS.
    Also update some summaries to match what is recommended in ODS doc.

commit 2606290faa28011035baec18af2fb44c202762df
Merge: 2c620775d71d 2c5822e2a1a5
Author: iclsrc <ia.compiler.tools.git@intel.com>
--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Sat May 30 19:37:57 2020 -0400

    AMDGPU: Fix not using scalar loads for global reads in shaders
    
    The pass which infers when it's legal to load a global address space
    as SMRD was only considering amdgpu_kernel, and ignoring the shader
    entry type calling conventions.

commit e16a4efdc6f429eabfb47ef90d40fcb6b6e362ad
Author: Haojian Wu <hokein.wu@gmail.com>
--

commit 1f57d76a8dd00611aaa4b33048be195ea9a2dc44
Author: Valeriy Savchenko <vsavchenko@apple.com>
Date:   Fri May 1 11:49:23 2020 +0300

    [analyzer] Refactor range inference for symbolic expressions
    
    Summary:
    This change introduces a new component to unite all of the reasoning
    we have about operations on ranges in the analyzer's solver.
    In many cases, we might conclude that the range for a symbolic operation
--

commit d6671ee90c1423eb18c6fab11819df850ae2200d
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri May 15 14:54:51 2020 -0400

    InferAddressSpaces: Handle ptrmask intrinsic
    
    This one is slightly odd since it counts as an address expression,
    which previously could never fail. Allow the existing TTI hook to
    return the value to use, and re-use it for handling how to handle
    ptrmask.
--

commit 0da4353938368c1f2473cd24553989f84b964279
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri May 15 17:29:40 2020 -0400

    AMDGPU: Add baseline test for ptrmask infer address space

commit 6594d54571ee5887f031555a7660b8d8e74194d3
Author: Frederik Gossen <frgossen@google.com>
Date:   Thu May 28 13:55:02 2020 +0000

--
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Wed May 27 08:45:55 2020 -0700

    [mlir] Add simple generator for return types
    
    Take advantage of equality constrains to generate the type inference interface.
    This is used for equality and trivially built types. The type inference method
    is only generated when no type inference trait is specified already.
    
    This reorders verification that changes some test error messages.
    
    Differential Revision: https://reviews.llvm.org/D80484

--
    Summary:
    This patch adds the bfloat type to the AArch64 backend:
    - adds it as part of the FPR16 register class
    - adds bfloat calling conventions
    - as f16 is now not the only FPR16 type anymore, we need to constrain a number
      of instruction patterns using FPR16Op to help out the TableGen type inferrer
    
    This patch is part of a series implementing the Bfloat16 extension of the
    Armv8.6-a architecture, as detailed here:
    
    https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/arm-architecture-developments-armv8-6-a
--
    in the test is that ExternalLexicalStorage is first set to false in `DWARFASTParserClang::CompleteTypeFromDWARF`
    when we try to complete the `SomeClass` interface, but is then the flag is set back to true once we add
    the last ivar of `SomeClass` (see `SetMemberOwningModule` in `TypeSystemClang.cpp` which is called
    when we add the ivar). I'll fix the code for that in a follow-up patch.
    
    I think some of the code here needs some rethinking. LLDB and Clang shouldn't infer anything about the ExternalASTSource
    and its ability to complete the current type form the `ExternalLexicalStorage` flag. We probably should
    also actually provide any declarations when we get asked for the lexical decls of an ObjCInterfaceDecl. But both of those
    changes are bigger (and most likely would cause us to eagerly complete more types), so those will be follow up patches
    and this patch just brings us back to the state before commit ef423a3ba57045f80b0fcafce72121449a8b54d4 .
    
--

commit ba10daa820fa868816eed2b85e70197d354ebfe6
Author: Nicolas Vasilache <ntv@google.com>
Date:   Tue May 26 15:34:57 2020 -0400

    [mlir][Vector] Add more vector.contract -> outerproduct lowerings and fix vector.contract type inference.
    
    This revision expands the types of vector contractions that can be lowered to vector.outerproduct.
    All 8 permutation cases are support.
    The idiomatic manipulation of AffineMap written declaratively makes this straightforward.
    
--

commit 9d55e4ee1367b440bb8402ce3a33d5a8b99aee06
Author: Fangrui Song <i@maskray.me>
Date:   Mon May 25 15:05:35 2020 -0700

    Make explicit -fno-semantic-interposition (in -fpic mode) infer dso_local
    
    -fno-semantic-interposition is currently the CC1 default. (The opposite
    disables some interprocedural optimizations.) However, it does not infer
    dso_local: on most targets accesses to ExternalLinkage functions/variables
    defined in the current module still need PLT/GOT.
    
    This patch makes explicit -fno-semantic-interposition infer dso_local,
    so that PLT/GOT can be eliminated if targets implement local aliases
    for AsmPrinter::getSymbolPreferLocal (currently only x86).
    
    Currently we check whether the module flag "SemanticInterposition" is 0.
    If yes, infer dso_local. In the future, we can infer dso_local unless
    "SemanticInterposition" is 1: frontends other than clang will also
    benefit from the optimization if they don't bother setting the flag.
    (There will be risks if they do want ELF interposition: they need to set
    "SemanticInterposition" to 1.)

--
Date:   Sun May 24 16:22:39 2020 +0300

    [LV] Clamp MaxVF to power of 2.
    
    If a loop has a constant trip count known to be a multiple of MaxVF (times user
    UF), LV infers that no tail will be generated for any chosen VF. This relies on
    the chosen VF's being powers of 2 bound by MaxVF, and assumes MaxVF is a power
    of 2. Make sure the latter holds, in particular when MaxVF is set by a memory
    dependence distance which may not be a power of 2.
    
    Differential Revision: https://reviews.llvm.org/D80491
--
    
    To avoid code duplication, refactored all common code for translation
    aforementioned entities into helper functions.
    
    Simplified interface of getOrCreateSwithFunc helper: `llvm::Module`
    argument is now infered from `InsertPoint` argument.

commit c1ef1798bdb58f4eea401969f4e930d91a56ecfa
Author: Parshintsev Anatoly <anatoly.parshintsev@intel.com>
Date:   Wed May 20 16:29:51 2020 +0300

--
    
    An undefined symbol in a shared object can be versioned, like `f@v1`.
    We currently insert `f` as an Undefined into the symbol table, but we
    should insert `f@v1` instead.
    
    The string `v1` is inferred from SHT_GNU_versym and SHT_GNU_verneed.
    This patch implements the functionality.
    
    Failing to do this can cause two issues:
    
    * If a versioned symbol referenced by a shared object is defined in the
--
Date:   Mon May 18 18:10:53 2020 -0700

    [lldb/Driver] Fix handling on positional arguments
    
    Before the transition to libOption it was possible to specify arguments
    for the inferior without -- as long as they didn't start with a dash.
    
    For example, the following invocations should all behave the same:
    
      $ lldb inferior inferior-arg
      $ lldb inferior -- inferior-arg
      $ lldb -- inferior inferior-arg
    
    This patch fixes that behavior, documents it and adds a test to cover
    the different combinations.
    
    Differential revision: https://reviews.llvm.org/D80165
--

    [mlir][Vector] Make minor identity permutation map optional in transfer op printing and parsing
    
    Summary:
    This revision makes the use of vector transfer operatons more idiomatic by
    allowing to omit and inferring the permutation_map.
    
    Differential Revision: https://reviews.llvm.org/D80092

commit 364c595403c00431374dbcc965b6117e33a7f140
Author: David Sherwood <david.sherwood@arm.com>
--
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Thu May 14 12:27:26 2020 -0700

    [lldb/Test] Skip test using files to synchronize.
    
    Files written by the inferior are not captured by the reproducers and
    the inferior doesn't actually run during replay.

commit 4532a50899b1748a64320abce7a69ac10b801a34
Author: Eli Friedman <efriedma@quicinc.com>
Date:   Thu May 14 12:59:45 2020 -0700

    Infer alignment of unmarked loads in IR/bitcode parsing.
    
    For IR generated by a compiler, this is really simple: you just take the
    datalayout from the beginning of the file, and apply it to all the IR
    later in the file. For optimization testcases that don't care about the
    datalayout, this is also really simple: we just use the default
    datalayout.
    
    The complexity here comes from the fact that some LLVM tools allow
    overriding the datalayout: some tools have an explicit flag for this,
    some tools will infer a datalayout based on the code generation target.
    Supporting this properly required plumbing through a bunch of new
    machinery: we want to allow overriding the datalayout after the
    datalayout is parsed from the file, but before we use any information
    from it. Therefore, IR/bitcode parsing now has a callback to allow tools
    to compute the datalayout at the appropriate time.
--

commit e57807769b5c21dd06ee293ed7ebaa13f8914ba2
Author: Kuter Dinel <kuterdinel@gmail.com>
Date:   Wed May 13 12:49:15 2020 -0500

    [Attributor] Use AAValueConstantRange to infer dereferencability.
    
    Reviewed By: jdoerfert
    
    Differential Revision: https://reviews.llvm.org/D76208

--
    
    In the current implementation the issue is that canonicalization may strictly lose information because static offsets are combined in irrecoverable ways into the result type, in order to fit the strided memref representation.
    
    The core semantics of the op do not change but the parser and printer do: the op always requires `rank` offsets, sizes and strides. These quantities can now be either SSA values or static integer attributes.
    
    The result type is automatically deduced from the static information and more powerful canonicalizations (as powerful as the representation with sentinel `?` values allows). Previously static information was inferred on a best-effort basis from looking at the source and destination type.
    
    Relevant tests are rewritten to use the idiomatic `offset: x, strides : [...]`-form. Bugs are corrected along the way that were not trivially visible in flattened strided memref form.
    
    Lowering to LLVM is updated, simplified and now supports all cases.
    A mixed static-dynamic mode test that wouldn't previously lower is added.
--
    
    I updated the expected assembly for a couple tests; in particular, for
    arg-copy-elide.ll, the optimization in question does not increase the
    alignment the way SelectionDAG normally would. For the rest, I just
    increased the specified alignment on the allocas to match what
    SelectionDAG was inferring.
    
    Differential Revision: https://reviews.llvm.org/D79532

commit 117e5609e98b43f925c678b72f816ad3a1c3eee7
Author: Saiyedul Islam <Saiyedul.Islam@amd.com>
--
    
    In the current implementation the issue is that canonicalization may strictly lose information because static offsets are combined in irrecoverable ways into the result type, in order to fit the strided memref representation.
    
    The core semantics of the op do not change but the parser and printer do: the op always requires `rank` offsets, sizes and strides. These quantities can now be either SSA values or static integer attributes.
    
    The result type is automatically deduced from the static information and more powerful canonicalizations (as powerful as the representation with sentinel `?` values allows). Previously static information was inferred on a best-effort basis from looking at the source and destination type.
    
    Relevant tests are rewritten to use the idiomatic `offset: x, strides : [...]`-form. Bugs are corrected along the way that were not trivially visible in flattened strided memref form.
    
    It is an open question, and a longer discussion, whether a better result type representation would be a nicer alternative. For now, the subview op carries the required semantic.
    
--
    
    Defaulting to -Xclang -coverage-version='407*' makes .gcno/.gcda
    compatible with gcov [4.7,8)
    
    In addition, delete clang::CodeGenOptionsBase::CoverageExtraChecksum and GCOVOptions::UseCfgChecksum.
    We can infer the information from the version.
    
    With this change, .gcda files produced by `clang --coverage a.o` linked executable can be read by gcov 4.7~7.
    We don't need other -Xclang -coverage* options.
    There may be a mismatching version warning, though.
    
--
    
    This is a wrapper around vector of NamedAttributes that keeps track of whether sorted and does some minimal effort to remain sorted (doing more, e.g., appending attributes in sorted order, could be done in follow up). It contains whether sorted and if a DictionaryAttr is queried, it caches the returned DictionaryAttr along with whether sorted.
    
    Change MutableDictionaryAttr to always return a non-null Attribute even when empty (reserve null cases for errors). To this end change the getter to take a context as input so that the empty DictionaryAttr could be queried. Also create one instance of the empty dictionary attribute that could be reused without needing to lock context etc.
    
    Update infer type op interface to use DictionaryAttr and use NamedAttrList to avoid incurring multiple conversion costs.
    
    Fix bug in sorting helper function.
    
    Differential Revision: https://reviews.llvm.org/D79463

--

commit 57a7cd7a138fed24e109a02dbd8f7d464bf7e177
Author: Sean Silva <silvasean@google.com>
Date:   Fri Apr 24 15:54:22 2020 -0700

    [shape] Add inferReturnTypes to a couple ops.
    
    - ShapeOfOp
    - BroadcastOp
    
    Differential Revision: https://reviews.llvm.org/D78822
--
    [SveEmitter] Fix encoding/decoding of SVETypeFlags
    
    Summary:
    This issue was introduced when reworking D75861. The bug isn't
    actually hit with current unit tests because the contiguous loads/stores
    infer the EltType and the MemEltType from the pointer and result, rather
    than using the flags. But it will be needed for other intrinsics, such as
    gather/scatter.
    
    Reviewers: SjoerdMeijer, Andrzej
    
--
    
    The issue is that GetArgsAndEnv does not work on ARM: there glibc's
    _start overwrites argc value stored at __libc_start_end, breaking the
    existing argv/envp parsing logic.
    
    Fix by inferring argc from argv.
    
    Reviewers: eugenis, vitalybuka
    
    Reviewed By: eugenis
    
--
    the operation definition the error occured in, if not the actual line number
    of the assemblyFormat definition.
    
    A typical message is like:
    
    error: type of operand #0, named 'operand', is not buildable and a buildable type cannot be inferred
      $operand type($result) attr-dict
      ^
    /src/llvm-project/mlir/test/mlir-tblgen/op-format-spec.td:296:1: note: in custom assembly format for this operation
    def ZCoverageInvalidC : TestFormat_Op<"variable_invalid_c", [{
    ^
--

    [Alignment][NFC] Assume AlignmentFromAssumptions::getNewAlignment is always set.
    
    Summary:
    In D77454 we explain that `LoadInst` and `StoreInst` always have their alignment defined.
    This allows to work backward here and to infer that `getNewAlignment` does not need to return `0` in case of failure.
    Returning `1` also works since it needs to be greater than the Load/Store alignment which is a least `1`.
    
    This is patch is part of a series to introduce an Alignment type.
    See this thread for context: http://lists.llvm.org/pipermail/llvm-dev/2019-July/133851.html
    See this patch for the introduction of the type: https://reviews.llvm.org/D64790
--

commit 1a2370bfb8c17f188f197aa97f99a25fd889f8e7
Author: Frederik Gossen <frederik.gossen@gmail.com>
Date:   Sat Apr 4 04:33:58 2020 +0000

    [MLIR] Fix shape inference in toy tutorial
    
    The implementation of shape inference in the toy tutorial did not conform to the correct algorithmic description.
    The result was only correct because all operations appear to be processed in sequence.
    
    Differential Revision: https://reviews.llvm.org/D77382

commit b801577c5964999a9dab6742ba441c0bd9c7adbf
--
Author: David Green <david.green@arm.com>
Date:   Sat Mar 28 15:32:47 2020 +0000

    [ARM] Make remaining MVE instruction predictable
    
    The unpredictable/hasSideEffects flag is usually inferred by tablegen
    from whether the instruction has a tablegen pattern (and that pattern
    only has a single output instruction). Now that the MVE intrinsics are
    all committed and producing code, the remaining instructions still
    marked as unpredictable need to be specially handled. This adds the flag
    directly to instructions that need it, notably the V*MLAL instructions
--

commit 3a78f44daf37bd16ae69eea06a1b45428e33f16f
Author: Guillaume Chatelet <gchatelet@google.com>
Date:   Wed Apr 1 13:02:51 2020 +0000

    [Alignment][NFC] Convert SelectionDAG::InferPtrAlignment to MaybeAlign
    
    Summary:
    This is patch is part of a series to introduce an Alignment type.
    See this thread for context: http://lists.llvm.org/pipermail/llvm-dev/2019-July/133851.html
    See this patch for the introduction of the type: https://reviews.llvm.org/D64790
--
Author: River Riddle <riddleriver@gmail.com>
Date:   Wed Apr 1 01:50:29 2020 -0700

    [mlir][Pass] Add support for generating pass utilities via tablegen
    
    This revision adds support for generating utilities for passes such as options/statistics/etc. that can be inferred from the tablegen definition. This removes additional boilerplate from the pass, and also makes it easier to remove the reliance on the pass registry to provide certain things(e.g. the pass argument).
    
    Differential Revision: https://reviews.llvm.org/D76659

commit 3dddd8969f4d5bb05d65c6014934e24795843182
Author: River Riddle <riddleriver@gmail.com>
--

commit 0de874adfbb25f3782543d8e1a2d7e2b0643b6a5
Author: Guillaume Chatelet <gchatelet@google.com>
Date:   Tue Mar 31 07:52:49 2020 +0000

    [Alignment][NFC] Transition to inferAlignFromPtrInfo
    
    Summary:
    This is patch is part of a series to introduce an Alignment type.
    See this thread for context: http://lists.llvm.org/pipermail/llvm-dev/2019-July/133851.html
    See this patch for the introduction of the type: https://reviews.llvm.org/D64790
--

commit d2d6c9f59197bd82ec5bc9c003840f244a70a347
Author: Guillaume Chatelet <gchatelet@google.com>
Date:   Mon Mar 30 18:55:41 2020 +0000

    [Alignment][NFC] GlobalIsel Utils inferAlignFromPtrInfo
    
    Summary:
    This is patch is part of a series to introduce an Alignment type.
    See this thread for context: http://lists.llvm.org/pipermail/llvm-dev/2019-July/133851.html
    See this patch for the introduction of the type: https://reviews.llvm.org/D64790
--
Author: againull <48139823+againull@users.noreply.github.com>
Date:   Fri Mar 27 08:34:42 2020 -0700

    [SYCL] Cast address spaces before replacing byval argument usages (#1405)
    
    For NVPTX target address space inference for kernel arguments and
    allocas is happening in the backend (NVPTXLowerArgs and
    NVPTXLowerAlloca passes). After frontend these pointers are in LLVM
    default address space 0 which is the generic address space for NVPTX
    target. Perform address space cast of a pointer to the shadow global
    variable from the local to the generic address space before replacing
--

commit b4a6e63ea12309bf667d1569a20ec5b081cbf2a4
Author: Fred Riss <friss@apple.com>
Date:   Thu Mar 19 18:02:05 2020 -0700

    [lldb/Target] Rework the way the inferior environment is created
    
    Summary:
    The interactions between the environment settings (`target.env-vars`,
    `target.inherit-env`) and the inferior life-cycle are non-obvious
    today. For example, if `target.inherit-env` is set, the `target.env-vars`
    setting will be augmented with the contents of the host environment
    the first time the launch environment is queried (usually at
    launch). After that point, toggling `target.inherit-env` will have no
    effect as there's no tracking of what comes from the host and what is
--
      3/ Augment the launch environment with the contents of
      `target.env-vars`. This overrides any common values with the host
      environment.
    
    The one functional difference here that could be seen as a regression
    is that `target.env-vars` will not contain the inferior environment
    after launch. The patch implements a better alternative in the
    `target show-launch-environment` command which will return the
    environment computed through the above rules.
    
    Reviewers: labath, jingham
--
    behavior for those APIs. It's unllikely that anyone passed NULL/None to
    this API after having set properties in order to explicitely ignore them.
    
    One direct application of this change is within the testsuite. We have
    plenty of tests calling LaunchSimple and passing None as environment.
    If you passed --inferior-env to dotest.py to, for example, set
    (DY)LD_LIBRARY_PATH, it wouldn't be taken into account.
    
    Reviewers: jingham, labath, #libc_abi!
    
    Subscribers: libcxx-commits, lldb-commits
--
    [lldb/Target] Initialize new targets environment variables from target.env-vars
    
    Summary:
    The TargetProperties constructor invokes a series of callbacks to
    prime the properties from the default ones. The one callback in
    charge of updating the inferior environment was commented out
    because it crashed.
    
    The reason for the crash is that TargetProperties is a parent class
    of Target and the callbacks were invoked using a Target that was
    not fully initialized. This patch moves the initial callback
--
Date:   Wed Mar 18 13:36:17 2020 +0000

    Fix build with gcc 7.5 by adding a "redundant move"
    
    The constructor of Expected<T> expects as T&&, but gcc-7.5 does not
    infer an rvalue in this context apparently.

commit 85334b030a6e601bd755a3c0e06ac4bdb9d36c85
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Wed Mar 18 15:02:31 2020 +0300

--
    API. During replay, it returns the serialized data instead of querying
    the host.
    
    The motivation for this patch is supporting the process attach workflow
    during replay. Without this change it would incorrectly look for the
    inferior on the host during replay and failing if no matching process
    was found.
    
    Differential revision: https://reviews.llvm.org/D75877

commit a7325298e1f311b383b8ce5ba8e2d3698fef472a
--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Wed Mar 11 17:12:20 2020 -0400

    AMDGPU: Directly annotate functions if they have calls
    
    Currently we infer whether the flat-scratch-init kernel input should
    be enabled based on calls. Move this handling, so we can decide if the
    full set of ABI inputs is needed in kernels. Ideally we would have an
    analysis of some sort, rather than the function attributes.

commit 1fdb03808b016a7334f99230d312ff8b5ee45b3a
--
    is indemonstrable, more so in an application instead of an artificial
    glibc benchmark.  Theoretically the replacement could be beneficial when
    calling getc_unlocked/putc_unlocked in a loop, but then it is better
    using a blocked IO operation and the user is likely aware of that.
    
    The function attribute inference is still useful and thus kept.
    
    Reviewed By: xbolva00
    
    Differential Revision: https://reviews.llvm.org/D75933

--
Date:   Mon Mar 9 12:52:08 2020 +0500

    [lldb/test] Remove skip arm/aarch64 decorator from instruction counting tests
    
    This patch removes skipIf decorator from instruction counting tests.
    We now use inline intruction in testing inferior to make sure that
    number of instructions stays fixed. This was tested on aarch64 linux.

commit 223a43ee8d899a0522bebe8291470b77e7dc7ab1
Author: Nathan James <n.james93@hotmail.co.uk>
Date:   Mon Mar 9 00:48:51 2020 +0000
--

    [lldb/test] Use inline assembly for instruction counting tests
    
    We have a test which checks that instruction-step really steps one
    instruction, but the way it checks this makes it very susceptible to
    codegen changes. This rewrites the test inferior to use inline assembly,
    which guarantees a known sequence of instructions that the test can
    check. This does mean we have to write separate assembly for each
    architecture, but that is no better than having architecture-specific
    assertions, which the test was already starting to accumulate.

--
Author: Fangrui Song <i@maskray.me>
Date:   Sat Feb 15 17:23:18 2020 -0800

    ThinLTOBitcodeWriter: drop dso_local when a GlobalVariable is converted to a declaration
    
    If we infer the dso_local flag for -fpic, dso_local should be dropped
    when we convert a GlobalVariable a declaration. dso_local causes the
    generation of direct access (e.g. R_X86_64_PC32). Such relocations referencing
    STB_GLOBAL STV_DEFAULT objects are not allowed in a -shared link.
    
    Reviewed By: tejohnson
--
      ("Specialization" makes it sound like template specialization, which
       this is not.)
    * CallInterfaces.td has an include guard, so #ifdef not needed anymore.
    * Omit duplicate code in code samples.
    * Clarify which algorithm we're talking about.
    * Mention that the ShapeInference code is code a snippet that belongs to
      algorithm discussed in the paragraph above it.
    * Add missing definition for createShapeInferencePass.
    
    Differential Revision: https://reviews.llvm.org/D75260

commit 79c17330d35995d689ecec11dda0dfdb19f33428
Author: Matthias Kramm <kramm@google.com>
--

commit 453cd2dbe57bce945c9d9a2bbf43677252b53597
Author: Baden Hughes <580499+badenh@users.noreply.github.com>
Date:   Sat Feb 22 12:08:33 2020 +1000

    Update ShapeInference.md
    
    Variety of editorial and typographic and formatting tweaks.

commit d192a4ab2b8c0f80efcb006a4b200ad3ba73d485
Author: Baden Hughes <580499+badenh@users.noreply.github.com>
--
    We don't use this, and matching from the def doesn't make much sense.
    
    There are multiple tablegen bugs with default operand
    handling. undef_tied_input should work to handle the vdst_in
    correctly, but this breaks the operand register class constraint which
    it should be able to infer.

commit db9c40f5624e6d55e0cbafe3f3980a7223e197c4
Author: Danilo Carvalho Grael <danilo.carvalho.grael@huawei.com>
Date:   Fri Feb 21 11:59:52 2020 -0500

--
Date:   Wed Feb 19 11:39:28 2020 -0500

    [mlir][ods] Adding attribute setters generation
    
    In some dialects, attributes may have default values that may be
    determined only after shape inference. For example, attributes that
    are dependent on the rank of the input cannot be assigned a default
    value until the rank of the tensor is inferred.
    
    While we can set attributes without explicit setters, referring to
    the attributes via accessors instead of having to use the string
    interface is better for compile time verification.
    
--
    Zero-parameter K&R definitions specify that the function has no
    parameters, but they are still not prototypes, so calling the function
    with the wrong number of parameters is just a warning, not an error.
    
    The C11 standard doesn't seem to directly define what a prototype is,
    but it can be inferred from 6.9.1p7: "If the declarator includes a
    parameter type list, the list also specifies the types of all the
    parameters; such a declarator also serves as a function prototype
    for later calls to the same function in the same translation unit."
    This refers to 6.7.6.3p5: "If, in the declaration “T D1”, D1 has
    the form
--
    Revert "[Host.mm] Check for the right macro instead of inlining it"
    
    This breaks macOS, because TARGET_OS_EMBEDDED is always defined. Thanks
    to Jason Molenda for pointing this out.
    
    Revert "Do not define AcceptPIDFromInferior when it will not be used"
    
    This reverts commit d23c15a687ff15327b88fa64da3184395012c2dc.
    This reverts commit 936d1427da1432d724dfa5851097347bcdf7c521.

commit 480eea4e45bc2d50647cb8a82467d023b94a8550
--

commit d23c15a687ff15327b88fa64da3184395012c2dc
Author: Vedant Kumar <vsk@apple.com>
Date:   Mon Feb 10 12:06:46 2020 -0800

    Do not define AcceptPIDFromInferior when it will not be used

commit 8513ff05c81e60f771aa58846b37840f979a2777
Author: Nicolas Vasilache <ntv@google.com>
Date:   Sat Feb 8 13:51:10 2020 -0500

--
Date:   Mon Feb 10 10:55:24 2020 -0800

    [flang] Fix compilation error on macOS
    
    The call to `std::min` failed to compile with GCC on macOS due to type
    inference because `std::size_t` is `long unsigned int` but `std::int64_t`
    is `long long int`.
    
    Original-commit: flang-compiler/f18@c342575a9e0217fa3252b70b8ef3eac0236a58e3
    Reviewed-on: https://github.com/flang-compiler/f18/pull/977

--
Date:   Sun Feb 9 20:21:56 2020 -0600

    [Attributor][FIX] Remove FIXME that seems outdated
    
    The change is performed as stated by the FIXME and the tests are
    adjusted. All changes look fine to me and values can be inferred as
    undef without it being an error.

commit 7e7e6594b3450dbdaffbbeb39e832f6f39ce45a9
Author: Johannes Doerfert <johannes@jdoerfert.de>
Date:   Sun Feb 9 19:08:04 2020 -0600
--
Date:   Tue Feb 4 10:12:47 2020 -0800

    [lldb/StackFrameList] Convert assert to defensive check in SynthesizeTailCallFrames
    
    In order to synthesize tail call frames, the stack frame list must not
    be empty (otherwise, there is no "previous" frame to infer a tail call
    from).
    
    This case is hard to hit. To trigger it, we must first fail to push
    `unwind_frame_sp` because we either fail to get its SymbolContext, or
    given its SymbolContext the GetParentOfInlineScope call fails. This
--
Author: River Riddle <riddleriver@gmail.com>
Date:   Mon Feb 3 21:52:38 2020 -0800

    [mlir] Initial support for type constraints in the declarative assembly format
    
    Summary: This revision add support for accepting a few type constraints, e.g. AllTypesMatch, when inferring types for operands and results. This is used to remove the c++ parsers for several additional operations.
    
    Differential Revision: https://reviews.llvm.org/D73735

commit 8413116bf10402eef12f556cb9d80b08faeb9890
Author: Craig Topper <craig.topper@gmail.com>
--

commit c4b4c0c47c992e63fc0792d71bea82b6e6dcf0cd
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Tue Jan 28 12:05:54 2020 -0800

    [mlir] Expand shape functions in ShapeInference doc
    
    Summary:
    Start filling in some requirements for the shape function descriptions
    that will be used to derive shape computations. This requiement part may
    later be reworked to be part of the "context" section of shape dialect. Without
--

    [X86][ELF] Prefer to lower MC_GlobalAddress operands to .Lfoo$local
    
    For a MC_GlobalAddress reference to a dso_local external GlobalValue with a definition, emit .Lfoo$local to avoid a relocation.
    
    -fno-pic and -fpie can infer dso_local but -fpic cannot.  In the future,
    we can explore the possibility of inferring dso_local with -fpic. As the
    description of D73228 says, LLVM's existing IPO optimization behaviors
    (like -fno-semantic-interposition) and a previous assembly behavior give
    us enough license to be aggressive here.
    
    Reviewed By: rnk
--
Date:   Wed Jan 15 14:23:20 2020 -0500

    AMDGPU/GlobalISel: Legalize unpacked d16 image operations
    
    On targets that don't have the normal packed f16 layout, handle these
    during legalization. Directly modify the register types. We can infer
    this was a d16 load based on the mem operand size during selection.
    
    A16 operands should possibly be handled here as well, but don't worry
    about that yet.

--
Date:   Tue Jan 21 22:46:43 2020 -0500

    AMDGPU/GlobalISel: Select V_ADD3_U32/V_XOR3_B32
    
    The other 3-op patterns should also be theoretically handled, but
    currently there's a bug in the inferred pattern complexity.
    
    I'm not sure what the error handling strategy should be for potential
    constant bus violations. I think the correct strategy is to never
    produce mixed SGPR and VGPR operands in a typical VOP instruction,
    which will trivially avoid them. However, it's possible to still have
--
Author: David Green <david.green@arm.com>
Date:   Wed Jan 22 15:59:33 2020 +0000

    [ARM] Mark MVE loads/store as not having side effects
    
    The hasSideEffect parameter is usually automatically inferred from
    instruction patterns. For some of our MVE instructions, we do not have
    patterns though, such as for the pre/post inc loads and stores. This
    instead specifies the flag manually on the base MVE_VLDRSTR_base
    tablegen class, making sure we get this correct.
    
--

    [mlir] Enable specifying verify on OpInterface
    
    Summary:
    Add method in ODS to specify verification for operations implementing a
    OpInterface. Use this with infer type op interface to verify that the
    inferred type matches the return type and remove special case in
    TestPatterns.
    
    This could also have been achieved by using OpInterfaceMethod but verify
    seems pretty common and it is not an arbitrary method that just happened
    to be named verifyTrait, so having it be defined in special way seems
--
Author: Jason Molenda <jmolenda@apple.com>
Date:   Tue Jan 21 14:45:21 2020 -0800

    Fix an over-suspend bug with LaunchInNewTerminalWithAppleScript sessions
    
    When launching an inferior in a new terminal window via AppleScript
    and the darwin-debug helper program, we could often end up with the
    inferior process having a too-high suspend count, and it would never
    resume execution.
    
    lldb tries to wait until darwin-debug has finished its work and has
    launched the inferior (WaitForProcessToSIGSTOP) but this wasn't
    working correctly - and cannot be made to work.
    
    This patch removes WaitForProcessToSIGSTOP, adds a special tiny
    segment to the darwin-debug executable so it can be identified as
    that binary (ExecExtraSuspend), and adds code to debugserver to
    detect this segment.  When debugserver sees this segment, it notes
    that the next exec will be done with a launch-suspended flag.  When
    the next exec happens, debugserver forces an extra task_resume when
    we resume the inferior.
    
    An alternative approach would be if lldb could detect when the
    inferior has been launched by darwin-debug unambiguously; monitoring
    when the unix socket between darwin-debug and lldb was closed would
    have been a reasonable way to do this too.
    
    <rdar://problem/29760580>
    
--
    since it has no bits set.
    
    Here we don't special-case `null` pointer because it is somewhat controversial
    to add one more place where we enforce that `null` pointer is zero,
    but instead we do the more general thing of trying to perform constant-fold
    of pointer constant to an integer, and perform alignment inferrment on that.
    
    Reviewers: jdoerfert, gchatelet, courbet, sstefan1
    
    Reviewed By: jdoerfert
    
--
Date:   Wed Jan 8 18:48:38 2020 -0800

    [mlir] Add shaped container component type interface
    
    Summary:
    * Add shaped container type interface which allows infering the shape, element
      type and attribute of shaped container type separately. Show usage by way of
      tensor type inference trait which combines the shape & element type in
      infering a tensor type;
      - All components need not be specified;
      - Attribute is added to allow for layout attribute that was previously
        discussed;
    * Expand the test driver to make it easier to test new creation instances
      (adding new operands or ops with attributes or regions would trigger build
      functions/type inference methods);
      - The verification part will be moved out of the test and to verify method
        instead of ops implementing the type inference interface in a follow up;
    * Add MLIRContext as arg to possible to create type for ops without arguments,
      region or location;
    * Also move out the section in OpDefinitions doc to separate ShapeInference doc
      where the shape function requirements can be captured;
      - Part of this would move to the shape dialect and/or shape dialect ops be
        included as subsection of this doc;
    * Update ODS's variable usage to match camelBack format for builder,
      state and arg variables;
--

commit 4c00dbf22d7f0ad005444b412b450ee4b4779b6a
Author: Vedant Kumar <vsk@apple.com>
Date:   Wed Dec 11 16:19:08 2019 -0800

    lldbutil: Forward ASan launch info to test inferiors
    
    This allows an unsanitized test process which loads a sanitized DSO (the
    motivating example is a Swift runtime dylib) to launch on Darwin.
    
    rdar://57290132
--
    For arguments that are not expected to be materialized with
    G_CONSTANT, this was emitting predicates which could never match. It
    was first adding a meaningless LLT check, which would always fail due
    to the operand not being a register.
    
    Infer the cases where a literal should check for an immediate operand,
    instead of a register This avoids needing to invent a special way of
    representing timm literal values.
    
    Also handle immediate arguments in GIM_CheckLiteralInt. The comments
    stated it handled isImm() and isCImm(), but that wasn't really true.
--
Date:   Sat Nov 2 09:30:59 2019 -0700

    AMDGPU/GlobalISel: Replace handling of boolean values
    
    This solves selection failures with generated selection patterns,
    which would fail due to inferring the SGPR reg bank for virtual
    registers with a set register class instead of VCC bank. Use
    instruction selection would constrain the virtual register to a
    specific class, so when the def was selected later the bank no longer
    was set to VCC.
    
--
    - SALU boolean operations should be promoted to s32 in RegBankSelect
      apply mapping
    
    - An s1 value means vcc bank at selection. The exception is for
      legalization artifacts that use s1, which are never VCC. All other
      contexts should infer the VCC register classes for s1 typed
      registers. The LLT for the register is now needed to infer the
      correct register class. Extensions with vcc sources should be
      legalized to a select of constants during RegBankSelect.
    
    - Copy from non-vcc to vcc ensures high bits of the input value are
      cleared during selection.
--

commit 3186b18b998124a6b577f8274a10b7ee8b634c18
Author: Craig Topper <craig.topper@gmail.com>
Date:   Thu Jan 2 23:27:51 2020 -0800

    [X86] Reorder X86any* PatFrags to put the strict node first so that chain property will be inferred for the instruction by the tablegen backend.
    
    Also use X86any_vfpround instead of X86vfpround in some instruction
    definitions so the strict version can be used to infer the chain
    property.
    
    Without these changes we don't propagate strict FP chain through
    isel for some instructions.

--
Date:   Fri Dec 27 11:26:24 2019 -0500

    TailDuplication: Clear NoPHIs property
    
    The early tail duplicator pass introduces new ones, so a MIR test that
    infers no phis since there were none on the input would fail the
    verifier after running.

commit 780d30660e965992cf10d390e8ff102e4bf82aa4
Author: Reid Kleckner <rnk@google.com>
Date:   Fri Dec 27 10:37:07 2019 -0800
--

commit df6879ec0227a8a5e5697e505201d0f4444f03a4
Author: Jan Kratochvil <jan.kratochvil@redhat.com>
Date:   Sat Dec 21 11:12:17 2019 +0100

    [lldb] Fix ARM32 inferior calls
    
      echo -e '#include <unistd.h>\nint main(void){\nsync();return 0;}'|./bin/clang -g -x c -;./bin/lldb -o 'file ./a.out' -o 'b main' -o r -o 'p (void)sync()'
    
    Actual:
    
--

commit 41a73ddce8923f506eaf6e8c5a61d32add5e4c06
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Thu Dec 12 10:35:40 2019 -0800

    Add type inference variant for separate params builder generated
    
    Add variant that does invoke infer type op interface where defined. Also add entry function that invokes that different separate argument builders for wrapped, unwrapped and inference variant.
    
    PiperOrigin-RevId: 285220709

commit b2b5cac3ec07782b917b2816f175da682723cd49
Author: Fangrui Song <i@maskray.me>
--
Author: Louis Dionne <ldionne@apple.com>
Date:   Tue Dec 10 16:34:30 2019 -0500

    [libcxx] [test] Query the target platform, not the host one
    
    target_info is inferred to WindowsLocalTI on Windows hosts unless
    specified otherwise. In the latter case, it doesn't make sense to use
    Windows-specific settings if the target is not Windows.
    
    This change should not break anything, because target_info is inferred
    based on what platform.system() returns. self.is_windows was set based
    on the same platform.system() call.
    
    Thanks to Sergej Jaskiewicz for the patch.
    
--

commit 4add9edd7212f9e0b51552250cee606b4d93a043
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Fri Dec 6 14:42:16 2019 -0800

    Change inferReturnTypes to return LogicalResult and values
    
    Previously the error case was using a sentinel in the error case which was bad. Also make the one `build` invoke the other `build` to reuse verification there.
    
    And follow up on suggestion to use formatv which I missed during previous review.
    
--

commit 398f04aa49109fd5d1eff2c1946a2956dc6b29c6
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Fri Dec 6 10:52:38 2019 -0800

    Generate builder for ops that use InferTypeOpInterface trait in ODS
    
    For ops with infer type op interface defined, generate version that calls the inferal method on build. This is intermediate step to removing special casing of SameOperandsAndResultType & FirstAttrDereivedResultType. After that would be generating the inference code, with the initial focus on shaped container types. In between I plan to refactor these a bit to reuse generated paths. The intention would not be to add the type inference trait in multiple places, but rather to take advantage of the current modelling in ODS where possible to emit it instead.
    
    Switch the `inferReturnTypes` method to be static.
    
    Skipping ops with regions here as I don't like the Region vs unique_ptr<Region> difference at the moment, and I want the infer return type trait to be useful for verification too. So instead, just skip it for now to avoid churn.
    
    PiperOrigin-RevId: 284217913

commit 7ff0fcb53f6e71bc22d37494fdfa68bbf2d3709b
Author: Sanjay Patel <spatel@rotateright.com>
--

    [SYCL] Allow SYCL_EXTERNAL to be applied to a function with raw pointers (#861)
    
    SYCL 1.2.1 specification does not allow SYCL_EXTERNAL to be applied to
    a function with a pointer argument or with a pointer return
    value. This is required to limit address space inference work to a
    single translation unit.
    
    Given that we make inference after we link all translation units
    together, it should not really matter now. And there are several cases
    where external functions with pointers can be useful, so this patch
    tuns an error into a warning.
    
    The default behavior is to report an error. `-Wno-error=sycl-strict` allows
--

commit 59f4592ad18b733d31b2c2ac5e5466fe619859dd
Author: Romanov Vlad <vlad.romanov@intel.com>
Date:   Tue Dec 3 13:54:19 2019 +0300

    [SYCL] Remove ASFixer and DISABLE_INFER_AS support (#893)
    
    Signed-off-by: Vlad Romanov <vlad.romanov@intel.com>

commit 057626b4393836e11712bd694afda121d8309973
Author: Diana Picus <diana.picus@linaro.org>
--
    
    Summary:
    This patch moves the test cases related to Attributor to `Transforms/Attributor` folder.
    We have used `Transforms/FunctionAttrs` as the primary folder for Attributor test but we need to change testing way now.
    
    For the test cases which I think functionattrs doesn't infer anything something like (willreturn, nosync, value-simplify, h2s ..etc), I moved them with the command `git mv`.
    
    For the test cases in which functoinattrs and attributor are tested, I copied the test to the folder and remove the check only used by functoinattrs.
    
    Reviewers: jdoerfert, sstefan1
    
--
    This method is close to creating an OperationState first and then unpacking it
    but avoids creating the OperationState and takes a NamedAttributeList for
    attributes rather than array of NamedAttribute (to enable reusing an already
    created NamedAttributeList).
    
    Reuse this new method via create that takes OperationState. I'll update inferReturnTypes in follow up to also take NamedAttributeList and so a build method that uses both inferReturnTypes and create can reuse the same list.
    
    PiperOrigin-RevId: 282651642

commit 6c92cdff72251a7d13ab3958b04fba72dfcaebb1
Author: Dan McGregor <dan.mcgregor@usask.ca>
--

commit 2bd252ea894189f77e09755cf6951727e1d03a74
Author: Sanjay Patel <spatel@rotateright.com>
Date:   Tue Nov 26 09:07:17 2019 -0500

    [InferFuncAttributes][Attributor] add tests for 'dereferenceable'; NFC
    
    Pulling a couple of extra tests out of
    D64258
    before abandoning in favor of
    D70714
--
    2. Should I also use the mtime of the compiler in the cache? I think its not strictly necessary since we assume the filesystem is immutable.
    3. From my testing, this does not regress performance.
    4. Will try to get this tested on Windows.
    
    But basically the problem that this patch is trying to solve is, clients might not always want to specify
    "-resource-dir" in their compile commands, so scan-deps must auto-infer it correctly.
    
    Reviewers: arphaman, Bigcheese, jkorous, dexonsmith, klimek
    
    Reviewed By: Bigcheese
    
--
    builders, i.e., with SameOperandsAndResultType/FirstAttrDerivedResultType
    traits. Now they are going through a aggregate-parameter builder (i.e.,
    requiring one parameter for all result-types/operands/attributes).
    attributes.)
    
    It is expected this approach will be more friendly for future shape inference
    function autogen and calling those autogen'd shape inference function without
    excessive packing and repacking operand/attribute lists.
    Also, it would enable better support for creating ops with optional attributes
    because we are not required to provide an Attribute() as placeholder for
    an optional attribute anymore.
    
--
    we have a few places using `ASTCtx.getLangOpts().IsHeaderFile` to
    determine a header file, but it relies on "-x c-header" compiler flag,
    if the compilation command doesn't have this flag, we will get a false
    positive. We are encountering this issue in bazel build system.
    
    To solve this problem, we infer the file from file name, actual changes will
    come in follow-ups.
    
    Reviewers: sammccall
    
    Subscribers: ilya-biryukov, MaskRay, jkorous, arphaman, kadircet, usaxena95, cfe-commits
--

commit 049f4c90eb146f80f0f8ca2c7341547b67513e3c
Author: Alex Richardson <Alexander.Richardson@cl.cam.ac.uk>
Date:   Tue Oct 29 12:32:16 2019 +0000

    [gen_ast_dump_json_test.py] Infer --filters flags when using --update
    
    See https://reviews.llvm.org/D70119

commit 698ea9cb21e7edd6c1119367243a0134d0bb22d7
Author: Alex Richardson <Alexander.Richardson@cl.cam.ac.uk>
--

commit 57adc37fe57c6edabc006e6de41523319e874c65
Author: Artem Dergachev <artem.dergachev@gmail.com>
Date:   Fri Nov 8 18:04:27 2019 -0800

    [analyzer] Nullability: Don't infer nullable when passing as nullable parameter.
    
    You can't really infer anything from that.

commit 60ab30ebce833c87bd4776f67cd9a82fe162ef9c
Author: Jason Molenda <jmolenda@apple.com>
Date:   Fri Nov 8 18:20:27 2019 -0800

--

commit 7af61f6bcd4f3255df83b3d3d5d9bb3b2424cf5e
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Thu Nov 7 07:51:12 2019 -0800

    Add compatible query method to infer type interface
    
    A return type that differs from the inferred return type need not indicate that an operation is invalid (e.g., tensor<*xf32> vs tensor<10xf32>) but they should be compatible for the operation to be considered valid. Add method to query if inferred type is compatible with return type.
    
    Also add InferTypeOpIntefaceDefault trait that considers equality and compatibility as the same. Currently an op has to opt in to using it explicitly.
    
    PiperOrigin-RevId: 279085639

commit 7adab7719e55e1b29bfd521dcc73f202139e8f41
Author: Edward Jones <ed.jones@embecosm.com>
--
Author: QingShan Zhang <48825004@qq.com>
Date:   Wed Oct 30 07:56:35 2019 +0000

    [PowerPC] Clear the sideeffect bit for those instructions that didn't have the match pattern
    
    If the instruction have match pattern, llvm-tblgen will infer the sideeffect bit from the match pattern and it works well.
    If not, the tblgen will set it as true that hurt the scheduling.
    
    PowerPC has some instructions that didn't specify the match pattern(i.e. LXSD etc), which is manually selected post-ra according
    to the register pressure. We need to clear the sideeffect flag for these instructions.
    
--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Oct 28 12:26:27 2019 -0700

    AMDGPU: Make VReg_1 only include 1 artificial register
    
    When TableGen is inferring register classes from contexts, it uses a
    sorting function based on the number of registers in the class. Since
    this was being treated as an alias of VGPR_32, they had exactly the
    same size. The sort used wasn't a stable sort, and even if it were, I
    believe the tie breaker would effectively end up being the
    alphabetical ordering of the class name. There appear to be issues
--
Author: River Riddle <riverriddle@google.com>
Date:   Wed Oct 23 14:30:01 2019 -0700

    NFC: Remove references to the toy.generic attribute.
    
    This was used for shape inference in the previous tutorial flow.
    
    PiperOrigin-RevId: 276351916

commit f39e704606cbcb5c512ba87f6a9d185c54a73e1c
Author: psteinfeld <47540744+psteinfeld@users.noreply.github.com>
--
Author: River Riddle <riverriddle@google.com>
Date:   Wed Oct 16 17:32:30 2019 -0700

    Add support for inlining toy call operations.
    
    The GenericCallOp needed to have the CallOpInterface to be picked up by the inliner. This also adds a CastOp to perform shape casts that are generated during inlining. The casts generated by the inliner will be folded away after shape inference.
    
    PiperOrigin-RevId: 275150438

commit f35cebe71df7967461df697ef976f2bd1ceaa82b
Author: Julian Lettner <jlettner@apple.com>
--
Author: River Riddle <riverriddle@google.com>
Date:   Wed Oct 16 12:33:55 2019 -0700

    Code cleanups on Ch.4
    
    This change performs general cleanups of the implementation of ch.4 and fixes some bugs. For example, the operations currently don't inherit from the shape inference interface.
    
    PiperOrigin-RevId: 275089914

commit edcd5815ced65300ff2aea10afd818faaa36523c
Author: Stanislav Mekhanoshin <Stanislav.Mekhanoshin@amd.com>
--
Date:   Wed Oct 16 12:08:55 2019 -0700

    Update Chapter 4 of the Toy tutorial
    
    This Chapter now introduces and makes use of the Interface concept
    in MLIR to demonstrate ShapeInference.
    END_PUBLIC
    
    Closes tensorflow/mlir#191
    
    PiperOrigin-RevId: 275085151
--

commit f16e89f841c122f0c7df16bfcbd1751878fed3dc
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Tue Oct 15 12:50:51 2019 -0700

    Fix typos in InferTypeOpInterface.
    
    PiperOrigin-RevId: 274866986

commit 3a842ec3ca4dffc1f8da88121c239b6dbb2209f0
Author: Alexey Bataev <a.bataev@hotmail.com>
--
    multivalue blocks. Currently non-void blocks are only generated at the
    end of functions where the block return type needs to agree with the
    function return type, and that remains true for multivalue
    blocks. That invariant means that the actual signature does not need
    to be stored in the block signature `MachineOperand` because it can be
    inferred by `WebAssemblyMCInstLower` from the return type of the
    parent function. `WebAssemblyMCInstLower` continues to lower block
    signature operands to immediates when possible but lowers multivalue
    signatures to function type symbols. The AsmParser and Disassembler
    are updated to handle multivalue block types as well.
    
--

commit 58e2ead31489aef4b3972a1af1e1e7d9a5ab4f1a
Author: Mehdi Amini <aminim@google.com>
Date:   Fri Oct 4 18:40:09 2019 -0700

    Add missing dependency on the TypeInferOpInterface from the Test dialect
    
    This is fixing a build failure, usually non-deterministic because of
    parallelism in the build, but could be reliably reproduced:
    
    ninja projects/mlir/test/lib/TestDialect/CMakeFiles/MLIRTestDialect.dir/TestPatterns.cpp.o
--

    [clangd] Use the index-based API to do the header-source switch.
    
    Summary:
    If the file heuristic fails, we try to use the index&AST to do the
    header/source inference.
    
    Reviewers: kadircet
    
    Subscribers: ilya-biryukov, MaskRay, jkorous, arphaman, usaxena95, cfe-commits
    
--

commit e5a43186d38c239380c22c2629dff748677c4bd1
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Sun Sep 29 17:28:29 2019 -0700

    Add InferTypeOpTrait & enable generating its member function definition
    
    Use OpInterfaces to add an interface for ops defining a return type function.
    
    This change does not use this trait in any meaningful way, I'll use it in a
    follow up to generalize and unify some of the op type traits/constraints. Also,
    currently the infer type function can only be manually specified in C++, that should rather be the fallback in future.
    
    PiperOrigin-RevId: 271883746

commit 1069c019241930487c5336e06dcf0880bc9374f6
Author: Craig Topper <craig.topper@intel.com>
--

    [lldb] Decouple importing the std C++ module from the way the program is compiled
    
    Summary:
    At the moment, when trying to import the `std` module in LLDB, we look at the imported modules used in the compiled program
    and try to infer the Clang configuration we need from the DWARF module-import. That was the initial idea but turned out to
    cause a few problems or inconveniences:
    
    * It requires that users compile their programs with C++ modules. Given how experimental C++ modules are makes this feature inaccessible
    for many users. Also it means that people can't just get the benefits of this feature for free when we activate it by default
    (and we can't just close all the associated bug reports).
--
      numbers, while getLLVMRegNumFromEH only returned the "eh" number.
    - getLLVMRegNum asserted if the register was not found, while the second
      function returned -1.
    
    The second distinction was pretty important, but it was very hard to
    infer that from the function name. Aditionally, for the use case of
    dumping dwarf expressions, we needed a function which can work with both
    kinds of number, but does not assert.
    
    This patch solves both of these issues by merging the two functions into
    one, returning an Optional<unsigned> value. While the same thing could
--

commit a206de8a0e6a657b5c5a48e894383590ef942fc7
Author: Stefan Granitz <stefan.graenitz@gmail.com>
Date:   Wed Sep 18 10:20:28 2019 +0000

    [lldb][CMake] Infer `Clang_DIR` if not passed explicitly
    
    Summary:
    If we only get `LLVM_DIR` and find Clang in the same provided build-tree, automatically infer `Clang_DIR` like this:
    
    ```
    LLVM_DIR = /path/to/build-llvm/lib/cmake/llvm
    Clang_DIR = /paht/to/build-llvm/lib/cmake/clang
    ```
--

commit 34d80461ff77269d6342768a5801ec655da7cea7
Author: Steven Wu <stevenwu@apple.com>
Date:   Mon Sep 16 18:49:54 2019 +0000

    [LTO][Legacy] Add new C inferface to query libcall functions
    
    Summary:
    This is needed to implemented the same approach as lld (implemented in r338434)
    for how to handling symbols that can be generated by LTO code generator
    but not present in the symbol table for linker that uses legacy C APIs.
--

commit 5b2b38e053b4638c08da4104e8bb5bd643fde737
Author: Alex Langford <apl@fb.com>
Date:   Fri Sep 13 00:02:05 2019 +0000

    [Target] Move InferiorCall to Process
    
    Summary:
    InferiorCall is only ever used in Process, and it is not specific to
    POSIX. By moving it to Process, we can remove all dependencies on plugins from
    Process. Moving InferiorCall to Process seems to achieve this quite well.
    Additionally, the name InferiorCall is a little vague now, so we rename
    it something a bit more specific.
    
    Reviewers: JDevlieghere, clayborg, compnerd, labath
    
    Subscribers: lldb-commits
--

commit 1b385a180250dac9a3b8aa469a242454322e76bc
Author: Alex Langford <apl@fb.com>
Date:   Wed Sep 11 20:36:28 2019 +0000

    [Plugins/Process] Remove direct use of ClangASTContext from InferiorCallPOSIX
    
    Summary:
    InferiorCallPOSIX directly grabs a ClangASTContext from the Target it
    has and does no error checking. I don't think these functions have a
    reason to know about clang specifically. Additionally, using
    `GetScratchTypeSystemForLanguage` forces us to do error checking since
    it returns an Expected.
    
--
    were running under load.
    
    The library that the MacOSX SystemRuntime has functions that need
    to take a lock, and if that lock is held already, those functions
    will never complete; we're seeing the 15 second timeout being hit
    with inferiors that are doing a lot of enqueuing and dequeuing of
    libdispatch work items causing this deadlocking behavior.
    
    This patch reverts to a very short timeout for these SystemRuntime
    function calls, given the behavior of this library that they are
    calling into.  When lldb is built with AddressSanitizer enabled,
--
    Reland [LifetimeAnalysis] Support more STL idioms (template forward declaration and DependentNameType)
    
    Reland after https://reviews.llvm.org/D66806 fixed the false-positive diagnostics.
    
    Summary:
    This fixes inference of gsl::Pointer on std::set::iterator with libstdc++ (the typedef for iterator
    on the template is a DependentNameType - we can only put the gsl::Pointer attribute
    on the underlaying record after instantiation)
    
    inference of gsl::Pointer on std::vector::iterator with libc++ (the class was forward-declared,
    we added the gsl::Pointer on the canonical decl (the forward decl), and later when the
    template was instantiated, there was no attribute on the definition so it was not instantiated).
    
    and a duplicate gsl::Pointer on some class with libstdc++ (we first added an attribute to
    a incomplete instantiation, and then another was copied from the template definition
--
Date:   Thu Aug 29 18:37:05 2019 +0000

    [test] Fix various module cache bugs and inconsistencies
    
    Currently, lit tests don't set neither the module cache for building
    inferiors nor the module cache used by lldb when running tests.
    Furthermore, we have several places where we rely on the path to the
    module cache being always the same, rather than passing the correct
    value around. This makes it hard to specify a different module cache
    path when debugging a a test.
    
--

    [GlobalISel] Import patterns containing SUBREG_TO_REG
    
    Reuse the logic for INSERT_SUBREG to also import SUBREG_TO_REG patterns.
    
    - Split `inferSuperRegisterClass` into two functions, one which tries to use
      an existing TreePatternNode (`inferSuperRegisterClassForNode`), and one that
      doesn't. SUBREG_TO_REG doesn't have a node to leverage, which is the cause
      for the split.
    
    - Rename GlobalISelEmitterInsertSubreg.td to GlobalISelEmitterSubreg.td and
      update it.
--
    This teaches the importer to handle INSERT_SUBREG instructions.
    
    We were missing patterns involving INSERT_SUBREG in AArch64. It appears in
    AArch64InstrInfo.td 107 times, and 14 times in AArch64InstrFormats.td.
    
    To meaningfully import it, the GlobalISelEmitter needs to know how to infer a
    super register class for a given register class.
    
    This patch introduces the following:
    
    - `getSuperRegForSubReg`, a function which finds the largest register class
    which supports a value type and subregister index
    
    - `inferSuperRegisterClass`, a function which finds the appropriate super
    register class for an INSERT_SUBREG'
    
    - `inferRegClassFromPattern`, a function which allows for some trivial
    lookthrough into instructions
    
    - `getRegClassFromLeaf`, a helper function which returns the register class for
    a leaf `TreePatternNode`
    
--

    TestFunctionStarts.py: add synchronization
    
    We have started to see the no_binary version of this test
    fail. The reason is that the binary was being removed
    before the spawn actually launched the inferior. Add a
    simple filesystem based synchronization to avoid this race.
    
    llvm-svn: 369930

commit 2511b5a4638a3bb519b9b50dabf172ba93962cba
--
Date:   Wed Aug 21 22:08:59 2019 +0000

    [LifetimeAnalysis] Support more STL idioms (template forward declaration and DependentNameType)
    
    Summary:
    This fixes inference of gsl::Pointer on std::set::iterator with libstdc++ (the typedef for iterator
    on the template is a DependentNameType - we can only put the gsl::Pointer attribute
    on the underlaying record after instantiation)
    
    inference of gsl::Pointer on std::vector::iterator with libc++ (the class was forward-declared,
    we added the gsl::Pointer on the canonical decl (the forward decl), and later when the
    template was instantiated, there was no attribute on the definition so it was not instantiated).
    
    and a duplicate gsl::Pointer on some class with libstdc++ (we first added an attribute to
    a incomplete instantiation, and then another was copied from the template definition
--

commit dbc1f207fa726bde99a71fd73f76659f63ed4947
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Wed Aug 14 18:13:00 2019 +0000

    InferAddressSpaces: Move target intrinsic handling to TTI
    
    I'm planning on handling intrinsics that will benefit from checking
    the address space enums. Don't bother moving the address collection
    for now, since those won't need th enums.
    
--

commit 0eac2a296398e0ae12c4dbf5ae6466cb8358b308
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Wed Aug 14 18:01:42 2019 +0000

    InferAddressSpaces: Remove unnecessary check for ConstantInt
    
    The IR is invalid if this isn't a constant since immarg was added.
    
    llvm-svn: 368893

--

commit 2a4f26b4c28aaf9307e690b2f743ffcde5183b9e
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Tue Aug 13 17:15:42 2019 +0000

    [ValueTracking] Improve reverse assumption inference
    
    Use isGuaranteedToTransferExecutionToSuccessor() instead of
    isSafeToSpeculativelyExecute() when seeing whether we can propagate
    the information in an assume backwards in isValidAssumeForContext().
    The latter is more general - it also allows arbitrary loads/stores -
--
    
    Summary:
    Change our edge profiling technique when using instrumentation
    to do not instrument every edge. Instead, build the spanning tree
    for the CFG and omit instrumentation for edges in the spanning tree.
    Infer the edge count for these edges when writing the profile during
    run time. The inference works with a bottom-up traversal of the spanning
    tree and establishes the value of the edge connecting to the parent based
    on a simple flow equation involving output and input edges, where the
    only unknown variable is the parent edge.
    
    This requires some engineering in the runtime lib to support dynamic
--

commit a9d58436af83eeeca376a0686bb13fc43d3f8ece
Author: Pavel Labath <pavel@labath.sk>
Date:   Wed Jul 31 12:06:50 2019 +0000

    Fix issues with inferior stdout coming out of order
    
    Summary:
    We've had a bug where two pieces of code, executing on two threads were
    attempting to write inferior output simultaneously. The first one was in
    Debugger::HandleProcessEvent, which handled the cases where stdout was
    coming while the process was running. The second was in
    CommandInterpreter::IOHandlerInputComplete, which was ensuring that any
    output is printed before the command which caused process to run
    terminates.
--

commit 32211fda29d00b886332e60b0eccaf3e51b4d7bd
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Fri Jul 26 01:00:40 2019 +0000

    [Tests] Split inferior crashing tests
    
    We noticed that TestInferiorCrashing.py and TestRecursiveInferior.py are
    the second and third slowest tests in the test suite. Splitting them up
    allows lit to schedule them more effectively.
    
    llvm-svn: 367077

--
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Thu Jul 25 20:54:41 2019 +0000

    [dotest] Set environment variables after potentialy clearing others.
    
    Dotest contains code to clear DYLD_LIBRARY_PATH for the inferior to not
    propagate sanitized builds. However, it's possible that we want to
    inject a different library path with `--inferior-env`. To make that work
    correctly, we need to do that *after* clearing DYLD_LIBRARY_PATH.
    
    llvm-svn: 367054

commit 007f674c6a4e47cf3a290c0e2d5ba96483d0f8dc
--

commit c3e452acde8a886e257a7893616f8603f38f1951
Author: Louis Dionne <ldionne@apple.com>
Date:   Mon Jul 22 16:24:48 2019 +0000

    [libc++] Do not infer support for C++17 in GCC < 7
    
    libc++'s lit configuration infers the C++ language dialect when it is
    not provided by checking which -std= flags that a compiler supports.
    GCC 5 and GCC 6 have a -std=c++17 flag, however, they do not have full
    C++17 support. The lit configuration has hardcoded logic that removes
    -std=c++1z as an option to test for GCC < 7, but not -std=c++17.
    
    This leads to a bunch of failures when running libc++ tests with GCC 5
    or GCC 6. This patch adds -std=c++17 to the list of flags that are
    discarded for GCC < 7 by lit's language dialect inference.
    
    Thanks to Bryce Adelstein Lelbach for the patch.
    
    Differential Revision: https://reviews.llvm.org/D62874
    
--
Author: Smit Hinsu <hinsu@google.com>
Date:   Wed Jul 17 14:54:39 2019 -0700

    Relax Broadcastable trait to only reject instances that are statically incompatible
    
    Currently, Broadcastable trait also rejects instances when the op result has shape other than what can be statically inferred based on the operand shapes even if the result shape is compatible with the inferred broadcasted shape.
    
    For example,
    (tensor<3x2xi32>, tensor<*xi32>) -> tensor<4x3x2xi32>
    (tensor<2xi32>, tensor<2xi32>) -> tensor<*xi32>
    
--

    Fall back to dyld's _dyld_start when no LC_MAIN / main() func can be found
    
    The new DriverKit user-land kernel drivers in macOS 10.15 / Catalina
    do not have a main() function or an LC_MAIN load command.  lldb uses
    the address of main() as the return address for inferior function
    calls; it puts a breakpoint on main, runs the inferior function call,
    and when the main() breakpoint is hit, lldb knows unambiguously that
    the inferior function call ran to completion - no other function calls
    main.
    
    This change hoists the logic for finding the "entry address" from
    ThreadPlanCallFunction to Target.  It changes the logic to first
    try to get the entry address from the main executable module,
--
    the binary to the correct address in lldb's target section load
    list and loads other ancillary binaries.
    
    The test case is a little involved,
    
    1. it compiles an inferior hello world apple (a.out),
    2. it compiles a program which can create a corefile manually
       with a specific binary's UUID encoded in it,
    3. it gets the UUID of the a.out binary,
    4. it creates a shell script, dsym-for-uuid.sh, which will
       return the full path to the a.out + a.out.dSYM when called
--
    Summary:
    It seems that calling Popen can return to the caller before the started process has read all the needed information
    from its executable. This means that in case we delete the executable while the process is still starting up,
    this test will create a zombie process which in turn leads to a failing test. On my macOS system this happens quite frequently.
    
    This patch fixes this by letting the test synchronize with the inferior after it has started up.
    
    Reviewers: davide
    
    Reviewed By: davide
    
--

commit 9cd82a4fbd2ded1e4d6b3815d153b28057ee1e75
Author: Sanjay Patel <spatel@rotateright.com>
Date:   Wed Jul 10 14:41:47 2019 +0000

    [InferFunctionAttrs] add/adjust tests for dereferenceable; NFC
    
    Based on review comments for D64258.
    
    llvm-svn: 365636

--

commit fb453353dabe4f48de8a12b8ac40d2c839103e80
Author: Sanjay Patel <spatel@rotateright.com>
Date:   Tue Jul 9 14:43:03 2019 +0000

    [InferFunctionAttrs] add more tests for derefenceable; NFC
    
    llvm-svn: 365495

commit be20e36107c596aae3044a559bed8e83b10feb1e
Author: Petar Avramovic <Petar.Avramovic@rt-rk.com>
--

commit 498687bff2b44527960b22fa8f5dffd506d07315
Author: Brian Homerding <homerdin@gmail.com>
Date:   Mon Jul 8 16:33:32 2019 +0000

    Add, and infer, a nofree function attribute
    
    Removing dead code leftover from refactor.
    
    Reviewers: jdoerfert
    
--
Author: Brian Homerding <homerdin@gmail.com>
Date:   Mon Jul 8 16:24:10 2019 +0000

    Add nofree attribute to CodeGenOpenCL/convergent.cl test
    
    The revision at https://reviews.llvm.org/rL365336 added inference of the nofree
    attribute.  This revision updates the test to reflect this.
    
    Differential Revision: https://reviews.llvm.org/D49165
    
    llvm-svn: 365341
--

commit b4b21d807e4f47f1f87b05fddf6bb3167b14476e
Author: Brian Homerding <homerdin@gmail.com>
Date:   Mon Jul 8 15:57:56 2019 +0000

    Add, and infer, a nofree function attribute
    
    This patch adds a function attribute, nofree, to indicate that a function does
    not, directly or indirectly, call a memory-deallocation function (e.g., free,
    C++'s operator delete).
    
--

commit f3481b8c9ab499ebcfa76e5bf5ab76738b9ecbce
Author: Sanjay Patel <spatel@rotateright.com>
Date:   Fri Jul 5 17:49:53 2019 +0000

    [InferFunctionAttrs] add tests for 'dereferenceable' argument attribute; NFC
    
    llvm-svn: 365227

commit f39c2e188d811ede3758eb98aa0201c1c8f978a1
Author: Jonas Devlieghere <jonas@devlieghere.com>
--
Author: Julian Lettner <jlettner@apple.com>
Date:   Fri Jun 28 17:27:30 2019 +0000

    [TSan] Improve handling of stack pointer mangling in {set,long}jmp, pt.1
    
    TSan needs to infer which calls to setjmp/longjmp are corresponding
    pairs. My understanding is, that we can't simply use the jmp_buf
    address, since this buffer is just a plain data structure storing the
    environment (registers) with no additional semantics, i.e., it can be
    copied around and is still expected to work. So we use the stack pointer
    (SP) instead.
--

commit c8232e4310751ffa9fe506c1f6c11cbaa02b4621
Author: Jonas Devlieghere <jonas@devlieghere.com>
Date:   Wed Jun 26 16:12:08 2019 +0000

    [dotest] Add the ability to set environment variables for the inferior.
    
    This patch adds a dotest flag for setting environment variables for the
    inferior. This is different from the current --env flag, which sets
    variables in the debugger's environment. This allows us to set things
    like LD_LIBRARY_PATH for testing.
    
    Differential revision: https://reviews.llvm.org/D63790
    
--

commit c3a7302397746d669e5339ef25506b0429b23354
Author: Kadir Cetinkaya <kadircet@google.com>
Date:   Wed Jun 26 07:39:03 2019 +0000

    [clang][Tooling] Infer target and mode from argv[0] when using JSONCompilationDatabase
    
    Summary:
    Wraps JSON compilation database with a target and mode adding database
    wrapper. So that driver can correctly figure out which toolchain to use.
    
--
    [SYCL] Fix functor versions of cl::sycl::handler kernel invocation APIs.
    
    Remove "template overloads" of single_task and parallel_for invocation APIs
    leading to template instantiation ambiguity in some cases and causing
    compilation errors. The APIs with KernelName and KernelType template
    parameters are changed to infer correct KernelName in both lambda and functor
    flavors of API invocation.
    
    Signed-off-by: Konstantin S Bobrovsky <konstantin.s.bobrovsky@intel.com>

commit 6192978bc01b1e84d2a127302b7de627fe30ef99
--

commit f1ffc4305dd17ecead3079a4473103c28fdbe410
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Mon Jun 24 20:13:13 2019 +0000

    [CVP] Reenable nowrap flag inference
    
    Inference of nowrap flags in CVP has been disabled, because it
    triggered a bug in LFTR (https://bugs.llvm.org/show_bug.cgi?id=31181).
    This issue has been fixed in D60935, so we should be able to reenable
    nowrap flag inference now.
    
    Differential Revision: https://reviews.llvm.org/D62776
    
    llvm-svn: 364228

--

    Add a Linalg convolution op.
    
    This CL adds a conv op that corresponds to the TF description along with its lowering to loops (https://www.tensorflow.org/api_docs/python/tf/nn/convolution).
    
    The dimension of the convolution is inferred from the rank of the views. The other logical
    dimensions correspond to the TF description.
    
    The computation of tiled views need to be updated to work for the input tensor. This is left for a future CL.
    
    PiperOrigin-RevId: 254505644
--

    [SYCL] Turn new address space rules by default
    
    This patch enables new rules for address space handling in SYCL by
    default. Previous rules for address space handling can still be
    enabled by DISABLE_INFER_AS=1 environment variable.
    
    This approach is known as "generic pointers by default", and
    it essentially makes all pointers without an explicit address space
    qualifier to be pointers in generic address space.
    
--

commit fc9aa33def002ad03f6f9102a2833e0476b5d7b5
Author: Mehdi Amini <joker.eph@gmail.com>
Date:   Fri Jun 21 05:43:08 2019 +0000

    Use std::iterator_traits to infer result type of llvm::enumerate iterator wrapper
    
    Update the llvm::enumerate helper class result_pair<R> to use the 'iterator_traits<R>::reference'
    type as the result of 'value()' instead 'ValueOfRange<R> &'. This enables support for iterators
    that return value types, i.e. non reference. This is a common pattern for some classes of
    iterators, e.g. mapped_iterator.
--

commit 1df203d78e478bea989736fd9f1657adea70db0d
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Jun 17 14:13:29 2019 +0000

    InferAddressSpaces: Fix cloning original addrspacecast
    
    If an addrspacecast needed to be inserted again, this was creating a
    clone of the original cast for each user. Just use the original, which
    also saves losing the value name.
    
--

commit b10f0978334ab2beb4477497323ddb6d44399b62
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Jun 17 14:13:24 2019 +0000

    AMDGPU: Ignore subtarget for InferAddressSpaces
    
    Even if the target doesn't have flat instructions, addrspace(0) is
    still flat. It just happens to not work.
    
    llvm-svn: 363561
--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Jun 14 21:38:31 2019 +0000

    SROA: Allow eliminating addrspacecasted allocas
    
    There is a circular dependency between SROA and InferAddressSpaces
    today that requires running both multiple times in order to be able to
    eliminate all simple allocas and addrspacecasts. InferAddressSpaces
    can't remove addrspacecasts when written to memory, and SROA helps
    move pointers out of memory.
    
    This should avoid inserting new commuting addrspacecasts with GEPs,
    since there are unresolved questions about pointer wrapping between
--

commit b20fefc89b85637a78c6f21a9210c7754017c7dc
Author: Martin Storsjö <martin@martin.st>
Date:   Fri Jun 14 17:50:29 2019 +0000

    [COFF] Allow setting subsystem versions while inferring the subsystem type implicitly
    
    Differential Revision: https://reviews.llvm.org/D63248
    
    llvm-svn: 363431

--
    
    In the latest OS betas, the objc runtime has a special interface
    for the debugger, class_getNameRaw(), instead of the existing
    class_getName(), which will return class names in their raw, unmangled
    (in the case of swift) form.  When lldb can access the unmangled
    names of classes, it won't need to fetch them out of the inferior
    process after we run our "get the objc class table" expression.
    
    If the new interface is absent (debugging a process on an older
    target), lldb will fall back to class_getName and reading any class
    names that it got back in demangled form, at a bit of a performance
--
    
    In the latest OS betas, the objc runtime has a special interface
    for the debugger, class_getNameRaw(), instead of the existing
    class_getName(), which will return class names in their raw, unmangled
    (in the case of swift) form.  When lldb can access the unmangled
    names of classes, it won't need to fetch them out of the inferior
    process after we run our "get the objc class table" expression.
    
    If the new interface is absent (debugging a process on an older
    target), lldb will fall back to class_getName and reading any class
    names that it got back in demangled form, at a bit of a performance
--
    [BOLT] Add option to print profile bias stats
    
    Summary:
    Profile bias may happen depending on the hardware counter used
    to trigger LBR sampling, on the hardware implementation and as an
    intrinsic characteristic of relying on LBRs. Since we infer fall-through
    execution and these non-taken branches take zero hardware resources to
    be represented, LBR-based profile likely overrepresents paths with fall
    throughs and underrepresents paths with many taken branches. This patch
    adds an option to print statistics about profile bias so we can better
    understand these biases.
--
    llvm-lib: Disallow mixing object files with different machine types
    
    lib.exe doesn't allow creating .lib files with object files that have
    differing machine types. Update llvm-lib to match.
    
    The motivation is to make it possible to infer the machine type of a
    .lib file in lld, so that it can warn when e.g. a 32-bit .lib file is
    passed to a 64-bit link (PR38965).
    
    Fixes PR38782.
    
--

commit 13dd125043fa40b2bf1f8b5d3143b20caf6c68c2
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Jun 5 18:00:59 2019 +0000

    [Tests] Add poison inference tests for indvars showing both existing transforms, and some room for improvement
    
    llvm-svn: 362628

commit 0a31726d2002249f6a0df05587dcc1cf424e39ef
Author: Cameron McInally <cameron.mcinally@nyu.edu>
--
Date:   Wed Jun 5 03:00:06 2019 +0000

    [NFC][FnAttrs] Stress tests for attribute deduction
    
    This commit is a preparation of upcoming patches on attribute deduction.
    It will shorten the diffs and make it clear what we inferred before.
    
    Reviewers: chandlerc, homerdin, hfinkel, fedor.sergeev, sanjoy, spatel, nlopes
    
    Subscribers: bollu, llvm-commits
    
--

commit 09438a412f14ff762bb885ded271022a913461f7
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Fri May 24 19:31:09 2019 -0700

        Fix incorrect result type inference for nested tuples & remove hacky const case.
    
        Builders can be further refined but wanted to address bug where the result type was used beyond the first depth.
    
    --
    
--
Author: Petr Hosek <phosek@chromium.org>
Date:   Thu May 30 01:24:31 2019 +0000

    [CMake] Set LLVM_PATH in the runtimes build
    
    This avoids using llvm-config for inferring various paths within the
    runtimes build. We also set LLVM_INCLUDE_DIR variable that's used by
    these builds and move assignment of LLVM_BINARY_DIR and LLVM_LIBRARY_DIR
    to the same location for consistency.
    
    Differential Revision: https://reviews.llvm.org/D62637
--

commit e04b002cf89014592b3603bb9af9f74a01626771
Author: Michal Gorny <mgorny@gentoo.org>
Date:   Wed May 29 07:20:30 2019 +0000

    [libunwind] [test] Fix inferring source paths
    
    Fix two issues that caused libcxx source path not to be inferred
    correctly when not specified explicitly:
    
    1. get_lit_conf() uses default value only if the lit variable is set
       to None.  Due to the mehod of substituting lit.site.cfg, they were
       "" rather than None when unset, effectively causing the default never
--
Author: Lang Hames <lhames@gmail.com>
Date:   Tue May 28 23:35:44 2019 +0000

    [ORC] Track JIT symbol states more explicitly.
    
    Prior to this patch, JITDylibs inferred symbol states (whether a symbol was
    newly added, materializing, resolved, or ready to run) via a combination of (1)
    bits in the JITSymbolFlags member, and (2) the state of some internal JITDylib
    data structures. This patch explicitly tracks symbol states by adding a new
    SymbolState member to the symbol table entries, and removing the 'Lazy' and
    'Materializing' bits from JITSymbolFlags. This is a first step towards adding
--
    When the tiny code model is requested for a target machine that does not
    support this, we get an error message (which is nice) but also this diagnostic
    and request to submit a bug report:
    
        fatal error: error in backend: Target does not support the tiny CodeModel
        [Inferior 2 (process 31509) exited with code 0106]
        clang-9: error: clang frontend command failed with exit code 70 (use -v to see invocation)
        (gdb) clang version 9.0.0 (http://llvm.org/git/clang.git 29994b0c63a40f9c97c664170244a7bba5ecc15e) (http://llvm.org/git/llvm.git 95606fdf91c2d63a931e865f4b78b2e9828ddc74)
        Target: arm-arm-none-eabi
        Thread model: posix
        clang-9: note: diagnostic msg: PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace, preprocessed source, and associated run script.
--

commit ff70ee4bd35b3d9906e42a0f7e5364327657eeb8
Author: Michael Liao <michael.hliao@gmail.com>
Date:   Fri May 10 14:57:42 2019 +0000

    [InferAddressSpaces] Enhance the handling of cosntexpr.
    
    Summary:
    - Constant expressions may not be added in strict postorder as the
      forward instruction scan order. Thus, for a constant express (CE0), if
      its operand (CE1) is used in an previous instruction, they are not in
      postorder. However, different from
      `cloneInstructionWithNewAddressSpace`,
      `cloneConstantExprWithNewAddressSpace` doesn't bookkeep uninferred
      instructions for later resolving. That results in failure of inferring
      constant address.
    - This patch adds the support to infer constant expression operand
      recursively, since there won't be loop, if that operand is another
      constant expression.
    
    Reviewers: arsenm
    
--
Author: Stella Stamenova <stilis@microsoft.com>
Date:   Thu May 9 19:49:26 2019 +0000

    Fix TestVSCode_attach on Linux
    
    The test is failing sometimes because the debugger is failing to attach for lack of permissions. The fix is to call lldb_enable_attach inside the inferior main function
    
    llvm-svn: 360371

commit b2b4ed64b9a5efa0d2fe140e14d1ee34ffc98fb0
Author: Richard Smith <richard-llvm@metafoo.co.uk>
--

commit a63a57c50245422b642e4b52454daf5a4ab818aa
Author: Sam McCall <sam.mccall@gmail.com>
Date:   Tue May 7 14:34:06 2019 +0000

    [Tooling] Add -x flags when inferring compile commands for files with no/invalid extension.
    
    Summary: We treat them as headers, as the motivating case is C++ standard library.
    
    Reviewers: kadircet
    
--
Date:   Sun May 5 18:54:16 2019 +0000

    [test] Remove randomness
    
    This particular test fails once every so many runs on GreenDragon. Given
    that the randomness in the inferior isn't critical to the test, I
    removed it in the hopes that it is the cause of the flakiness.
    
    llvm-svn: 359992

commit 361ff2c44738248cb933adbc26318d34acf5fe19
--
Author: Jason Molenda <jmolenda@apple.com>
Date:   Thu May 2 23:14:26 2019 +0000

    Upstreaming an apple local patch by Frederic Riss.
    
    lldb has an expression that runs in the inferior process to collect
    the isa values and hash of the class names for classes in the
    system's shared cache.  In recent OSes, swift classes are in this
    table and the function the jitted expression calls returns demangled
    names.  We need to compute the hashes based on the mangled names.
    So for these names, return a hash value of 0 which indicates that
--
    When the tiny code model is requested for a target machine that does not
    support this, we get an error message (which is nice) but also this diagnostic
    and request to submit a bug report:
    
        fatal error: error in backend: Target does not support the tiny CodeModel
        [Inferior 2 (process 31509) exited with code 0106]
        clang-9: error: clang frontend command failed with exit code 70 (use -v to see invocation)
        (gdb) clang version 9.0.0 (http://llvm.org/git/clang.git 29994b0c63a40f9c97c664170244a7bba5ecc15e) (http://llvm.org/git/llvm.git 95606fdf91c2d63a931e865f4b78b2e9828ddc74)
        Target: arm-arm-none-eabi
        Thread model: posix
        clang-9: note: diagnostic msg: PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace, preprocessed source, and associated run script.
--

commit abe3ea0ec1ba1a340b86f34f1fb5e1c51605c8fd
Author: Michael Liao <michael.hliao@gmail.com>
Date:   Fri May 10 14:57:42 2019 +0000

    [InferAddressSpaces] Enhance the handling of cosntexpr.
    
    Summary:
    - Constant expressions may not be added in strict postorder as the
      forward instruction scan order. Thus, for a constant express (CE0), if
      its operand (CE1) is used in an previous instruction, they are not in
      postorder. However, different from
      `cloneInstructionWithNewAddressSpace`,
      `cloneConstantExprWithNewAddressSpace` doesn't bookkeep uninferred
      instructions for later resolving. That results in failure of inferring
      constant address.
    - This patch adds the support to infer constant expression operand
      recursively, since there won't be loop, if that operand is another
      constant expression.
    
    Reviewers: arsenm
    
--
Author: Stella Stamenova <stilis@microsoft.com>
Date:   Thu May 9 19:49:26 2019 +0000

    Fix TestVSCode_attach on Linux
    
    The test is failing sometimes because the debugger is failing to attach for lack of permissions. The fix is to call lldb_enable_attach inside the inferior main function
    
    llvm-svn: 360371

commit e70dea915c856532a7e0c855ed46539ebb52613f
Author: Richard Smith <richard-llvm@metafoo.co.uk>
--

commit be27f4426aeaea77394834570ad9b0200327c805
Author: Sam McCall <sam.mccall@gmail.com>
Date:   Tue May 7 14:34:06 2019 +0000

    [Tooling] Add -x flags when inferring compile commands for files with no/invalid extension.
    
    Summary: We treat them as headers, as the motivating case is C++ standard library.
    
    Reviewers: kadircet
    
--
Date:   Sun May 5 18:54:16 2019 +0000

    [test] Remove randomness
    
    This particular test fails once every so many runs on GreenDragon. Given
    that the randomness in the inferior isn't critical to the test, I
    removed it in the hopes that it is the cause of the flakiness.
    
    llvm-svn: 359992

commit e608b836d555668c8038273e97d93f006f33f02f
--
Author: Jason Molenda <jmolenda@apple.com>
Date:   Thu May 2 23:14:26 2019 +0000

    Upstreaming an apple local patch by Frederic Riss.
    
    lldb has an expression that runs in the inferior process to collect
    the isa values and hash of the class names for classes in the
    system's shared cache.  In recent OSes, swift classes are in this
    table and the function the jitted expression calls returns demangled
    names.  We need to compute the hashes based on the mangled names.
    So for these names, return a hash value of 0 which indicates that
--

commit b284414a1bf1be379cd28c8a10075f0d5238d18d
Author: Michael Liao <michael.hliao@gmail.com>
Date:   Fri May 10 14:57:42 2019 +0000

    [InferAddressSpaces] Enhance the handling of cosntexpr.
    
    Summary:
    - Constant expressions may not be added in strict postorder as the
      forward instruction scan order. Thus, for a constant express (CE0), if
      its operand (CE1) is used in an previous instruction, they are not in
      postorder. However, different from
      `cloneInstructionWithNewAddressSpace`,
      `cloneConstantExprWithNewAddressSpace` doesn't bookkeep uninferred
      instructions for later resolving. That results in failure of inferring
      constant address.
    - This patch adds the support to infer constant expression operand
      recursively, since there won't be loop, if that operand is another
      constant expression.
    
    Reviewers: arsenm
    
--
Author: Stella Stamenova <stilis@microsoft.com>
Date:   Thu May 9 19:49:26 2019 +0000

    Fix TestVSCode_attach on Linux
    
    The test is failing sometimes because the debugger is failing to attach for lack of permissions. The fix is to call lldb_enable_attach inside the inferior main function
    
    llvm-svn: 360371

commit d9c6b039dbcf4a38edf62a5491c2b024724e1b5d
Author: Richard Smith <richard-llvm@metafoo.co.uk>
--

commit 87ad30be5ffa6fa2acbc703e4a85a73fd1181016
Author: Sam McCall <sam.mccall@gmail.com>
Date:   Tue May 7 14:34:06 2019 +0000

    [Tooling] Add -x flags when inferring compile commands for files with no/invalid extension.
    
    Summary: We treat them as headers, as the motivating case is C++ standard library.
    
    Reviewers: kadircet
    
--
Date:   Sun May 5 18:54:16 2019 +0000

    [test] Remove randomness
    
    This particular test fails once every so many runs on GreenDragon. Given
    that the randomness in the inferior isn't critical to the test, I
    removed it in the hopes that it is the cause of the flakiness.
    
    llvm-svn: 359992

commit 5170c0e5fe979130286bbf2b9a27e124fcd70b28
--
Author: Jason Molenda <jmolenda@apple.com>
Date:   Thu May 2 23:14:26 2019 +0000

    Upstreaming an apple local patch by Frederic Riss.
    
    lldb has an expression that runs in the inferior process to collect
    the isa values and hash of the class names for classes in the
    system's shared cache.  In recent OSes, swift classes are in this
    table and the function the jitted expression calls returns demangled
    names.  We need to compute the hashes based on the mangled names.
    So for these names, return a hash value of 0 which indicates that
--
Author: Pavel Labath <pavel@labath.sk>
Date:   Mon Apr 29 14:04:41 2019 +0000

    Fix a typo in x86-64-gp-write.test
    
    The test was building the wrong inferior, causing failures.
    
    llvm-svn: 359451

commit de9d7c4e04e5f0d614d1a74cecaf2e78677c979e
Author: Pavel Labath <pavel@labath.sk>
--
    
    'libarclite' usually lives in the same toolchain as 'clang'. However, the
    Swift open source toolchains for macOS distribute Clang without 'libarclite'.
    In that case, to allow the linker to find 'libarclite', we point to the
    'libarclite' that should be in the XcodeDefault toolchain instead. The
    path to the toolchain is inferred from the SDK path if it's specified.
    
    https://bugs.swift.org/browse/SR-9972
    rdar://49947573
    
    llvm-svn: 359353
--

commit 66f612601dc9bb82cc7f277f12f0ded3d8069e38
Author: Sven van Haastregt <sven.vanhaastregt@arm.com>
Date:   Fri Apr 26 09:21:25 2019 +0000

    [InferAddressSpaces] Add AS parameter to the pass factory
    
    This enables the pass to be used in the absence of
    TargetTransformInfo. When the argument isn't passed, the factory
    defaults to UninitializedAddressSpace and the flat address space is
    obtained from the TargetTransformInfo as before this change. Existing
--
    [SYCL] Optionally override addrspace map for SYCL device code
    
    Default address space (applies when no explicit address space was
    specified) now maps to generic (4) address space.
    
    Set ENABLE_INFER_AS=1 to enable this mode.
    
    Signed-off-by: Andrew Savonichev <andrew.savonichev@intel.com>

commit 8ff48056de3d4a9c61214899b0160ef5c75825a2
Author: Andrew Savonichev <andrew.savonichev@intel.com>
Date:   Tue Nov 20 18:30:26 2018 +0300

    [SYCL] Optionally remove ASFixer usage
    
    Set ENABLE_INFER_AS=1 environment variable to remove ASFixer pass.
    
    Signed-off-by: Andrew Savonichev <andrew.savonichev@intel.com>

commit 8f8827014d6e095d0d7f1002fdec30fe47a6d7a3
Author: Adam Balogh <adam.balogh@ericsson.com>
--
      AssertionError: 2 != 1 : verify step out variable
    
    AFAICT, lldb-vscode is doing the right thing here, and the problem is
    that the test is not taking this sequence of events into account. Since
    the test is about testing stepping, it does not seem necessary to have
    threads in the inferior at all, so I just rewrite the test to execute
    the code we're supposed to step through directly on the main thread.
    
    Reviewers: clayborg, jgorbe
    
    Subscribers: jfb, lldb-commits
--

commit 2e33f8de57744ba800f1831d76cb2b4b6b68d8bc
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Sat Apr 20 07:43:15 2019 +0000

    [CVP] Add tests for sub nowrap inference; NFC
    
    These are baseline tests for D60036.
    
    Patch by Luqman Aden.
    
--
Author: Pavel Labath <pavel@labath.sk>
Date:   Fri Apr 12 08:02:28 2019 +0000

    Make TestPrintStackTraces deterministic
    
    This test contained an incredibly complicated inferior, but in reality,
    all it was testing was that we can backtrace up to main and see main's
    arguments.
    
    However, the way this was implemented (setting a breakpoint on a
    separate thread) meant that each time the test would run, it would stop
--
    is not even our fault that we cannot backtrace out because the C library
    contains a lot of assembly routines that may not have correct unwind
    info associated with them.
    
    For this reason the test has accumulated numerous @expectedFail/Flaky
    decorators. In this patch, I replace the inferior with one that does not
    depend on libc functions. Instead I create a couple of stack frames of
    user code, and have the test verify that. I also simplify the test by
    using lldbutil.run_to_source_breakpoint.
    
    llvm-svn: 358266
--

commit d33a9dcc73252ee129c58bd975f43e7e7b198050
Author: Mehdi Amini <aminim@google.com>
Date:   Thu Apr 4 18:31:31 2019 -0700

        Add Chapter 4 for the Toy tutorial: shape inference, function specialization, and basic combines
    
    --
    
    PiperOrigin-RevId: 242050514

--
Date:   Tue Apr 2 07:47:38 2019 +0000

    Simplify TestGdbRemoteRegisterState
    
    While reviewing D56233 it became clear to me that this test can be
    simplified. There's no need for a start-stop cycle in the inferior -- we
    can start fiddling with its registers as soon as it is launched.
    
    llvm-svn: 357451

commit 9d1449246dd76a2e8c94bbeae055318356ee301a
--
Date:   Wed Mar 27 13:38:48 2019 -0700

    Allow to mutate the type of MLIR Value in-place
    
    This avoid trashing memory by cloning and replaceAllUseswith when
    performing type inference.
    
    PiperOrigin-RevId: 240631137

commit b0244b66a53f99134a7b56ab347f6a306c611d26
Author: Jacques Pienaar <jpienaar@google.com>
--

    Add a method to swap the type of a function in-place
    
    This is motivated by the need to translate function across dialect which
    requires morphing their type, as well as the Toy tutorial part on interprocedural
    shape inference.
    
    The alternative is cloning the function, but it is heavy and it seems like an
    arbitrary restriction to forbid morphing the function type.
    
    PiperOrigin-RevId: 240615755
--
    non-MLIR libraries (i.e. in the tpu_ops.inc and convert_tensor.cc files). Using
    `FloatAttr::getValue().convertToFloat()` and
    `FloatAttr::getValue().convertToDouble()` is not safe because interally they
    checke the semantics of the APFloat in the attribute, and the semantics is not
    always specified (the default value is f64 then convertToFloat will fail) or
    inferred incorrectly (for example, using 1.0 instead of 1.f for IEEEFloat).
    Calling these convert methods without knowing the semantics can usually crash
    the compiler.
    
    This new method converts the value of a FloatAttr to double even if it loses
    precision. Currently this method can be used to read in f32 data from arrays.
--
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Thu Dec 20 02:57:32 2018 -0800

    Change attribute to be input argument.
    
    Change operands to arguments in Op and use it for both operands and arguments. This unifies the way that operands and attributes are specified and the intended way that matching/creating ops with attributes will look. Both can now be represented using the same dag structure (and also makes the ordering more explicit). Derived attributes are not considered as part of the arguments (as they are inferred from the created op, not something needed to created it).
    * Generate named operand accessors;
    * Simplified the way of specifying Attr and use ElementAttr for TFL_Const instead.
    * Fix a incorrect assertion generated;
    
    The input parsing can be made more robust, I'll address that in a follow up.
--
    * Validated TF::FusedBatchNormOp's operands
    * Added converter from tf.FusedBatchNorm to tfl math ops
    
    In the converter, we additionally check that the 'is_training'
    attribute in tf.FusedBatchNorm is false and the last 4 outputs
    are all not used (true for inference). These requirements do
    not exist in the original TOCO source code, which just silently
    ignores the last 4 outputs.
    
    PiperOrigin-RevId: 223027333

--
Date:   Wed Sep 12 10:21:23 2018 -0700

    Extend getConstantTripCount to deal with a larger subset of loop bounds; make loop
    unroll/unroll-and-jam more powerful; add additional affine expr builder methods
    
    - use previously added analysis/simplification to infer multiple of unroll
      factor trip counts, making loop unroll/unroll-and-jam more general.
    
    - for loop unroll, support bounds that are single result affine map's with the
      same set of operands. For unknown loop bounds, loop unroll will now work as
      long as trip count can be determined to be a multiple of unroll factor.
--

commit b18c770d90e1a218dd93fbba37f4ec528773c973
Author: Chris Lattner <clattner@google.com>
Date:   Thu Sep 6 17:31:21 2018 -0700

    Teach RaiseControlFlow to handle IfOp's with partially infered shapes,
    inserting shape_casts as necessary.
    
    Along the way:
     - Add some missing accessors to the AtLeastNOperands trait.
     - Implement shape_cast / ShapeCastOp standard op.
--
    [mlir] Add initial graphdef->mlir generation
    
    This CL adds:
      * One graphdef extracted from the TF test suite. More will come.
      * Scaffolding for the "graphdef2mlir" tool.
      * Importing of simple graphs. Type inference is not yet working, and attributes do not work either.
      * A fix for CFGFunction::~CFGFunction to not die if the function was destroyed without a terminator (for example if we exit early due to an error).
    
    PiperOrigin-RevId: 206965992

commit 8eaf382734b22f3ef6e9e0d9e6089333aa857a55
--
commit 6af866c58d21813fb243906611d02bb2a8ffa43a
Author: Chris Lattner <clattner@google.com>
Date:   Fri Jun 29 22:08:05 2018 -0700

    Enhance the type system to support arbitrary precision integers, which are
    important for low-bitwidth inference cases and hardware synthesis targets.
    
    Rename 'int' to 'affineint' to avoid confusion between "the integers" and "the int
    type".
    
    PiperOrigin-RevId: 202751508
--

commit 8ff45859c280089fc3371c45e16efcd57c0e9ce2
Author: Davide Italiano <davide@freebsd.org>
Date:   Thu Mar 28 00:07:33 2019 +0000

    [Process] Reorder declarations and document ReadMemoryFromInferior.
    
    llvm-svn: 357136

commit 454e9428db20b43c081cba49820f9487a6805761
Author: Davide Italiano <davide@freebsd.org>
--

commit 03dbfc2eefdbac5e3bc464b279e751c4f39b28f2
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Wed Mar 20 21:42:17 2019 +0000

    [InstCombine] Add additional sub nsw inference tests; NFC
    
    nsw can be determined based on known bits here, but currently
    isn't.
    
    llvm-svn: 356620
--

commit 55881d5def969c9e41fca87b51018d470340a888
Author: Jordan Rupprecht <rupprecht@google.com>
Date:   Wed Mar 13 21:13:01 2019 +0000

    [clang-format] Propagate inferred language to getLLVMStyle() in getPredefinedStyle()
    
    rC355158 added an optional language parameter to getLLVMStyle(), but this parameter was not used in getPredefinedStyle(). Because unit tests directly specify the style, this codepath wasn't tested. Add an additional unit test for getStyle().
    
    llvm-svn: 356099

--

commit 97f51c95db1b0b7f2fdcc6f1254de125addc229b
Author: Adrian Prantl <aprantl@apple.com>
Date:   Tue Mar 12 22:20:29 2019 +0000

    Fix the broken Batch test by passing a custom module cache to the inferior lldb.
    
    llvm-svn: 355991

commit df851477077968699fc3fedd1602caec4b0c56b9
Author: Adrian Prantl <aprantl@apple.com>
--

commit 2226e9a745b91bdd8a97cb508c1f90c411f3e965
Author: Philip Reames <listmail@philipreames.com>
Date:   Fri Mar 1 18:45:05 2019 +0000

    [LICM] Infer proper alignment from loads during scalar promotion
    
    This patch fixes an issue where we would compute an unnecessarily small alignment during scalar promotion when no store is not to be guaranteed to execute, but we've proven load speculation safety. Since speculating a load requires proving the existing alignment is valid at the new location (see Loads.cpp), we can use the alignment fact from the load.
    
    For non-atomics, this is a performance problem. For atomics, this is a correctness issue, though an *incredibly* rare one to see in practice. For atomics, we might not be able to lower an improperly aligned load or store (i.e. i32 align 1). If such an instruction makes it all the way to codegen, we *may* fail to codegen the operation, or we may simply generate a slow call to a library function. The part that makes this super hard to see in practice is that the memory location actually *is* well aligned, and instcombine knows that. So, to see a failure, you have to have a) hit the bug in LICM, b) somehow hit a depth limit in InstCombine/ValueTracking to avoid fixing the alignment, and c) then have generated an instruction which fails codegen rather than simply emitting a slow libcall. All around, pretty hard to hit.
    
--
Date:   Wed Feb 27 22:23:51 2019 +0000

    [sanitizer] Fix compilation errors in r355030.
    
    Disable hwasan interceptor on non-linux, non-x86-or-arm platforms.
    Add @plt to the asm call that clang intergrated-as infers but gcc does
    not.
    
    llvm-svn: 355041

commit fcfa7c5f92eb39486298e86b03e634e08a204c79
--

    [DTU] Refine the interface and logic of applyUpdates
    
    Summary:
    This patch separates two semantics of `applyUpdates`:
    1. User provides an accurate CFG diff and the dominator tree is updated according to the difference of `the number of edge insertions` and `the number of edge deletions` to infer the status of an edge before and after the update.
    2. User provides a sequence of hints. Updates mentioned in this sequence might never happened and even duplicated.
    
    Logic changes:
    
    Previously, removing invalid updates is considered a side-effect of deduplication and is not guaranteed to be reliable. To handle the second semantic, `applyUpdates` does validity checking before deduplication, which can cause updates that have already been applied to be submitted again. Then, different calls to `applyUpdates` might cause unintended consequences, for example,
--
    DTU(Lazy) and Edge A->B exists.
    1. DTU.applyUpdates({{Delete, A, B}, {Insert, A, B}}) // User expects these 2 updates result in a no-op, but {Insert, A, B} is queued
    2. Remove A->B
    3. DTU.applyUpdates({{Delete, A, B}}) // DTU cancels this update with {Insert, A, B} mentioned above together (Unintended)
    ```
    But by restricting the precondition that updates of an edge need to be strictly ordered as how CFG changes were made, we can infer the initial status of this edge to resolve this issue.
    
    Interface changes:
    The second semantic of `applyUpdates`  is separated to `applyUpdatesPermissive`.
    These changes enable DTU(Lazy) to use the first semantic if needed, which is quite useful in `transforms/utils`.
    
--

commit fdf651ee8d0b233bdeaf35b07033c1338b54fb39
Author: Joey Gouly <joey.gouly@gmail.com>
Date:   Thu Feb 21 13:10:37 2019 +0000

    [InferAddressSpaces] Fix fallthrough error
    
    llvm-svn: 354580

commit dcaa939ab75eadf0bea3753046b206288e94a7e9
Author: Diana Picus <diana.picus@linaro.org>
--

commit 92af1360f33178a5d8d02afb5a81d185cec2acc1
Author: Joey Gouly <joey.gouly@gmail.com>
Date:   Thu Feb 21 12:31:36 2019 +0000

    [InferAddressSpaces] Fix crash on select of non-ptr operands
    
    Check the operands of a select are pointers, to determine if it is an address
    expression or not.
    
    https://reviews.llvm.org/D58226
--
Author: Andrew Scheidecker <andrew@scheidecker.net>
Date:   Tue Feb 19 21:21:54 2019 +0000

    [ConstantFold] Fix misfolding fcmp of a ConstantExpr NaN with itself.
    
    The code incorrectly inferred that the relationship of a constant expression
    to itself is FCMP_OEQ (ordered and equal), when it's actually FCMP_UEQ
    (unordered *or* equal). This change corrects that, and adds some more limited
    folds that can be done in this case.
    
    Differential revision: https://reviews.llvm.org/D51216
--

commit 3062887c9956f2eeabc2e017fbab5c3ab94710b9
Author: Erik Pilkington <erik.pilkington@gmail.com>
Date:   Mon Feb 4 23:30:57 2019 +0000

    [SemaObjC] Don't infer the availabilty of +new from -init if the receiver has Class type
    
    rdar://47713266
    
    Differential revision: https://reviews.llvm.org/D57712
    
--
    
    This patch adds implicit ST0 uses/defs to the load/store instructions to prevent this from happening.
    
    I plan to fix all of the FP instructions, but the binops are bit trickier to get right. So I've chosen fixing the known test cases as a good first step.
    
    I think we also need to update the tablegen descriptions so MS inline assembly infers the right clobbers, but I haven't checked that yet.
    
    Differential Revision: https://reviews.llvm.org/D57644
    
    llvm-svn: 353070

--
    void test() { foo(""); }
    ```
    
    The diagnostic produced said it can't bind char[1] to std::string
    const&. It didn't mention std::string is incomplete. The user had to
    infer that.
    
    This patch causes the diagnostic to now say "incomplete type".
    
    llvm-svn: 352927

--

    [DAG][SystemZ] Define unwrapAddress for PCREL_WRAPPER.
    
    Summary:
    Like with X86, this allows better DAG-level alias analysis and
    alignment inference for wrapped addresses.
    
    Reviewers: jonpa, uweigand
    
    Reviewed By: uweigand
    
--
    guaranteed to be preferred over the attribute specified in the pragma.
    
    This commit fixes this by introducing a priority field to the availability
    attribute to control how they're merged. Attributes with higher priority are
    applied over attributes with lower priority for the same platform. The
    implicitly inferred attributes are given the lower priority. This ensures that:
    
    - explicit attributes are preferred over all other attributes.
    - implicitly inferred attributes that are inferred from an explicit attribute
      are discarded if there's an explicit attribute or an attribute specified
      using a #pragma for the same platform.
    - implicitly inferred attributes that are inferred from an attribute in the
      #pragma are not used if there's an explicit, explicit #pragma, or an
      implicit attribute inferred from an explicit attribute for the declaration.
    
    This is the resulting ranking:
    
    `platform availability > platform availability from pragma > inferred availability > inferred availability from pragma`
    
    rdar://46390243
    
    Differential Revision: https://reviews.llvm.org/D56892
    
--

    [libcxx] Call __count_bool_true for bitset count
    
    This patch aims to help clang with better information so it can inline
    __bit_reference count function usage for both std::biset. Current clang
    inliner can not infer that the passed typed will be used only to select
    the optimized variant, it evaluates the type argument and type check as
    a load plus compare (although later optimization phases correctly
    optimized this out).
    
    It is mainly to help llvm inliner to generate better code for std::bitset
--
      +-------------------+
    ```
    
    Prior to extraction, the stack coloring pass sees that the slots for 'x'
    and 'y' are in-use at the same time. After extraction, the coloring pass
    infers that 'x' and 'y' are *not* in-use concurrently, because markers
    from 'rhs' are no longer available to help decide otherwise.
    
    This leads to a miscompile, because the stack slots actually are in-use
    concurrently in the extracted function.
    
--

commit 7f17c227ce3bf8bc139fb192c15cd3257d23fda0
Author: Stella Stamenova <stilis@microsoft.com>
Date:   Thu Dec 20 20:26:05 2018 +0000

    [lldbsuite] Un-xfail several tests in TestInferiorCrashing on Windows
    
    Several of the tests are now passing. This change is enabling them.
    
    llvm-svn: 349813

--
Date:   Mon Dec 17 21:01:04 2018 +0000

    Make test/Driver/darwin-sdk-version.c pass on hosts < macOS10.14
    
    The test test/Driver/darwin-sdk-version.c from r349380 checks if the macOS
    deployment target can be correctly inferred from the SDK version. When the
    SDK version is > host version, the driver will pick the host version, so
    the old test failed on macOS < 10.14. This commit makes this test more
    resilient by using an older SDK version.
    
    llvm-svn: 349393
--

    [clang-tidy] Add the abseil-duration-subtraction check
    
    Summary:
    This check uses the context of a subtraction expression as well as knowledge
    about the Abseil Time types, to infer the type of the second operand of some
    subtraction expressions in Duration conversions. For example:
    
       absl::ToDoubleSeconds(duration) - foo
    
    can become
--
    
    The issue was that I was passing a null pointer for the
    "CreateMemoryInstance" callback when registering ObjectFileBreakpad,
    which caused crashes when attemping to load modules from memory. The
    correct thing to do is to pass a callback which always returns a null
    pointer (as breakpad files are never loaded in inferior memory).
    
    It turns out that there is only one test which exercises this code path,
    and it's mac-only, so I've create a new test which should run everywhere
    (except windows, as one cannot delete an executable which is being run).
    Unfortunately, this test still fails on linux for other reasons, but at
--
    [build.py] A few general improvements.
    
    This makes -mode=compile support multiple inputs (and hence
    multiple outputs).
    
    It also makes the value of -arch for compiling inferiors default
    to the architecture that LLDB is built in.  This can still be
    overridden however.
    
    Differential Revision: https://reviews.llvm.org/D55230
    
--

    [lit] Add a generic build script with a lit substitution.
    
    This adds a script called build.py as well as a lit substitution
    called %build that we can use to invoke it.  The idea is that
    this allows a lit test to build test inferiors without having
    to worry about architecture / platform specific differences,
    command line syntax, finding / configurationg a proper toolchain,
    and other issues.  They can simply write something like:
    
    %build --arch=32 -o %t.exe %p/Inputs/foo.cpp
--
Date:   Fri Nov 16 01:18:04 2018 +0000

    [VFS] Implement `RedirectingFileSystem::getRealPath`.
    
    It fixes the case when Objective-C framework is added as a subframework
    through a symlink. When parent framework infers a module map and fails
    to detect a symlink, it would add a subframework as a submodule. And
    when we parse module map for the subframework, we would encounter an
    error like
    
    > error: umbrella for module 'WithSubframework.Foo' already covers this directory
    
    By implementing `getRealPath` "an egregious but useful hack" in
    `ModuleMap::inferFrameworkModule` works as expected.
    
    LLVM commit is r347009.
    
    rdar://problem/45821279
    
--
Date:   Fri Nov 16 01:15:54 2018 +0000

    [VFS] Implement `RedirectingFileSystem::getRealPath`.
    
    It fixes the case when Objective-C framework is added as a subframework
    through a symlink. When parent framework infers a module map and fails
    to detect a symlink, it would add a subframework as a submodule. And
    when we parse module map for the subframework, we would encounter an
    error like
    
    > error: umbrella for module 'WithSubframework.Foo' already covers this directory
    
    By implementing `getRealPath` "an egregious but useful hack" in
    `ModuleMap::inferFrameworkModule` works as expected.
    
    rdar://problem/45821279
    
    Reviewers: bruno, benlangmuir, erik.pilkington
    
--
    Implement basic DidAttach and DidLaunch for DynamicLoaderWindowsDYLD
    
    Summary:
    This commit implements basic DidAttach and DidLaunch for the windows
    DynamicLoader plugin which allow us to load shared libraries from the
    inferior.
    
    Reviewers: sas, zturner
    
    Reviewed By: zturner
    
--
Date:   Thu Nov 15 11:51:13 2018 +0000

    [llvm-objdump] Use `auto` declaration in typecasting
    
    Summary:
    According to `MaskRay`, use `auto` for type inference, according to coding standards.
    Delete some comments, because these comments can be easily inferred from codes.
    
    Reviewers: jhenderson, MaskRay
    
    Reviewed By: jhenderson
    
--
Date:   Mon Nov 12 16:22:28 2018 +0000

    [CMake] Allow version overrides with -DLLDB_VERSION_MAJOR/MINOR/PATCH/SUFFIX
    
    Summary:
    This follows the approach in Clang. If no overrides are given, LLDB_VERSION_* is inferred from LLVM_VERSION_*. This mimics the current behaviour (PACKAGE_VERSION itself is generated from LLVM_VERSION_*).
    For in-tree builds LLVM_VERSION_* will be defined at this point already. For standalone builds, LLDBConfig.cmake is included after LLDBStandalone.cmake which includes LLVMConfig.cmake.
    
    Reviewers: labath, xiaobai
    
    Subscribers: mgorny, friss, aprantl, lldb-commits
--
    [SimpleLoopUnswitch] partial unswitch needs to be careful when replacing invariants with constants
    
    When partial unswitch operates on multiple conditions at once, .e.g:
       if (Cond1 || Cond2 || NonInv) ...
    
    it should infer (and replace) values for individual conditions only on one
    side of unswitch and not another.
    
    More precisely only these derivations hold true:
       (Cond1 || Cond2) == false  =>  Cond1 == Cond2 == false
       (Cond1 && Cond2) == true   =>  Cond1 == Cond2 == true
--

commit a83403892ac33484c0a830a21313fdf2473bcd0f
Author: Matthias Braun <matze@braunis.de>
Date:   Tue Oct 30 23:28:27 2018 +0000

    MachineOperand/MIParser: Do not print debug-use flag, infer it
    
    The debug-use flag must be set exactly for uses on DBG_VALUEs.  This is
    so obvious that it can be trivially inferred while parsing. This will
    reduce noise when printing while omitting an information that has little
    value to the user.
    
    The parser will keep recognizing the flag for compatibility with old
    `.mir` files.
--

commit 7c7760da7ea03c154bb4f7fb4c50b1d947e4efdb
Author: David Bolvansky <david.bolvansky@gmail.com>
Date:   Tue Oct 16 21:18:31 2018 +0000

    [InstCombine] Cleanup libfunc attribute inferring
    
    Reviewers: efriedma
    
    Reviewed By: efriedma
    
--
Date:   Fri Oct 12 16:55:39 2018 +0000

    [python] [tests] Remove cdb lookup failure test
    
    Remove the test checking for compilation db lookup failure.
    Since r342228, JSONCompilationDatabasePlugin infers compile commands for
    missing files, therefore making the lookup always succeed.
    
    Differential Revision: https://reviews.llvm.org/D53202
    
    llvm-svn: 344364
--
Date:   Tue Oct 9 15:53:14 2018 +0000

    [CUDA][HIP] Fix ShouldDeleteSpecialMember for inherited constructors
    
    ShouldDeleteSpecialMember is called upon inherited constructors.
    It calls inferCUDATargetForImplicitSpecialMember.
    
    Normally the special member enum passed to ShouldDeleteSpecialMember
    matches the constructor. However this is not true when inherited
    constructor is passed, where DefaultConstructor is passed to treat
    the inherited constructor as DefaultConstructor. However
    inferCUDATargetForImplicitSpecialMember expects the special
    member enum argument to match the constructor, which results
    in assertion when this expection is not satisfied.
    
    This patch checks whether the constructor is inherited. If true it will
    get the real special member enum for the constructor and pass it
    to inferCUDATargetForImplicitSpecialMember.
    
    Differential Revision: https://reviews.llvm.org/D51809
    
    llvm-svn: 344057

--

commit 08ab568aaaaab16b68453a0f16e7ee5853ccdd5d
Author: Martin Storsjö <martin@martin.st>
Date:   Fri Oct 5 19:43:24 2018 +0000

    [COFF] Do MinGW specific entry/subsystem inference
    
    ld.bfd doesn't do any inference of subsystem; unless the windows
    subsystem is specified, the console subsystem is used.
    
    For the console subsystem, the entry point is called mainCRTStartup,
    regardless of whether the the user code entry point is main or wmain.
    The same goes for the windows subsystem, where the entry point always
    is WinMainCRTStartup, for both WinMain and wWinMain in user code.
    
    One detail that we don't emulate, is that if the inferred entry point
    is undefined, ld.bfd silently just sets the entry point to the start
    of the image. And if an explicit entry point is set, but it is
    undefined, the link still succeeds but the linker warns about the
    entry point not being found.
    
--

    clang-format: [JS] conditional types.
    
    Summary:
    This change adds some rudimentary support for conditional types.
    Specifically it avoids breaking before `extends` and `infer` keywords,
    which are subject to Automatic Semicolon Insertion, so breaking before
    them creates incorrect syntax.
    
    The actual formatting of the type expression is odd, but there is as of
    yet no clear idea on how to format these.
--

commit 6cdab204f098b952dec70cb34d90c482ded9fe13
Author: Craig Topper <craig.topper@intel.com>
Date:   Mon Sep 24 18:55:41 2018 +0000

    [X86] Infer 64bit feature support from the CPUID results in getHostCPUFeatures.
    
    After r341022, we more strictly check the 64bit feature in X86Subtargets constructor when a 64-bit triple is used. If we don't infer this feature for autodetected CPUs we might incorrectly report an error if the CPU name wasn't autodetected to a CPU that supports 64-bit.
    
    llvm-svn: 342914

commit d32508a932ceafe070f66e8ce25f102a66f5a3e0
Author: Calixte Denizet <cdenizet@mozilla.com>
--
    
    Summary:
    FileIndex now provides explicit interfaces for preamble and main file updates.
    This avoids growing parameter list when preamble and main symbols diverge
    further (e.g. D52078). This also gets rid of the hack in `indexAST` that
    inferred main file index based on `TopLevelDecls`.
    
    Also separate `indexMainDecls` from `indexAST`.
    
    Reviewers: sammccall
    
--

commit 053c9ee82650907a0e12a65ca43a1958692ed2fd
Author: Sam McCall <sam.mccall@gmail.com>
Date:   Fri Sep 14 12:32:08 2018 +0000

    [clangd] Don't double-infer compile commands after r342228
    
    llvm-svn: 342229

commit 9d3530bd4ebaa7dc02494db440026f87f2bb8bc4
Author: Sam McCall <sam.mccall@gmail.com>
Date:   Fri Sep 14 12:24:09 2018 +0000

    [Tooling] JSONCompilationDatabasePlugin infers compile commands for missing files
    
    Summary:
    See the existing InterpolatingCompilationDatabase for details on how this works.
    We've been using this in clangd for a while, the heuristics seem to work well.
    
--
    adding AVX register support for linux. It does not mention the alignment
    specifically, so I am guessing this was just put there because the
    corresponging XSAVE cpu instruction requires its buffer to be 64-byte
    aligned. However, LLDB will not be normally reading this struct via the
    XSAVE instruction directly. Instead we will ask the kernel to copy the
    buffer saved when suspeding the inferior. This should not require such
    strict alignment (in fact, linux kernel will happily do this for any
    alignment).
    
    llvm-svn: 342029

--

commit 4257857bf8a508b56f73f61bdf941194913bac92
Author: Erik Pilkington <erik.pilkington@gmail.com>
Date:   Mon Sep 10 22:20:09 2018 +0000

    [Sema][ObjC] Infer availability of +new from availability of -init.
    
    When defined in NSObject, +new will call -init. If -init has been marked
    unavailable, diagnose uses of +new.
    
    rdar://18335828
--
Date:   Sat Sep 1 12:15:46 2018 +0000

    Ignore unicode decode errors in test suite's encoded_file class
    
    These happen in a couple of tests when lldb tries to pretty print a
    const char * variable in the inferior which points to garbage. Instead,
    we have the python replace the invalid sequences with the unicode
    replacement character.
    
    llvm-svn: 341274

--
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
Date:   Sun Aug 26 06:27:23 2018 +0000

    [index] Introduce 'ProtocolInterface' as part of SymbolPropertySet
    
    This is useful to directly infer that a method or property is from a protocol interface
    at the point of the symbol occurrences.
    
    llvm-svn: 340696

commit 4240ecb9097e1ce7f7f4aa5194e17d18ebce359a
--

commit 3ecabd709f7d7031df9368d27d0b300460d51cf1
Author: Brian Homerding <homerdin@gmail.com>
Date:   Thu Aug 23 15:05:22 2018 +0000

    [FunctionAttrs] Infer WriteOnly Function Attribute
    
    These changes expand the FunctionAttr logic in order to mark functions as
    WriteOnly when appropriate. This is done through an additional bool variable
    and extended logic.
    
--
Date:   Tue Aug 21 21:24:31 2018 +0000

    [AMDGPU] Consider loads from flat addrspace to be potentially divergent
    
    In general we can't assume flat loads are uniform, and cases where we can prove
    they are should be handled through infer-address-spaces.
    
    Differential Revision: https://reviews.llvm.org/D50991
    
    llvm-svn: 340343

--

commit 45e61c5f9919e7a04bbe4de879a639147e66715d
Author: Simon Pilgrim <llvm-dev@redking.me.uk>
Date:   Fri Aug 17 15:54:07 2018 +0000

    [TableGen] TypeInfer - Cache the legal types as TypeSetByHwMode
    
    We were just caching the MVT set of legal types, then every call creating a new TypeSetByHwMode with it and passing it back on the stack. There's no need to do this - we can create and cache the whole TypeSetByHwMode once and return a const reference to it each time.
    
    Additionally, TypeInfer::expandOverloads wasn't making use of the fact that the cache just contains a default mode containing all the types.
    
    Saves up to 30secs in debug builds of x86 -gen-dag-isel.
    
    Differential Revision: https://reviews.llvm.org/D50903
    
--
Date:   Tue Aug 14 18:36:54 2018 +0000

    [Tablegen][MCInstPredicate] Removed redundant template argument from class TIIPredicate, and implemented verification rules for TIIPredicates.
    
    This patch removes redundant template argument `TargetName` from TIIPredicate.
    Tablegen can always infer the target name from the context. So we don't need to
    force users of TIIPredicate to always specify it.
    
    This allows us to better modularize the tablegen class hierarchy for the
    so-called "function predicates". class FunctionPredicateBase has been added; it
    is currently used as a building block for TIIPredicates. However, I plan to
--
    used to look for all 4 in both cases. This patch makes lld-link match
    link.exe's behavior.
    
    This requires that the subsystem is known by the time findDefaultEntry() gets
    called. findDefaultEntry() is called before the main link loop, so that the
    loop can mark the entry point as undefined. That means inferSubsystem() has to
    be called above the main loop as well. This in turn means /subsystem: from
    .drectve sections only has an effect on entry point inference for obj files
    passed to lld-link directly (and not in obj files found later in .lib files).
    link.exe seems to ignore /subsystem: for obj files from lib files completely
    (while in lld it's ignored only for entry point detection but it still
    overrides /subsystem: flags passed on the command line for the value that gets
    written in the output file).
--

commit d48d5f086ff4d71ee03d3f0f068e69de7cb5f684
Author: Nico Weber <thakis@chromium.org>
Date:   Fri Aug 3 12:00:12 2018 +0000

    lld-link: Fix subsystem inference for non-console apps on 32-bit, and fix entry point inference on 32-bit with /nodefaultlib
    
    LinkerDriver::inferSubsystem() used to do Symtab->findUnderscore("WinMain"),
    but WinMain is stdcall in 32-bit and is hence is called _WinMain@16. Instead,
    Symtab->findMangle(mangle("WinMain")) needs to be called.
    
    But since LinkerDriver::inferSubsystem() and LinkerDriver::findDefaultEntry()
    both need to call this, introduce a common helper function for this and call it
    from both places. (Also call it for "main" for consistency, even though
    findUnderscore() is enough for main since that's __cdecl on 32-bit).
    
    This also exposed a bug for /nodefaultlib entrypoint inference: The code here
    called findMangle(Sym) instead of findMangle(mangle(Sym)), again doing the
    wrong thing on 32-bit. Fix that too.
    
    While here, make Driver::mangle() a static free function.
    
--
Author: Craig Topper <craig.topper@intel.com>
Date:   Thu Aug 2 23:30:38 2018 +0000

    [X86] Allow 'atomic_store (neg/not atomic_load)' to isel to a RMW instruction.
    
    There was a FIXMe in the td file about a type inference issue that was easy to fix.
    
    llvm-svn: 338782

commit 2deeeae2a511495836eb13603d1eae276b420e3e
Author: Craig Topper <craig.topper@intel.com>
--

    [clangd] Return Dex Iterators
    
    The original Dex Iterators patch (https://reviews.llvm.org/rL338017)
    caused problems for Clang 3.6 and Clang 3.7 due to the compiler bug
    which prevented inferring template parameter (`Size`) in create(And|Or)?
    functions. It was reverted in https://reviews.llvm.org/rL338054.
    
    In this revision the mentioned helper functions were replaced with
    variadic templated versions.
    
--
Date:   Thu Jul 19 23:02:07 2018 +0000

    [SCCP] Don't use markForcedConstant on branch conditions.
    
    It's more aggressive than we need to be, and leads to strange
    workarounds in other places like call return value inference. Instead,
    just directly mark an edge viable.
    
    Tests by Florian Hahn.
    
    Differential Revision: https://reviews.llvm.org/D49408
--
    vector/index, but as we don't always have this information, it currently is not part of the
    CompletionRequest class.
    
    The constructor of the CompletionRequest is now also more sensible. You only pass the
    user input, cursor position and your list of matches to the request and the rest will be
    inferred (using the same code we used before to calculate this). You also have to pass these
    match window parameters to it, even though they are unused right now.
    
    The patch shouldn't change any behavior.
    
    Reviewers: jingham
--
    such a fragment anywhere, but as long as it doesn't, I think TableGen
    shouldn't error out.
    
    The immediate cause of the assertion failure is the test inside the
    ValidateOnExit destructor. This patch simply disables that check while
    infering types during parsing of pattern fragments (only).
    
    Reviewed By: hfinkel, kparzysz
    
    Differential Revision: https://reviews.llvm.org/D48887
    
--
    
    The implementation is based on the following main ideas:
    - InlinePatternFragments may now replace each original pattern
      with several result patterns, not just one.
    - parseInstructionPattern delays calling InlinePatternFragments
      and InferAllTypes.  Instead, it extracts a single DAG match
      pattern from the main instruction pattern.
    - Processing of the DAG match pattern part of the main instruction
      pattern now shares most code with processing match patterns from
      the Pattern class.
    - Direct use of main instruction patterns in InferFromPattern and
      EmitResultInstructionAsOperand is removed; everything now operates
      solely on DAG match patterns.
    
    
    Reviewed by: hfinkel
--
Date:   Wed Jul 11 15:27:50 2018 +0000

    [X86] Fix MayLoad/HasSideEffect flag for (V)MOVLPSrm instructions.
    
    Before revision 336728, the "mayLoad" flag for instruction (V)MOVLPSrm was
    inferred directly from the "default" pattern associated with the instruction
    definition.
    
    r336728 removed special node X86Movlps, and all the patterns associated to it.
    Now instruction (V)MOVLPSrm doesn't have a pattern associated to it, and the
    'mayLoad/hasSideEffects' flags are left unset.
    
    When the instruction info is emitted by tablegen, method
    CodeGenDAGPatterns::InferInstructionFlags() sees that (V)MOVLPSrm doesn't have a
    pattern, and flags are undefined. So, it conservatively sets the
    "hasSideEffects" flag for it.
    
    As a consequence, we were losing the 'mayLoad' flag, and we were gaining a
    'hasSideEffect' flag in its place.
--

commit 92617559bbb432e45efb462658020529c1ac9237
Author: Sam Clegg <sbc@chromium.org>
Date:   Wed Jul 11 04:29:36 2018 +0000

    [WebAssembly] Add pass to infer prototypes for prototype-less functions
    
    See https://bugs.llvm.org/show_bug.cgi?id=35385
    
    Differential Revision: https://reviews.llvm.org/D48471
    
--

commit e1f7c5f8c72f77f5c25aa501a974e36b00f949a7
Author: Steven Wu <stevenwu@apple.com>
Date:   Mon Jul 9 16:52:05 2018 +0000

    [BitcodeReader] Infer the correct runtime preemption for GlobalValue
    
    Summary:
    To allow bitcode built by old compiler to pass the current verifer,
    BitcodeReader needs to auto infer the correct runtime preemption from
    linkage and visibility for GlobalValues.
    
    Since llvm-6.0 bitcode already contains the new field but can be
    incorrect in some cases, the attribute needs to be recomputed all the
    time in BitcodeReader. This will make all the GVs has dso_local marked
--

commit dfaeda652003e27649d6bc3412290e2fe3ed6b1d
Author: Steven Wu <stevenwu@apple.com>
Date:   Tue Jul 3 04:15:49 2018 +0000

    [Driver][Darwin] Use Host Triple to infer target os version
    
    Summary:
    When clang required to infer target os version from --target option and
    the os version is not specified in targets, check the host triple. If the
    host and target are both macOS, use host triple to infer target os
    version.
    
    rdar://problem/41651999
    
    Reviewers: arphaman, dexonsmith
--
Author: Craig Topper <craig.topper@intel.com>
Date:   Tue Jun 26 00:44:02 2018 +0000

    [X86] Redefine avx512 packed fpclass intrinsics to return a vXi1 mask and implement the mask input argument using an 'and' IR instruction.
    
    Additional IR is emitted to convert between scalar and vXi1 type to match the expected software inferface for the builtin that clang exposes.
    
    llvm-svn: 335564

commit c2ee4a5035709d4524fd55c155f9afc79f6129c2
Author: Craig Topper <craig.topper@intel.com>
--
Date:   Thu Jun 21 08:30:07 2018 +0000

    [DAGCombine] Fix alignment for offset loads/stores
    
    The alignment parameter to getExtLoad is treated as a base alignment,
    not the alignment of the load (base + offset). When we infer a better
    alignment for a Ptr we need to ensure that it applies to the base to
    prevent the alignment on the load from being wrong.
    
    This fixes a bug where the alignment could then be used to incorrectly
    prove noalias between a load and a store, leading to a miscompile.
--
    seems cleaner than a few other candidates I've tried (*, #, @ ...).
    
    The displayed header would be like a/b/c.h (without quote) or <vector> for system
    headers. I didn't add quotation or "#include" because they can take up limited
    space and do not provide additional information after users know what the
    headers are. I think a header alone should be obvious for users to infer that
    this is an include header..
    
    To align indentation, also prepend ' ' to labels of candidates that would not
    trigger include insertions (only for completions where index results are
    possible).
--
    the liblldDriver library.
    
    Test Plan:
    1. check-lld
    2. Invoke `ld64.lld -r` in a terminal that supports color output.
       Confirm that "ld64.lld: error: -arch not specified and could not be inferred"
       is output, and that the "error:" is colored red!
    
    Reviewers: ruiu, smeenai
    
    Reviewed By: ruiu
--
    
    The lldb test suite is highly configurable. While part of this
    configuration takes place at configure/build-time, a common scenario
    involves running the test suite several times with different
    configuration. For example, we might want to test the current lldb
    against inferiors built with different compilers.
    
    This configuration was already possible for lldb-dotest, but was lacking
    for the lit counterpart. It is now possible to pass arguments to pass
      arguments like this:
    
--
commit 07580ffe4705ae0f85659bf5c8a18afc0137353b
Author: Jason Molenda <jmolenda@apple.com>
Date:   Fri May 4 00:59:37 2018 +0000

    The on-ios-device command line lldb has an optimization where
    when it and the inferior process both have the same shared cache
    (a conglomeration of all libraries at the same fixed address for
    all processes), lldb will read data out of its own memory to speed
    things up.  The shared cache has a UUID, so lldb currently checks
    that the UUID of its own shared cache matches that of the inferior.
    
    This change adds one refinement to that -- it checks that the UUID
    is the same and that the base address of the shared cache is the
    same.  And only uses its local shared cache if they are both identical.
    
--

commit 4d64306a92a93a8e4f20c0c83e164c223b26b848
Author: Dan Albert <danalbert@google.com>
Date:   Wed May 2 19:38:37 2018 +0000

    [Driver] Infer Android sysroot location.
    
    Summary:
    Android toolchains include their headers and libraries in a
    self-contained directory within the toolchain.
    
--
Date:   Fri Apr 27 09:12:12 2018 +0000

    [IR] Do not assume that function pointers are aligned
    
    Summary:
    The value tracking analysis uses function alignment to infer that the
    least significant bits of function pointers are known to be zero.
    Unfortunately, this is not correct for ARM targets: the least
    significant bit of a function pointer stores the ARM/Thumb state
    information (i.e., the LSB is set for Thumb functions and cleared for
    ARM functions).
--

commit 76661e0f36bb200226102eb749e7b56ffbd69403
Author: Alex Lorenz <arphaman@gmail.com>
Date:   Wed Apr 25 22:23:26 2018 +0000

    [driver][darwin] Do not infer -simulator environment for OS version env vars
    with non-simulator SDKs
    
    rdar://37955008
    
    llvm-svn: 330878
--
Author: Sam McCall <sam.mccall@gmail.com>
Date:   Mon Apr 9 15:22:08 2018 +0000

    [clang] Use compile-command interpolation to provide commands for header files.
    
    Summary: This uses the inferring wrapper introduced in D45006.
    
    Subscribers: klimek, ilya-biryukov, jkorous-apple, ioeric, cfe-commits
    
    Differential Revision: https://reviews.llvm.org/D45007
    
--

commit ea9773ac69389c6eac82384b3cf98ceb774ff740
Author: Sam McCall <sam.mccall@gmail.com>
Date:   Mon Apr 9 15:17:39 2018 +0000

    [Tooling] A CompilationDatabase wrapper that infers header commands.
    
    Summary:
    The wrapper finds the closest matching compile command using filename heuristics
    and makes minimal tweaks so it can be used with the header.
    
--

commit 9114eb40b57bd271eec4a3f935d3072859433eb2
Author: Alex Lorenz <arphaman@gmail.com>
Date:   Tue Apr 3 20:50:05 2018 +0000

    [driver][darwin] Do not infer -simulator environment for non-simulator SDKs
    
    rdar://36369832
    
    llvm-svn: 329110

--

commit 6660fd0f959e2e07db47729fb6112b7a823a67c2
Author: Fedor Sergeev <fedor.sergeev@azul.com>
Date:   Fri Mar 23 21:46:16 2018 +0000

    [PM][FunctionAttrs] add NoUnwind attribute inference to PostOrderFunctionAttrs pass
    
    Summary:
    This was motivated by absence of PrunEH functionality in new PM.
    It was decided that a proper way to do PruneEH is to add NoUnwind inference
    into PostOrderFunctionAttrs and then perform normal SimplifyCFG on top.
    
    This change generalizes attribute handling implemented for (a removal of)
    Convergent attribute, by introducing a generic builder-like class
       AttributeInferer
    
    It registers all the attribute inference requests, storing per-attribute
    predicates into a vector, and then goes through an SCC Node, scanning all
    the instructions for not breaking attribute assumptions.
    
    The main idea is that as soon all the instructions from all the functions
    of SCC Node conform to attribute assumptions then we are free to infer
    the attribute as set for all the functions of SCC Node.
    
    It handles two distinct cases of attributes:
       - those that might break due to derefinement of the function code
    
         for these attributes we are allowed to apply inference only if all the
         functions are "exact definitions". Example - NoUnwind.
    
       - those that do not care about derefinement
    
         for these attributes we are allowed to apply inference as soon as we see
         any function definition. Example - removal of Convergent attribute.
    
    Also in this commit:
    * Converted all the FunctionAttrs tests to use FileCheck and added new-PM
      invocations to them
--
       new and old PM implementations. Marked with FIXME.
    
    * PruneEH tests were converted to new-PM as well, using function-attrs+simplify-cfg
      combo as intended
    
    * some of "other" tests were updated since function-attrs now infers 'nounwind'
      even for old PM pipeline
    
    * -disable-nounwind-inference hidden option added as a possible workaround for a supposedly
      rare case when nounwind being inferred by default presents a problem
    
    Reviewers: chandlerc, jlebar
    
    Reviewed By: jlebar
    
--
    Next batch of test-tree-cleaning changes
    
    Summary:
    The changes here fall into several categories.
    
    - some tests were redirecting inferior stdout/err to a file. For these I
      make sure we use an absolute path for the file. I also create a
      lldbutil.read_file_on_target helper function to encapsulate the
      differences between reading a file locally and remotely.
    - some tests were redirecting the pexpect I/O into a file. For these I
      use a python StringIO object to avoid creating a file altogether.
    - the TestSettings inferior was creating a file. Here, I make sure the
      inferior is launched with pwd=build-dir so that the files end up
      created there.
    - lldb-mi --log (used by some tests) creates a log file in PWD without
      the ability say differently. To make this work I make sure to run
      lldb-mi with PWD=build_dir. This in turn necessitated a couple of
      changes in other lldb-mi tests, which were using relative paths to
--
Date:   Fri Mar 2 00:17:05 2018 +0000

    Speed up TestWatchpointMultipleThreads
    
    Summary:
    The inferior was sleeping before doing any interesting work. I remove that
    to make the test faster.
    
    While looking at the purpose of the test (to check that watchpoints are
    propagated to all existing threads - r140757) I noticed that the test has
    diverged from the original intention and now it creates the threads *after* the
--
    
    Summary:
    NVPTXGenericToNVVM was using target-specific intrinsics to do address
    space casts.  Using the addrspacecast instruction is (a lot) simpler.
    But it also has the advantage of being understandable to other passes.
    In particular, InferAddrSpaces is able to understand these address space
    casts and remove them in most cases.
    
    Reviewers: tra
    
    Subscribers: jholewinski, sanjoy, hiraditya, llvm-commits
--
Date:   Tue Feb 27 22:45:49 2018 +0000

    Fix lldbinline tests for remote targets
    
    r326140 exposed the fact that we are not actually running inline tests on
    remote targets. The tests fail to launch the inferior in the first place
    because they passed an invalid working directory to the launch function.
    
    This should fix that.
    
    llvm-svn: 326264
--
Author: Pavel Labath <labath@google.com>
Date:   Tue Feb 27 18:07:53 2018 +0000

    Move TestGdbRemoteExitCode next to the other llgs tests
    
    This test contained a copy of the inferior used by most of llgs test.
    This was done to enable better paralelization, but now it's irrelevant.
    
    llvm-svn: 326218

commit 04d1d79ee5935fafe1fdf8b4577eeb335b565999
--
Author: Pavel Labath <labath@google.com>
Date:   Tue Feb 27 02:01:30 2018 +0000

    Move "concurrent events" tests back into one folder
    
    These tests all test very similar things, and use the same inferior.
    They were only placed in separate folders to achieve better
    paralelization. Now that we paralelize at a file level, this is no
    longer relevant, and we can put them together again.
    
    llvm-svn: 326159
--
Author: Adrian McCarthy <amccarth@google.com>
Date:   Mon Feb 26 21:22:39 2018 +0000

    Partial fix for TestConflictingSymbol.py on Windows
    
    Without this fix, the test ERRORs because the link of the inferior fails. This
    patch adds the LLDB_TEST_API macro where needed and uses the new -2 magic
    value for num_expected_locations to account for lazy-loading of module symbols
    on Windows.
    
    With this fix, the test itself still fails:  conflicting_symbol isn't in the
--
    
    Technically, now the path returned by this function does not point to
    the process working directory for local tests, but I think it makes
    sense to keep the function name, as I think we should move towards
    launching the process in the build directory (and I intend to change
    this for the handful of inferiors that actually care about their PWD,
    for example because they need to create files there).
    
    Reviewers: davide, aprantl
    
    Subscribers: lldb-commits
--

commit 5fdf08f7c94ae4f37c0111943b2c56dff6e9ce2d
Author: Daniel Neilson <dneilson@azul.com>
Date:   Tue Feb 6 20:33:36 2018 +0000

    [InferAddressSpaces] Update uses of IRBuilder memory intrinsic creation to new API
    
    Summary:
    This change is part of step five in the series of changes to remove alignment argument from
    memcpy/memmove/memset in favour of alignment attributes. In particular, this changes the
    InferAddressSpaces pass to cease using:
    1) The old getAlignment() API of MemoryIntrinsic in favour of getting source & dest specific
    alignments through the new API.
    2) The old IRBuilder CreateMemCpy/CreateMemMove single-alignment APIs in favour of the new
    API that allows setting source and destination alignments independently.
    
--

commit 4316afbb44fe484bdcee6ffe272f65c31d9606bf
Author: George Karpenkov <ekarpenkov@apple.com>
Date:   Sat Feb 3 00:55:21 2018 +0000

    [analyzer] Do not infer nullability inside function-like macros, even when macro is explicitly returning NULL
    
    We already suppress such reports for inlined functions, we should then
    get the same behavior for macros.
    The underlying reason is that the same macro, can be called from many
    different contexts, and nullability can only be expected in _some_ of
--

commit e2dfdbf0aa4a0a2041c680e4ce3b0eac1bd8a357
Author: Rui Ueyama <ruiu@google.com>
Date:   Fri Jan 12 22:29:29 2018 +0000

    Do not pass an argument that can be easily inferred from other argument.
    
    llvm-svn: 322416

commit e0f6fcd0d9fd9cc93be9210e4e1d1ab713814823
Author: Sam Clegg <sbc@chromium.org>
--
Date:   Wed Jan 10 22:25:33 2018 +0000

    Revert "Advanced guessing of rendezvous breakpoint"
    
    This reverts commit r322209, because it broke
    TestNoreturnUnwind,TestInferiorAssert and TestNumThreads on i386.
    
    llvm-svn: 322229

commit 78df28e87621376bd2937099bba260ab2551b496
Author: Petr Hosek <phosek@chromium.org>
--
Author: Craig Topper <craig.topper@intel.com>
Date:   Wed Jan 10 19:16:05 2018 +0000

    [SelectionDAG][X86] Explicitly store the scale in the gather/scatter ISD nodes
    
    Currently we infer the scale at isel time by analyzing whether the base is a constant 0 or not. If it is we assume scale is 1, else we take it from the element size of the pass thru or stored value. This seems a little weird and I think it makes more sense to make it explicit in the DAG rather than doing tricky things in the backend.
    
    Most of this patch is just making sure we copy the scale around everywhere.
    
    Differential Revision: https://reviews.llvm.org/D40055
    
--

commit 77dfbf21d1bc2adbfcbcb4e8f71e732764a6366a
Author: George Karpenkov <ekarpenkov@apple.com>
Date:   Wed Jan 10 01:22:14 2018 +0000

    [analyzer] suppress nullability inference from a macro when result is used in another macro
    
    The current code used to not suppress the report, if the dereference was
    performed in a macro, assuming it is that same macro.
    However, the assumption might not be correct, and XNU has quite a bit of
    code where dereference is actually performed in a different macro.
--

    debugserver: Propagate environment in launch-mode (pr35671)
    
    Summary:
    Make sure we propagate environment when starting debugserver with a pre-loaded
    inferior. AFAIK, RNBRunLoopLaunchInferior is only called in pre-loaded inferior
    scenario, so we can just pick up the debugserver environment instead of trying
    to construct an envp from the (empty) context.
    
    This makes debugserver pass an test added for an equivalent lldb-server fix.
    
--
commit 1acc63f7cec40bcd1e621db44ecf6c70725b9cbb
Author: Alex Lorenz <arphaman@gmail.com>
Date:   Tue Dec 19 19:05:04 2017 +0000

    [driver][darwin] Take the OS version specified in "-target" as the target
    OS instead of inferring it from SDK / environment
    
    The OS version is specified in -target should be used instead of the one in an
    environment variable / SDK name.
    
    rdar://35813850
--

commit 11e5917d2aecff32546644e91132f8efb565b4c9
Author: Pavel Labath <labath@google.com>
Date:   Mon Dec 18 14:31:39 2017 +0000

    llgs: Propagate the environment when launching the inferior from command line
    
    Summary:
    We were failing to propagate the environment when lldb-server was
    started with a pre-loaded process
    (e.g.: lldb-server gdbserver -- inferior --inferior_args)
    
    This patch makes sure the environment is propagated. Instead of adding a
    new GDBRemoteCommunicationServerLLGS::SetLaunchEnvironment function to
    complement SetLaunchArgs and SetLaunchFlags, I replace these with a
    more generic SetLaunchInfo, which can be used to set any launch-related
--

commit d8b3c1a1350d1b1b0604bc9bc384da9c7d6ad28a
Author: Pavel Labath <labath@google.com>
Date:   Mon Dec 18 09:44:29 2017 +0000

    NPL: Clean up handling of inferior exit
    
    Summary:
    lldb-server was sending the "exit" packet (W??) twice. This happened
    because it was handling both the pre-exit (PTRACE_EVENT_EXIT) and
    post-exit (WIFEXITED) as exit events. We had some code which was trying
--
    from the lldb-server test suite, which were ignored because they didn't
    fail the test.
    
    The new test suite will be stricter about this, so I fix this issue
    ignoring the first event. I think this is the correct behavior, as the
    inferior is not really dead at that point, so it's premature to send the
    exit packet.
    
    There isn't an actual test yet which would verify the exit behavior, but
    in my next patch I will add a test which will also test this
    functionality.
--

commit 70dbd5fbd0a5f869126a944ae7e23058a106f8b7
Author: Simon Dardis <simon.dardis@mips.com>
Date:   Sat Dec 9 23:25:57 2017 +0000

    Infer lowest bits of an integer Multiply when the low bits of the operands are known
    
    When the lowest bits of the operands to an integer multiply are known, the low bits of the result are deducible.
    Code to deduce known-zero bottom bits already existed, but this change improves on that by deducing known-ones.
    
    Patch by: Pedro Ferreira
--
Author: Craig Topper <craig.topper@intel.com>
Date:   Mon Dec 4 05:38:42 2017 +0000

    [SelectionDAG] Teach computeKnownBits some improvements to ISD::SRL with a non-splat constant shift amount.
    
    If we have a non-splat constant shift amount, the minimum shift amount can be used to infer the number of zero upper bits of the result. There's probably a lot more that we can do here, but this
    fixes a case where I wanted to infer the sign bit as zero when all the shift amounts are non-zero.
    
    llvm-svn: 319639

commit a565a7b9b835656746d82425721d0f0eb69e3113
Author: Devin Coughlin <dcoughlin@apple.com>
--
    CodeGen: Fix pointer info in SplitVecOp_EXTRACT_VECTOR_ELT/SplitVecRes_INSERT_VECTOR_ELT
    
    Two issues found when doing codegen for splitting vector with non-zero alloca addr space:
    
    DAGTypeLegalizer::SplitVecRes_INSERT_VECTOR_ELT/SplitVecOp_EXTRACT_VECTOR_ELT uses dummy pointer info for creating
    SDStore. Since one pointer operand contains multiply and add, InferPointerInfo is unable to
    infer the correct pointer info, which ends up with a dummy pointer info for the target to lower
    store and results in isel failure. The fix is to introduce MachinePointerInfo::getUnknownStack to
    represent MachinePointerInfo which is known in alloca address space but without other information.
    
    TargetLowering::getVectorElementPointer uses value type of pointer in addr space 0 for
    multiplication of index and then add it to the pointer. However the pointer may be in an addr
--

    Fix floating point register write on new x86 linux kernels
    
    Summary:
    New linux kernels (on systems that support the XSAVES instruction) will
    not update the inferior registers unless the corresponding flag in the
    XSAVE header is set. Normally this flag will be set in our image of the
    XSAVE area (since we obtained it from the kernel), but if the inferior
    has never used the corresponding register set, the respective flag can
    be clear.
    
    This fixes the issue by making sure we explicitly set the flags
    corresponding to the registers we modify. I don't try to precisely match
--
    
    This was already caught by test_fp_register_write, but that was only
    because the code that ran before main() did not use some of the register
    sets. Since nothing in this test relies on being stopped in main(), I
    modify the test to stop at the entry point instead, so we can be sure
    the inferior did not have a chance to access these registers.
    
    Reviewers: clayborg, valentinagiusti
    
    Subscribers: lldb-commits
    
--

commit c54aa9c844e15e1fc35c6dbf73392bd54aec45ed
Author: Daniel Sanders <daniel_l_sanders@apple.com>
Date:   Sat Nov 18 00:16:44 2017 +0000

    [globalisel][tablegen] Generalize pointer-type inference by introducing ptypeN. NFC
    
    ptypeN is functionally the same as typeN except that it informs the
    SelectionDAG importer that an operand should be treated as a pointer even
    if it was written as iN. This is important for patterns that use iN instead
    of iPTR to represent pointers. E.g.:
--

    [InstCombine] trunc (binop X, C) --> binop (trunc X, C')
    
    Note that one-use and shouldChangeType() are checked ahead of the switch.
    
    Without the narrowing folds, we can produce inferior vector code as shown in PR35299:
    https://bugs.llvm.org/show_bug.cgi?id=35299
    
    llvm-svn: 318323

commit a17fca06ee312baac84c39204982327f6f75ac83
--

    [X86] Redefine the 128-bit version of VPGATHERQD and VGATHERQPS to use a VK2 mask instead of a VK4 mask.
    
    This allows us to remove extra extend creation during lowering and more accurately reflects the semantics of the instruction.
    
    While there add an extra output VT to X86 masked gather node to better match the isel pattern predicate. Currently we're exploiting the fact that the isel table doesn't count how many output results a node actually has if the result type of any can be inferred from the first result and the type constraints defined in tablegen. I think we might ultimately want to lower all MGATHER/MSCATTER to an X86ISD node with the extra mask result and stop relying on this hole in the isel checking.
    
    llvm-svn: 318278

commit 1c240a89ffa0d7ca0afab6e36c8f8a58ec73e52f
Author: Billy Robert O'Neal III <bion@microsoft.com>
--
Date:   Tue Nov 14 19:16:08 2017 +0000

    Set hasSideEffects=0 for TargetOpcode::{CFI_INSTRUCTION,EH_LABEL,GC_LABEL,ANNOTATION_LABEL}
    
    D37065 (committed as rL317674) explicitly set hasSideEffects for all
    TargetOpcode::* instructions where it was inferred previously. This is a
    follow-up to that patch, setting hasSideEffects=0 for CFI_INSTRUCTION,
    EH_LABEL, GC_LABEL and ANNOTATION_LABEL. All LLVM tests pass after this
    change.
    
    This patch also modifies MachineInstr::isLabel returns true for a
--
    write an explicit cast to silence the diagnostic.
    
    This commit treats explicit casts involving generic types as an indication from
    the programmer that the Objective-C type system is not rich enough to express
    the needed invariant. On explicit casts, the checker now removes any existing
    information inferred about the type arguments. Further, it no longer assumes
    the casted-to specialized type because the invariant the programmer specifies
    in the cast may only hold at a particular program point and not later ones. This
    prevents a suppressing cast from requiring a cascade of casts down the
    line.
    
--
      (sextload:i32 $ptr)<<unindexedload>><<sextload>><<sextloadi16>
    to:
      (sext:i32 (load:i16 $ptr)<<unindexedload>>)
    
    I'd have preferred to replace the fragments and have the expansion happen
    naturally as part of PatFrag expansion but the type inferencing system can't
    cope with loads of types narrower than those mentioned in register classes.
    This is because the SDTCisInt's on the sext constrain both the result and
    operand to the 'legal' integer types (where legal is defined as 'a register
    class can contain the type') which immediately rules the narrower types out.
    Several targets (those with only one legal integer type) would then go on to
--
Author: Alex Bradbury <asb@lowrisc.org>
Date:   Wed Nov 8 20:19:16 2017 +0000

    Set hasSideEffects=0 for PHI and fix affected passes
    
    Previously, hasSideEffects was ? for TargetOpcode::PHI and would be inferred
    as 1. D37065 sets the previously inferred properties explicitly. This patch sets
    hasSideEffects=0 for PHI, as it is for G_PHI. MachineInstr::isSafeToMove has
    been updated so it still returns false for PHI.
    
    Additionally, HexagonBitSimplify relied on a PHI node having the
    hasUnmodeledSideEffects property. This patch fixes that assumption.
--
    rL162640 introduced CodeGenTarget::guessInstructionProperties. If a target
    sets guessInstructionProperties=0 in its FooInstrInfo, tablegen will error if
    it has to guess properties from patterns. Unfortunately,
    guessInstructionProperties=0 can't be used with current upstream LLVM as
    instructions in the TargetOpcode namespace are always included and sometimes
    have inferred properties for mayLoad, mayStore, and hasSideEffects. This patch
    provides the simplest possible fix to this problem, setting default values for
    these fields in the TargetOpcode scope. There is no intended functional
    change, as the explicitly set properties should match what was previously
    inferred. A number of the instructions had hasSideEffects=1 inferred
    unintentionally. This patch makes it explicit, while future patches (such as
    D37097) correct the property.
    
    Differential Revision: https://reviews.llvm.org/D37065
    
--

    [BOLT] improvements for CFG construction
    
    Summary:
    Some improvements for CFG construction:
    - getting rid of fallthrough-inferrence, as this is already
    done DataAggregator;
    - adjusting block counts for blocks with non-zero outgoing edges
    to make sure they're not outlined;
    - making sure that all functions (including non-simple ones) are
    reordered and placed in the hot section.
--
    Change the way we convert conditional tail calls. Now we never reverse
    the condition. This is required for better profile matching.
    The original approach of preserving the direction was controversial
    to start with.
    
    Add "-infer-fall-throughs" option (on by default) to allow disabling
    inference of fall-through edge counts.
    
    (cherry picked from FBD6994293)

commit a24c5543eac713c28e1047b1c3fc15b861572067
Author: Maksim Panchenko <maks@fb.com>
--
    We now have read profile right after the cfg was constructed, but
    before it is "canonicalized", i.e. CTCs will till be there.
    
    After reading the profile, we do a post-processing pass that fixes
    CFG and does some post-processing for debug info, such as
    inference of fall-throughs, which is still required with the current
    format.
    
    Another good reason for decoupling is that we can use profile with
    CFG to more accurately record fall-through branches during
    aggregation.
--
    This is a new checker for objc files in clang-tidy.
    
    The new check finds global variable declarations in Objective-C files that are not follow the pattern of variable names in Google's Objective-C Style Guide.
    
    All the global variables should follow the pattern of "g[A-Z].*" (variables) or "k[A-Z].*" (constants). The check will suggest a variable name that follows the pattern
    if it can be inferred from the original name.
    
    Patch by Yan Zhang!
    
    Reviewers: benhamilton, hokein, alexfh
    
--

commit d5e2e8393b3b96e45dd5d5930e08bc43d36fe891
Author: Rui Ueyama <ruiu@google.com>
Date:   Tue Nov 7 00:12:05 2017 +0000

    Report an error if an inferred alignment for a shared symbol is too large.
    
    Differential Revision: https://reviews.llvm.org/D39697
    
    llvm-svn: 317528

--

commit d23f23d81cbb6730e745a996148adea237a77f84
Author: Yaxun Liu <Yaxun.Liu@amd.com>
Date:   Mon Oct 30 21:19:41 2017 +0000

    InferAddressSpaces: Fix bug about replacing addrspacecast
    
    InferAddressSpaces assumes the pointee type of addrspacecast
    is the same as the operand, which is not always true and causes
    invalid IR.
    
    This bug cause build failure in HCC.
    
--

commit cb8f6328dc6e81b2f572e15f9d28be5c8c233655
Author: Artem Belevich <tra@google.com>
Date:   Tue Oct 24 20:31:44 2017 +0000

    [NVPTX] allow address space inference for volatile loads/stores.
    
    If particular target supports volatile memory access operations, we can
    avoid AS casting to generic AS. Currently it's only enabled in NVPTX for
    loads and stores that access global & shared AS.
    
--
Date:   Fri Oct 20 22:39:18 2017 +0000

    lldb-server tests: Propagate environment variables (pr34192)
    
    Summary:
    Without this, the launching of the test inferior may fail if it depends
    on some component of the environment (most likely LD_LIBRARY_PATH). This
    makes sure we propagate the environment variable to the inferior
    process.
    
    Reviewers: eugene
    
    Subscribers: lldb-commits
--
Author: Krzysztof Parzyszek <kparzysz@codeaurora.org>
Date:   Sun Oct 15 15:39:56 2017 +0000

    [TableGen] Remove error checks incorrectly failing on non-error conditions
    
    In type inference, an empty type set for a specific hw mode is not an
    error. In earlier stages of the design it was, but having to use non-
    parameterized types with target intrinsics necessarily led to type
    contradictions: since the intrinsics used specific types, they were
    only valid for a specific hw mode, and the resulting type set for other
    modes ended up empty. To accommodate the existence of such intrinsics
--
    I'll be watching the bots for the rest of today; if any problems are introduced by
    this patch I'll revert it - if anyone sees a problem with their bot that I don't
    see, please do the same.  I know it's a rather large patch.
    
    One change I had to make specifically for iOS devices was that debugserver can't
    create files.  There were several tests that launch the inferior process redirecting
    its output to a file, then they retrieve the file.  They were not trying to test
    file redirection in these tests, so I rewrote those to write their output to a file
    directly.
    
    llvm-svn: 314132
--
Author: Yi Kong <yikong@google.com>
Date:   Mon Sep 25 17:36:54 2017 +0000

    [Sema] Null check in BuildDeclarationNameExpr
    
    Qualtype may point to null if we cannot infer its type yet.
    
    Fixes PR33843
    
    Differential Revision: https://reviews.llvm.org/D38158
    
--
    I'll be watching the bots for the rest of today; if any problems are introduced by
    this patch I'll revert it - if anyone sees a problem with their bot that I don't
    see, please do the same.  I know it's a rather large patch.
    
    One change I had to make specifically for iOS devices was that debugserver can't
    create files.  There were several tests that launch the inferior process redirecting
    its output to a file, then they retrieve the file.  They were not trying to test
    file redirection in these tests, so I rewrote those to write their output to a file
    directly.
    
    llvm-svn: 314038
--
    I'll be watching the bots for the rest of today; if any problems are introduced by
    this patch I'll revert it - if anyone sees a problem with their bot that I don't
    see, please do the same.  I know it's a rather large patch.
    
    One change I had to make specifically for iOS devices was that debugserver can't
    create files.  There were several tests that launch the inferior process redirecting
    its output to a file, then they retrieve the file.  They were not trying to test
    file redirection in these tests, so I rewrote those to write their output to a file
    directly.
    
    llvm-svn: 313932
--
    matcher generation code in TableGen to run much slower, particularly so
    in the unoptimized (debug) build. This patch recovers some of the lost
    performance.
    
    Summary of changes:
    - Cache the set of legal types in TypeInfer::getLegalTypes. The contents
      of this set do not change.
    - Add LLVM_ATTRIBUTE_ALWAYS_INLINE to several small functions. Normally
      this would not be necessary, but in the debug build TableGen is not
      optimized, so this helps a little bit.
    - Add an early exit from TypeSetByHwMode::operator== for the case when
--
    matcher generation code in TableGen to run much slower, particularly so
    in the unoptimized (debug) build. This patch recovers some of the lost
    performance.
    
    Summary of changes:
    - Cache the set of legal types in TypeInfer::getLegalTypes. The contents
      of this set do not change.
    - Add LLVM_ATTRIBUTE_ALWAYS_INLINE to several small functions. Normally
      this would not be necessary, but in the debug build TableGen is not
      optimized, so this helps a little bit.
    - Add an early exit from TypeSetByHwMode::operator== for the case when
--

commit 89291f2ac80de08ed053178f2519ded4e5b257c3
Author: Krzysztof Parzyszek <kparzysz@codeaurora.org>
Date:   Fri Sep 15 18:58:07 2017 +0000

    Fix selecting legal types in TypeInfer::getLegalTypes
    
    Collect all legal types for all modes.
    
    llvm-svn: 313380

--
Author: Krzysztof Parzyszek <kparzysz@codeaurora.org>
Date:   Thu Sep 14 16:56:21 2017 +0000

    TableGen support for parameterized register class information
    
    This replaces TableGen's type inference to operate on parameterized
    types instead of MVTs, and as a consequence, some interfaces have
    changed:
    - Uses of MVTs are replaced by ValueTypeByHwMode.
    - EEVT::TypeSet is replaced by TypeSetByHwMode.
    
    This affects the way that types and type sets are printed, and the
    tests relying on that have been updated.
    
    There are certain users of the inferred types outside of TableGen
    itself, namely FastISel and GlobalISel. For those users, the way
    that the types are accessed have changed. For typical scenarios,
    these replacements can be used:
    - TreePatternNode::getType(ResNo) -> getSimpleType(ResNo)
    - TreePatternNode::hasTypeSet(ResNo) -> hasConcreteType(ResNo)
--
    
    2) Fixing 1) exposed a problem where TableGen would create multiple
    names for effectively the same subregister index. In the test case
    the subregister index sub0 is composed from ssub0 and ssub1, and sub1 is
    composed from ssub2 and ssub3. TableGen should not create both sub0_sub1
    and ssub0_ssub1_ssub2_ssub3 as infered subregister indexes. This changes
    the code to build a transitive closure of the subregister components
    before forming new concatenated subregister indexes.
    
    This fix was developed for an out of tree target. For the in-tree
    targets the only change is in the register information computed for ARM.
--
    - List of registers with subregisters
    
    I will use this in an upcoming commit to create a test.
    
    It may also be useful for target developers wanting to get an overview
    of all the register related information, esp. the things inferred by
    tablegen and not directly visible in the .td file.
    
    Differential Revision: https://reviews.llvm.org/D36911
    
    llvm-svn: 311913
--
Author: Richard Smith <richard-llvm@metafoo.co.uk>
Date:   Fri Aug 25 01:55:50 2017 +0000

    Fix MSVC bots which include '__attribute__((thiscall))' in pretty-printed member function types.
    
    We really shouldn't be including inferred calling conventions here, but let's get the bots green first...
    
    llvm-svn: 311746

commit 6e5e0bcd8073b3c83048072bfe115f9838ef21b5
Author: Sean Fertile <sfertile@ca.ibm.com>
--
Author: Matthias Braun <matze@braunis.de>
Date:   Sat Aug 19 01:21:11 2017 +0000

    ARMRegsiterInfo: Define more ssub indexes; NFC
    
    This doesn't really change anything as Tablegen would have inferred
    those indices anyway; defining them gives us shorter names that are
    easier to read while debugging (i.e. "ssub_4" rather than
    "dsub2_then_ssub_0")
    
    llvm-svn: 311218
--

commit 5e82ca353df1ce08974ab7cd5a9c29b0e742bb7a
Author: Ed Maste <emaste@freebsd.org>
Date:   Thu Aug 10 13:47:17 2017 +0000

    Report inferior signals as signals, not exceptions, on FreeBSD
    
    This is the FreeBSD equivalent of r238549.
    
    This serves 2 purposes:
    
    * LLDB should handle inferior process signals SIGSEGV/SIGILL/SIGBUS/
      SIGFPE the way it is suppose to be handled. Prior to this fix these
      signals will neither create a coredump, nor exit from the debugger
      or work for signal handling scenario.
    * eInvalidCrashReason need not report "unknown crash reason" if we have
      a valid si_signo
--
        of individual libraries for each feature
    2. Added Intel(R) Processor Trace hardware feature in this single library.
        Details about the tool implementing this feature is as follows:
    
         Tool developed on top of LLDB to provide its users the execution
         trace of the debugged inferiors. Tool's API are exposed as C++ object
         oriented interface in a shared library. API are designed especially to be
         easily integrable with IDEs providing LLDB as an application debugger.
         Entire API is also available as Python functions through a script bridging
         interface allowing development of python modules.
    
--
    Summary:
    Previously, we assumed that certain types of instructions needed WQM in
    pixel shaders, particularly DS instructions and image sampling
    instructions. This was ok because with OpenGL, the assumption was
    correct. But we want to start using DPP instructions for derivatives as
    well as other things, so the assumption that we can infer whether to use
    WQM based on the instruction won't continue to hold. This intrinsic lets
    frontends like Mesa indicate what things need WQM based on their
    knowledge of the API, rather than second-guessing them in the backend.
    We need to keep around the old method of enabling WQM, but eventually we
    should remove it once Mesa catches up. For now, this will let us use DPP
--
commit 4a94d8d5f7ec99c6b5ab22d566ed5a5a1b4ce055
Author: Akira Hatanaka <ahatanaka@apple.com>
Date:   Mon Jul 31 22:19:34 2017 +0000

    [Driver] Make sure the deployment target is earlier than iOS 11 when
    it is inferred from -isysroot.
    
    This fixes a change that was inadvertently introduced in r309607.
    
    rdar://problem/32230613
    
--
Date:   Wed Jul 26 09:46:59 2017 +0000

    [ELF] - Change way how we handle --noinhibit-exec
    
    Previously we handled this option implicitly, only
    for infering unresolved symbols handling policy.
    
    ld man says: "--noinhibit-exec Retain the executable
    output file whenever it is still usable",
    and we may want to handle other cases too.
    
--
Author: Craig Topper <craig.topper@intel.com>
Date:   Fri Jul 14 06:36:17 2017 +0000

    [X86] Add 'movbe' to btver2 CPU.
    
    This probably doesn't change anything because the frotend doesn't do anything with this feature and the backend will infer from the cpu string. So this is just for consistency with other cpus that support movbe.
    
    llvm-svn: 308002

commit f80ffa1a7851bcbd6c7b598372c11ceb71a6598f
Author: Max Kazantsev <max.kazantsev@azul.com>
--
    TreePatternNode considers them to be plain integers but MachineInstr considers
    them to be a distinct kind of operand.
    
    The tweak to AArch64InstrInfo.td to produce a simple test case is a NFC for
    everything except GlobalISelEmitter (confirmed by diffing the tablegenerated
    files). GlobalISelEmitter is currently unable to infer the type of operands in
    the Dst pattern from the operands in the Src pattern.
    
    llvm-svn: 307634

commit b57bba831617a2e0d87bff3160b7118f238470ce
--

commit b909f11a319ae62e683d1f9d82e28a05b360b8ae
Author: Yaxun Liu <Yaxun.Liu@amd.com>
Date:   Fri Jul 7 02:40:13 2017 +0000

    [InferAddressSpaces] Fix assertion about null pointer
    
    InferAddressSpaces does not check address space in collectFlatAddressExpressions,
    which causes values with non flat address space put into Postorder and causes
    assertion in cloneValueWithNewAddressSpace.
    
    This patch fixes assertion in OpenCL 2.0 conformance test generic_address_space
    subtest for amdgcn target.
--
    - If the deployment target is set explicitly, either with a command-line
      option or an environment variable, the driver should report an error
      if the version is greater than iOS 10.
    
    - In the case where the deployment target is not set explicitly and the
      default is inferred from the target triple or SDK version, it should
      use a maximum default of iOS 10.99.99.
    
    rdar://problem/32230613
    
    Differential Revision: https://reviews.llvm.org/D34529
--

commit 50c2f251f54935471464e2d1850858b633f46c38
Author: Stanislav Mekhanoshin <Stanislav.Mekhanoshin@amd.com>
Date:   Mon Jun 19 23:17:36 2017 +0000

    [AMDGPU] Add infer address spaces pass before SROA
    
    It adds it for the target after inlining but before SROA where
    we can get most out of it.
    
    Differential Revision: https://reviews.llvm.org/D34366
--

commit f9abd4097e259482cfa2e17df291d7ba294121e0
Author: Marc-Andre Laperle <marc-andre.laperle@ericsson.com>
Date:   Fri Jun 16 20:58:26 2017 +0000

    [index] Fix typo: inferface -> interface
    
    Reviewers: arphaman
    
    Reviewed By: arphaman
    
--

commit 62fb8498d32ae76c316437c7429095dad6873a82
Author: Nirav Dave <niravd@google.com>
Date:   Thu Jun 8 13:20:55 2017 +0000

    InferAddressSpaces: Avoid assertion failure with replacing identical
    cloned constexpr
    
    Have cloneConstantExprWithNewAddressSpaces return nullptr when
    returning initial ConstantExpr.
    
--
       compile time sink, so it didn't make sense to *only* use it in
       ThinLTO. Fewer differences in the pipeline makes everything simpler
       IMO.
    
    3) I hoisted the ThinLTO stop point pre-link above the the RPO function
       attr inference. The RPO inference won't infer anything terribly
       meaningful pre-link (recursiveness?) so it didn't make a lot of
       sense. But if the placement of RPO inference starts to matter, we
       should move it to the canonicalization phase anyways which seems like
       a better place for it (and there is a FIXME to this effect!). But
       that seemed a bridge too far for this patch.
    
    If we ever need to parameterize these pipelines more heavily, we can
--
Author: Vedant Kumar <vsk@apple.com>
Date:   Wed May 31 01:42:55 2017 +0000

    Mark a test as requiring a default triple
    
    This test assumes that llc can infer a default triple. I'm not sure why
    exactly, but the Verify MachineInstrs bot requires tests to be explicit
    about this dependency.
    
    This commit follows the lead from r248452 and adds in 'REQUIRES:
    default_triple' to omit-empty.ll.
--
Author: Tim Northover <tnorthover@apple.com>
Date:   Tue May 30 21:28:57 2017 +0000

    MIR: remove explicit "noVRegs" property.
    
    We can infer this from the incoming MIR, so there's no reason to
    represent it with a special flag.
    
    llvm-svn: 304246

commit 74480adafd0a2fc475bbed73372ce0da2a4ae3c1
--

commit f12ac5b77612c9dbdbbf7f34cfda4a96d5cdc732
Author: Evgeniy Stepanov <eugeni.stepanov@gmail.com>
Date:   Mon May 22 21:11:44 2017 +0000

    [lld] Infer relocation model from module flags in relocatable LTO link.
    
    Fix for PR33096.
    
    llvm-svn: 303579

commit b9f1b014e1aa47550e1e4bb0c0bf143fc01f6c20
Author: Evgeniy Stepanov <eugeni.stepanov@gmail.com>
Date:   Mon May 22 21:11:35 2017 +0000

    Infer relocation model from module flags in relocatable LTO link.
    
    Fix for PR33096.
    
    llvm-svn: 303578

--

commit 54f0440c1fe82e9649168628eee5f28c375ff6f3
Author: Richard Smith <richard-llvm@metafoo.co.uk>
Date:   Thu May 18 02:29:20 2017 +0000

    [modules] Switch from inferring owning modules based on source location to
    inferring based on the current module at the point of creation.
    
    This should result in no functional change except when building a preprocessed
    module (or more generally when using #pragma clang module begin/end to switch
    module in the middle of a file), in which case it allows us to correctly track
    the owning module for declarations. We can't map from FileID to module in the
    preprocessed module case, since all modules would have the same FileID.
    
    There are still a couple of remaining places that try to infer a module from a
    source location; I'll clean those up in follow-up changes.
    
    llvm-svn: 303322

commit 6180337fe12acb30fe877533ce37aaaa848982d1
--

commit 9746f817ea7a0fb7b4ccf277b6a63455456e9437
Author: Siddharth Bhat <siddu.druid@gmail.com>
Date:   Mon May 15 08:18:51 2017 +0000

    [Simplify] Fix r302986 that introduced non-inferrable templates.
    
    - auto + decltype + template use was not inferrable in
      `Transform/Simplify.cpp accessesInOrder`.
    
    - changed code to explicitly construct required vector instead of using
      higher order iterator helpers.
    
--
    TargetLibraryInfo: Introduce wcslen
    
    wcslen is part of the C99 and C++98 standards.
    
    - This introduces the function to TargetLibraryInfo.
    - Also set attributes for wcslen in llvm::inferLibFuncAttributes().
    
    Differential Revision: https://reviews.llvm.org/D32837
    
    llvm-svn: 302278

--

commit e0f9e984fd7e6c02016b16eb355e788a645091ee
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Apr 28 22:52:41 2017 +0000

    InferAddressSpaces: Search constant expressions for addrspacecasts
    
    These are pretty common when using local memory, and the 64-bit generic
    addressing is much more expensive to compute.
    
    llvm-svn: 301711
--

commit c20ccd2c0209fdaae7f7efe066c4b59b4ca46842
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Apr 28 22:18:19 2017 +0000

    InferAddressSpaces: Avoid looking up deleted values
    
    While looking at pure addressing expressions, it's possible
    for the value to appear later in Postorder.
    
    I haven't been able to come up with a testcase where this
--

commit a1e734050cf2495f551ce3b97c0790a8232ea164
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Apr 28 22:18:08 2017 +0000

    InferAddressSpaces: Infer from just addrspacecasts
    
    Eliminates some more cases where some subset of the addressing
    computation remains flat. Some cases with addrspacecasts
    in nested constant expressions are still left behind however.
    
--

commit 6d7f01e3d89d8481019580c7e714625df602e91e
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Apr 24 23:42:41 2017 +0000

    InferAddressSpaces: Use reference arguments instead of pointers
    
    llvm-svn: 301276

commit 1df42fac54a265326cdf5c0bb3244529ca54e551
Author: Eugene Zelenko <eugene.zelenko@gmail.com>
--

commit e8d0539f202c9f35a98193fcbd7917f683fd8e08
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Apr 24 23:02:57 2017 +0000

    InferAddressSpaces: Remove redundant assert
    
    This is just asserting all the operations are handled in the
    switch, which the unreachable already handles.
    
    llvm-svn: 301270
--

commit c07bda7b8788b80dff43ab2f5827f7e7224fc64b
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Apr 21 21:35:04 2017 +0000

    InferAddressSpaces: Infer for just GEPs
    
    Fixes leaving intermediate flat addressing computations
    where a GEP instruction's source is a constant expression.
    
    Still leaves behind a trivial addrspacecast + gep pair that
--
Date:   Tue Apr 4 17:48:21 2017 +0000

    Tone down the "lldb types" log a bit.
    
    Change the get shared class info function to only
    dump its results to the inferior stdout when the
    log is verbose.  This matches the lldb side of the
    same process, which only logs what it found if the
    log is on verbose.
    
    llvm-svn: 299451
--

commit 0f5063c7547ec908318471fb3d58ed4461ee0a8f
Author: Craig Topper <craig.topper@gmail.com>
Date:   Fri Mar 17 23:48:02 2017 +0000

    [BuildLibCalls] emitPutChar should infer function attributes for putchar
    
    When InstCombine calls into SimplifyLibCalls and it createa putChar calls, we don't infer the attributes. And since SimplifyLibCalls doesn't use InstCombine's IRBuilder the calls doesn't end up in the worklist on this iteration of InstCombine. So it gets picked up on the next iteration where it causes an IR change. This of course causes InstCombine to run another iteration.
    
    So this patch just gets the attributes right the first time. We already did this for puts and some other libcalls.
    
    Differential Revision: https://reviews.llvm.org/D31094
    
--
    Summary:
    These classes existed only because of the GetName() static function,
    which can be moved to a more natural place anyway. I move the linux
    version to NativeProcessLinux (and get rid of ProcFileReader), the
    freebsd version to ProcessFreeBSD (and fix a bug where it was using the
    current process ID, instead of the inferior pid), and remove the NetBSD
    version (which was probably incorrect anyway, as it assumes the current
    process instead of the inferior.
    
    I also add an llgs test to that verifies thread names are read
    correctly.
    
    Reviewers: zturner, krytarowski, emaste
--
    Make LLDB skip server-client roundtrip for signals that don't require any actions
    
    If QPassSignals packaet is supported by lldb-server, lldb-client will
    utilize it and ask the server to ignore signals that don't require stops
    or notifications.
    Such signals will be immediately re-injected into inferior to continue
    normal execution.
    
    Differential Revision: https://reviews.llvm.org/D30520
    
    llvm-svn: 297231
--
Date:   Thu Mar 2 11:36:14 2017 +0000

    Fix flakyness in TestGdbRemoteHostInfo
    
    this test was using the VPATH hack to avoid having a copy of the
    inferior source code. This makes the test fail if in happens to run
    concurrently with a test in the parent folder. Fix that by moving it up
    to the parent.
    
    llvm-svn: 296741

--
    
    FindAllSymbols now finds (most!) main-file usages of the discovered symbols.
    The per-TU map output has NumUses=0 or 1 (only one use per file is counted).
    The reducer aggregates these to find the number of files that use a symbol.
    
    The NumOccurrences is now set to 1 in the mapper rather than being inferred by
    the reducer, for consistency.
    
    The idea here is to use NumUses for ranking: intuitively number of files that
    use a symbol is more meaningful than number of files that include the header.
    
--
Author: Pavel Labath <labath@google.com>
Date:   Fri Feb 24 09:29:14 2017 +0000

    Implement QPassSignals GDB package in lldb-server
    
    Summary: QPassSignals package allows lldb client to tell lldb-server to ignore certain types of signals and re-inject them back to inferior without stopping execution.
    
    Reviewers: jmajors, labath
    
    Subscribers: danalbert, srhines, emaste, lldb-commits
    
--

commit de4c1c0ee7406a4459abefa3f4feed41a3245242
Author: Pavel Labath <labath@google.com>
Date:   Thu Feb 23 09:46:33 2017 +0000

    Reformat inferior's main.cpp in lldb-server test
    
    Summary: main.cpp is complete mess of tabs and spaces. This change brings it to compliance with LLVM coding style.
    
    Reviewers: jmajors, labath
    
--

commit fb9f647e5f94d436a6883ea619be07fb70c5d190
Author: Reid Kleckner <rnk@google.com>
Date:   Tue Feb 14 21:38:17 2017 +0000

    MS inline asm: Filter MXCSR out of the inferred clobber list
    
    Since r295004, LLVM has started modelling this new register, but we
    don't have GCC constraint inline asm spellings for it yet.
    
    llvm-svn: 295107
--
    Summary:
    Convert all obvious node_begin/node_end and child_begin/child_end
    pairs to range based for.
    
    Sending for review in case someone has a good idea how to make
    graph_children able to be inferred. It looks like it would require
    changing GraphTraits to be two argument or something. I presume
    inference does not happen because it would have to check every
    GraphTraits in the world to see if the noderef types matched.
    
    Note: This change was 3-staged with clang as well, which uses
    Dominators/etc from LLVM.
    
--
Date:   Wed Feb 8 07:09:03 2017 +0000

    TargetLowering: Remove AddrSpace parameter from GetAddrModeArguments
    
    It doesn't make any sense to pass in to what is supposed to be parsing
    the call, and this can be inferred from the pointer output.
    
    llvm-svn: 294412

commit 78b47875932a7d291edbc1142b496955bceb4ad9
Author: Craig Topper <craig.topper@gmail.com>
--

commit 417e0072d6af58b735cbbbf9454001ae8915a5dd
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Wed Feb 8 06:16:04 2017 +0000

    AMDGPU: Enable InferAddressSpaces
    
    llvm-svn: 294408

commit 3fd463a15a9b0dc1075029e041284f8dc460395c
Author: Craig Topper <craig.topper@gmail.com>
--

commit 300836098f6cffdeadef2d77caae0b59ed191b5d
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Thu Feb 2 03:37:22 2017 +0000

    InferAddressSpaces: Handle more cases with constant select operands
    
    llvm-svn: 293859

commit 753e13c0ebb9c08216f6a15ad67ecab3f7375110
Author: Jason Molenda <jmolenda@apple.com>
--

commit db6e9e89a9a9239b4bf66632864bf4dd9c538d56
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Thu Feb 2 00:28:25 2017 +0000

    InferAddressSpaces: clang-format some things
    
    llvm-svn: 293843

commit edd57e8eb03c7481682f1320124d61cb0ba94755
Author: Steven Wu <stevenwu@apple.com>
--

commit bdd59e68799c6fec87a26c459bc0541b15be9bfc
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Wed Feb 1 00:08:53 2017 +0000

    InferAddressSpaces: Handle select
    
    This fails to handle some cases where one of the inputs is
    a constant to be fixed in a later commit.
    
    llvm-svn: 293723
--

commit 864fbacb4a60f5aa6abfa7d169448d6b4d38c871
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 23:57:20 2017 +0000

    InferAddressSpaces: Remove dead declaration
    
    llvm-svn: 293720

commit 517a290e4f703d81dacefadcbf38a534591e2b44
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 23:48:44 2017 +0000

    InferAddressSpaces: Avoid double map lookup
    
    llvm-svn: 293719

commit 2a46d810387abcc29ce4ca28d27aab02e7a94e37
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 23:48:40 2017 +0000

    InferAddressSpaces: Fix broken casting of constants
    
    llvm-svn: 293718

commit 1575cb893c5f1c8c5984a577bb239e4ecbad0796
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
--

commit 973c4aebade9217287fe511d68a7cf60956057a2
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 02:17:41 2017 +0000

    InferAddressSpaces: Rename constant
    
    llvm-svn: 293594

commit 72f259b8ebc0620d9518ec75ce0a85e8c663945c
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 02:17:32 2017 +0000

    InferAddressSpaces: Handle icmp
    
    llvm-svn: 293593

commit d064cc93b26edc8003e68aef27a67f2860baf4e8
Author: Craig Topper <craig.topper@gmail.com>
--

commit 6d5a8d48fd762153c4f3ba8c0e9f9d35ce84e6d6
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 01:56:57 2017 +0000

    InferAddressSpaces: Support memory intrinsics
    
    llvm-svn: 293587

commit f63f58a28f57891a2efc933bdd8c631013daa684
Author: Tim Shen <timshen91@gmail.com>
--

commit 6c907a9bb3d16208d765fb409a30e82af5b81c11
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 01:40:38 2017 +0000

    InferAddressSpaces: Support atomics
    
    llvm-svn: 293584

commit 6138cf87cef726e9c20186e7d1877491605f26ad
Author: Rafael Espindola <rafael.espindola@gmail.com>
--

commit d89a6e11a78c781184544c05e2619c4d010718d6
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 01:30:16 2017 +0000

    InferAddressSpaces: Don't replace volatile users
    
    llvm-svn: 293582

commit 8335dd314f369fd885b220a48be3af7fbdb0d584
Author: Justin Bogner <mail@justinbogner.com>
--

commit b6491cc8540973a33d5d6d7010bf715c25cfc938
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 01:20:54 2017 +0000

    AMDGPU: Implement hook for InferAddressSpaces
    
    For now just port some of the existing NVPTX tests
    and from an old HSAIL optimization pass which
    approximately did the same thing.
    
--

commit 850657a439c248c73e1b5fce04adbac771104cda
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jan 31 01:10:58 2017 +0000

    NVPTX: Move InferAddressSpaces to generic code
    
    llvm-svn: 293579

commit 342257ea9284da6fe20cdc5ccac3c1aa0e2b0243
Author: Eugene Zelenko <eugene.zelenko@gmail.com>
--

commit 9f432ec24c0e7ad652c873bd0ef02f553fa0005d
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Jan 30 23:27:11 2017 +0000

    NVPTX: Trivial cleanups of NVPTXInferAddressSpaces
    
    - Move DEBUG_TYPE below includes
    - Change unknown address space constant to be consistent with other
      passes
    - Grammar fixes in debug output
--

commit 42b6478344dd4391ad8f5ddeb97dbe40098f0099
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Mon Jan 30 23:02:12 2017 +0000

    NVPTX: Refactor NVPTXInferAddressSpaces to check TTI
    
    Add a new TTI hook for getting the generic address space value.
    
    llvm-svn: 293563

--

commit 32b9600a7efa98d829dd338e330ac39f3d02d599
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Fri Jan 27 17:30:39 2017 +0000

    NVPTX: Make NVPTXInferAddressSpaces preserve CFG
    
    llvm-svn: 293308

commit b99a06b7c9f4f6559da9fefeb1011c8aefe3f34c
Author: Jun Bum Lim <junbuml@codeaurora.org>
--
Date:   Fri Jan 27 01:30:46 2017 +0000

    [ARM][LegalizerInfo] Specify the type of the opcode.
    
    This is to fix the win7 bot that does not seem to be very
    good at infering the type when it gets used in an initiliazer list.
    
    llvm-svn: 293248

commit 68e20da3f969b8faf2b12219a9ba2e8e1575bd07
Author: Weiming Zhao <weimingz@codeaurora.org>
--
Date:   Fri Jan 27 01:13:30 2017 +0000

    [AArch64][LegalizerInfo] Specify the type of the opcode.
    
    This is an attempt to fix the win7 bot that does not seem to be very
    good at infering the type when it gets used in an initiliazer list.
    
    llvm-svn: 293246

commit e15e460c057fa8ea36b70589d6229569f50f1624
Author: Quentin Colombet <qcolombet@apple.com>
--
Date:   Fri Jan 27 00:39:03 2017 +0000

    [AArch64][LegalizerInfo] Specify the type of the initialization list.
    
    This is an attempt to fix the win7 bot that does not seem to be very
    good at infering the type.
    
    llvm-svn: 293238

commit 8e9ac427427558a7e8ad6862e51f305ad9f4d342
Author: Kostya Serebryany <kcc@google.com>
--

commit 777fcecf8f3a8697053f9039de692ddd81720b69
Author: Jason Molenda <jmolenda@apple.com>
Date:   Sat Jan 21 01:17:36 2017 +0000

    Add a catch-all line for detecting dyld in the inferior process
    shlibs so we don't miss dyld.
    <rdar://problem/30128580>
    
    llvm-svn: 292696

--
    [lldb-mi] Fix implementation for a few mi commands
    
    Summary:
    Some of the mi commands implemented in lldb-mi are incomplete/not confirming to the spec.
    - `gdb-show` and `gdb-set` doesn't support getting/setting `disassembly-flavor`
    - `environment-cd` should also change the working directory for inferior
    - debugger CLI output should be printed as console-stream-output record, rather than being dumped directly
    to stdout
    - `target-select` should provide inner error message in mi response
    
    Related bug report:
--
    Fix an issue with isGuaranteedToTransferExecutionToSuccessor
    
    I'm not sure if this was intentional, but today
    isGuaranteedToTransferExecutionToSuccessor returns true for readonly and
    argmemonly calls that may throw.  This commit changes the function to
    not implicitly infer nounwind this way.
    
    Even if we eventually specify readonly calls as not throwing,
    isGuaranteedToTransferExecutionToSuccessor is not the best place to
    infer that.  We should instead teach FunctionAttrs or some other such
    pass to tag readonly functions / calls as nounwind instead.
    
    llvm-svn: 290794

commit 0945530d4dc3c36a03cbd5c62fdccb870bcb21ab
--
    
    At the same time, as we add predicate handling, we want to be able to
    touch instructions that are dominated by a given block by
    ranges (because a change in value numbering a predicate possibly
    affects all users we dominate that are using that predicate).
    If we don't do it this way, we can't do value inference over
    backedges (the paper covers this in depth).
    
    The newgvn branch currently overshoots the last part, and guarantees
    that it will touch *at least* the right set of instructions, but it
    does touch more.  This is because the bitvector instruction ranges are
--
    [Analysis] Ignore `nobuiltin` on `allocsize` function calls.
    
    We currently ignore the `allocsize` attribute on functions calls with
    the `nobuiltin` attribute when trying to lower `@llvm.objectsize`. We
    shouldn't care about `nobuiltin` here: `allocsize` is explicitly added
    by the user, not inferred based on a function's symbol.
    
    llvm-svn: 290588

commit f0071ccd0855065ff7ad6fd1393993bf3bc71486
Author: Richard Smith <richard-llvm@metafoo.co.uk>
--
    Fingers crossed that this patch sticks this time. :)
    
    Original commit message:
    
    This patch does three things:
    - Gives us the alloc_size attribute in clang, which lets us infer the
      number of bytes handed back to us by malloc/realloc/calloc/any user
      functions that act in a similar manner.
    - Teaches our constexpr evaluator that evaluating some `const` variables
      is OK sometimes. This is why we have a change in
      test/SemaCXX/constant-expression-cxx11.cpp and other seemingly
--

    Add the alloc_size attribute to clang.
    
    This patch does three things:
    
    - Gives us the alloc_size attribute in clang, which lets us infer the
      number of bytes handed back to us by malloc/realloc/calloc/any user
      functions that act in a similar manner.
    - Teaches our constexpr evaluator that evaluating some `const` variables
      is OK sometimes. This is why we have a change in
      test/SemaCXX/constant-expression-cxx11.cpp and other seemingly
--
    [NVPTX] Remove dead code.
    
    I've chosen to remove NVPTXInstrInfo::CanTailMerge but not
    NVPTXInstrInfo::isLoadInstr and isStoreInstr (which are also dead)
    because while the latter two are reasonably useful utilities, the former
    cannot be used safely: It relies on successful address space inference
    to identify writes to shared memory, but addrspace inference is a
    best-effort thing.
    
    llvm-svn: 289740

commit de4749b7488c1b6b299af2c3e84fec636cc27280
--
    
    These extra specializations were added in the depths of history (r67984 from
    2009) and are clearly problematic now. The pointers actually are aligned to the
    default (8 bytes), since otherwise UBsan would be complaining loudly.
    
    I *think* it originally made sense because there was no "alignof" to infer the
    correct value so the generic case went with what malloc returned (8-byte
    aliged objects), and on 32-bit machines this specialization was correct. It
    became wrong when we started compiling for 64-bit, and caused a UBSan failure
    when we tried to put a ValueHandle into a DenseMap.
    
--
Author: Devin Coughlin <dcoughlin@apple.com>
Date:   Wed Dec 7 17:36:27 2016 +0000

    [analyzer] Fix typo in nullability checker diagnostic
    
    'infered' --> 'inferred'
    
    llvm-svn: 288922

commit d719d371566ea21e3060bc0a9d4e6d8c7b63c010
Author: Adhemerval Zanella <adhemerval.zanella@linaro.org>
--

    [change-namespace] don't fix using shadow decls in classes.
    
    Summary:
    Using shadow declarations in classes always refers to base class, which does not
    need to be fixed/qualified since it can be inferred from inheritance.
    
    Reviewers: bkramer
    
    Subscribers: cfe-commits
    
--
    to a separate opcode, so we can set mayLoad = 1 so that it won't
    be reordered before the other exp stores, since this has the special
    constraint that if the done bit is set then this should be the last
    exp in she shader.
    
    Previously all exp instructions were inferred to have unmodeled
    side effects.
    
    llvm-svn: 288695

commit df87d070c917029bd0209408fcfe833d149bcca7
--
Date:   Mon Dec 5 16:28:47 2016 +0000

    [analyzer] ObjCGenerics: Warn only on mismatch for invariant type parameters
    
    On a method call, the ObjCGenerics checker uses the type tracked by
    DynamicTypePropagation for the receiver to to infer substituted parmeter types
    for the called methods and warns when the argument type does not match the
    parameter.
    
    Unfortunately, using the tracked type can result in false positives when the
    receiver has a non-invariant type parameter and has been intentionally upcast.
--
Date:   Sat Nov 19 00:13:03 2016 +0000

    [Sema] Don't allow applying address-of operator to a call to a function
    with __unknown_anytype return type.
    
    When the following code is compiled, Sema infers that the type of
    __unknown_anytype is double:
    
    extern __unknown_anytype func();
    double *d = (double*)&func();
    
--

commit 844ab6a0126a6379712e1db5c3c3a93653022f99
Author: Steven Wu <stevenwu@apple.com>
Date:   Wed Nov 16 06:06:44 2016 +0000

    [Driver] Infer the correct option to ld64 for -fembed-bitcode
    
    Summary:
    -fembed-bitcode infers -bitcode_bundle to ld64 but it is not correctly
    passed when using LTO. LTO is a special case of -fembed-bitcode which
    it doesn't require embed the bitcode in a special section in the object
    file but it requires linker to save that as part of the final executable.
    
    rdar://problem/29274226
--

commit 3b917fe019fff717f9b92defb8ec14601090381f
Author: Jordan Rose <jordan_rose@apple.com>
Date:   Thu Nov 10 23:28:30 2016 +0000

    Warn when 'assume_nonnull' infers nullability within an array.
    
    ...or within a reference. Both of these add an extra level of
    indirection that make us less certain that the pointer really was
    supposed to be non-nullable. However, changing the default behavior
    would be a breaking change, so we'll just make it a warning instead.
--
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
Date:   Mon Nov 7 21:20:15 2016 +0000

    [index] Handle properly C++14's template variables.
    
    - Infer the right symbol kind.
    - Provide a templated USR, similar to how we handle class templates.
    
    rdar://28980398
    
    llvm-svn: 286154
--

    Test for YMMRegisters.
    
    Summary:
    This patch contains test for reading YMM Registers. The test basically
    contains an inferior that loads the ymm registers with a bit pattern
    and the python test executes register read to check if the bit pattern
    is correctly written in the registers. This test is repeated twice for
    each register with a different pattern for better sanity.
    
    Reviewers: tberghammer, zturner, clayborg
--
Date:   Mon Oct 31 21:51:42 2016 +0000

    [NVPTX] Remove NVPTXFavorNonGenericAddrSpaces pass.
    
    Summary:
    This has been replaced by the NVPTXInferAddressSpaces pass.  We've had
    the new one as the default with the old one accessible via a flag for
    some months now, and we've had no problems.
    
    Reviewers: tra
    
--

    Don't set a software stepping breakpoint at 0 on arm or mips.
    
    Summary:
    Check whether the setting the breakpoint failed during instruction emulation. If
    it did, the next pc is likely in unmapped memory, and the inferior will crash
    anyway after the next instruction. Do not return an error in this case, but just
    continue stepping.
    Reenabled the crash during step test for android/linux.
    
    Reviewers: labath
--
Date:   Tue Oct 25 21:47:24 2016 +0000

    [PGO] Fix select instruction annotation
    
    Summary:
    Select instruction annotation in IR PGO uses the edge count to infer the
    branch count. It's currently placed in setInstrumentedCounts() where
    no all the BB counts have been computed. This leads to wrong branch weights.
    Move the annotation after all BB counts are populated.
    
    Reviewers: davidxl
--
Author: Vedant Kumar <vsk@apple.com>
Date:   Thu Oct 20 18:44:14 2016 +0000

    [CodeGen] Devirtualize calls to methods marked final in a derived class
    
    If we see a virtual method call to Base::foo() but can infer that the
    object is an instance of Derived, and that 'foo' is marked 'final' in
    Derived, we can devirtualize the call to Derived::foo().
    
    Differential Revision: https://reviews.llvm.org/D25813
    
--
Author: Omair Javaid <omair.javaid@linaro.org>
Date:   Thu Oct 20 09:07:26 2016 +0000

    Fix ARM/AArch64 Step-Over watchpoint issue remove provision for duplicate watchpoints
    
    This patch fixes ARM/AArch64 watchpoint bug which was taking inferior out of control while stepping over watchpoints.
    Also adds a test case that tests above problem.
    
    Differential revision: https://reviews.llvm.org/D25057
    
    llvm-svn: 284706
--
Date:   Thu Oct 6 15:49:10 2016 +0000

    Improve test for Intel(R) MPX registers.
    
    Summary:
    Let the inferior test code determine if CPU and kernel support Intel(R)
    MPX and cleanup test script.
    
    Differential Revision: https://reviews.llvm.org/D25328
    
    llvm-svn: 283461
--

commit 79dcc274b4c5334389b629a75d915cf954995b15
Author: Michael Kuperstein <mkuper@google.com>
Date:   Tue Sep 20 23:10:31 2016 +0000

    [InferAttributes] Don't access parameters that don't exist.
    
    Check for the correct number of parameters before querying their type.
    This fixes PR30455.
    
    llvm-svn: 282038
--

commit c83044d9bb6a1fc7b0962f499c03144c6858a7bc
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Mon Sep 12 16:04:59 2016 +0000

    [FunctionAttrs] Don't try to infer returned if it is already on an argument
    
    Trying to infer the 'returned' attribute if an argument is already
    'returned' can lead to verification failure: inference might determine
    that a different argument is passed through which would result in two
    different arguments marked as 'returned'.
    
    This fixes PR30350.
    
--
    query multiple modules at once. This makes a significant speed improvement in case the
    application has many (over a hundred) modules, and the communication link has a non-negligible
    latency. This functionality is accessed by ProcessGdbRemote::PrefetchModuleSpecs(), which does
    the caching. GetModuleSpecs() is modified to first consult the cache before asking the remote
    stub. PrefetchModuleSpecs is currently only called from POSIX-DYLD dynamic loader plugin, after
    it reads the list of modules from the inferior memory, but other uses are possible.
    
    This decreases the attach time to an android application by about 40%.
    
    Reviewers: clayborg
    
--
    
    Current state on Darwin:
    * Process launching is implemented.  (Attach is not).
      Launching on devices has not yet been tested (FBS/BKS might
      need a bit of work).
    * Inferior waitpid monitoring and communication of exit status
      via MainLoop callback is implemented.
    * Memory read/write, breakpoints, thread register context, etc.
      are not yet implemented.  This impacts process stop/resume, as
      the initial launch suspended immediately starts the process
      up and running because it doesn't know it is supposed to remain
--
    Classes with no virtual methods or whose virtual methods were all
    inherited from virtual bases don't have a vfptr at offset zero. We were
    crashing attempting to get the layout of that non-existent vftable.
    
    We don't need any vshape info in this case because the debugger can
    infer it from the base class information. The current class may not
    introduce any virtual methods if we are in this situation.
    
    llvm-svn: 280287

commit 7c4700525c6d3f0e76c17081439ac30d53fe1251
--
    Summary:
    The vdso is full of hand-written assembly which the instruction emulator has a hard time
    understanding. Luckily, the kernel already provides us with correct unwind info for them. So
    let's use it.
    
    This fixes (at least) the AssertingInferiorTestCase.test_inferior_asserting_disassemble test on
    android N i386.
    
    Reviewers: tberghammer
    
    Subscribers: tberghammer, danalbert, lldb-commits
--

commit d13880a75011b20ffd4b011643901865b494da22
Author: Justin Lebar <jlebar@google.com>
Date:   Fri Aug 19 20:46:45 2016 +0000

    [NVPTX] Switch nvptx-use-infer-addrspace to true.
    
    Summary:
    This switches us to use a different, more powerful algorithm for address
    space inference.  I've tested this locally and it seems to work great.
    Once we're more confident in it, we can remove the old pass altogether.
    
    Reviewers: jingyue
    
    Subscribers: llvm-commits, tra, jholewinski
--
    
    I'm going to follow up on the original commit to suggest getting
    IR-level testing in addition to the asm level testing here so that we
    can see and test these kinds of issues. We might never get an x86
    instruction out with an alignment constraint, but we could stil
    miscompile code by folding against the alignment marked on (or inferred
    for in this case) the load.
    
    llvm-svn: 278203

commit 4c5e8ccf748ec104bc5ff90b131306674f3cfecd
--
    the specification for the VBROADCASTF128 instruction.
    
    That instruction's spec is *also* completely silent on alignment.
    Fortunately, when it comes to the instruction's spec, silence is enough.
    There is no #GP fault option for an underaligned address so this
    instruction, and by inference the intrinsic, can read any alignment.
    
    As it happens, the old code worked exactly this way and in fact we have
    plenty of code that hands pointers with less than 16-byte alignment to
    these intrinsics. This code broke pretty spectacularly with this commit.
    
--
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Sun Aug 7 08:28:58 2016 +0000

    Update clang tests for LLVM r277950
    
    We infer inbounds on GEPs of allocas leading to minor perturbations in
    tests.
    
    llvm-svn: 277953

commit d150137f64831a5573015313d91a0562fb1935b8
--

commit 4e4f4437c27744de40acb2f79e51a7617352d7b6
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Sun Aug 7 07:58:00 2016 +0000

    [InstCombine] Infer inbounds on geps of allocas
    
    llvm-svn: 277950

commit 49841c38121941982a96c0f635cdc3b71d4f1800
Author: Craig Topper <craig.topper@gmail.com>
--
    [AutoFDO] Fix handling of empty profiles
    
    Summary:
    If a profile has no samples for a function, then the function "entry count" is set to the value 0. Several places in the code test that if the Function::getEntryCount is defined at all. Here we change to treat a 0 entry count the same as undefined.
    
    In particular, this fixes a problem in getLayoutSuccessorProbThreshold in MachineBlockPlacement.cpp where we use a different and inferior heuristic for laying out basic blocks.
    
    Reviewers: danielcdh, dnovillo
    
    Subscribers: llvm-commits
    
--

commit f7791bb9c6d458437d4e8abe72f846bb3bf8527f
Author: Rui Ueyama <ruiu@google.com>
Date:   Tue Jul 26 19:34:10 2016 +0000

    Remove return type that can trivially be inferred.
    
    llvm-svn: 276794

commit 57c3ddddecefdb6404e9f0970e55bf26f06f3a7f
Author: Krzysztof Parzyszek <kparzysz@codeaurora.org>
--
Date:   Mon Jul 25 18:34:51 2016 +0000

    StringSwitch cannot be copied (take 2).
    
    This prevents StringSwitch from being used with 'auto', which is
    important because the inferred type is StringSwitch rather than the
    result type. This is a problem because StringSwitch stores addresses
    of temporary values rather than copying or moving the value into its
    own storage.
    
    This is a compromise that still allows wrapping StringSwitch in other
--
Date:   Mon Jul 25 17:08:24 2016 +0000

    StringSwitch cannot be copied or moved.
    
    ...but most importantly, it cannot be used well with 'auto', because
    the inferred type is StringSwitch rather than the result type. This
    is a problem because StringSwitch stores addresses of temporary
    values rather than copying or moving the value into its own storage.
    
    Changing this uncovered the bug in PassBuilder, also in this patch.
    Clang doesn't seem to have any occurrences of the issue.
--
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Wed Jul 20 04:13:01 2016 +0000

    Revert "Disable this-return argument forwarding on ARM/AArch64"
    
    Inference of the 'returned' attribute was fixed in r276008, lets try
    turning the backend support back on.
    
    This reverts commit r275677.
    
    llvm-svn: 276081
--

commit 24547108d66802490f30f2c15d1132dc6a4a5b16
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Tue Jul 19 19:59:24 2016 +0000

    Let FuncAttrs infer the 'returned' argument attribute
    
    This reverts commit r275756.
    
    llvm-svn: 276014

--

commit 5246e0b2c25c293e6896e3a6fff63ade00fcb54e
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Tue Jul 19 18:50:26 2016 +0000

    [FunctionAttrs] Correct the safety analysis for inference of 'returned'
    
    We skipped over ReturnInsts which didn't return an argument which would
    lead us to incorrectly conclude that an argument returned by another
    ReturnInst was 'returned'.
    
--

commit 5ab9732aef3c2d7af071de8492fd7c08e7984025
Author: Pavel Labath <labath@google.com>
Date:   Mon Jul 18 14:42:01 2016 +0000

    Revert "[test] Report error when inferior test processes exit with a non-zero code"
    
    This reverts r275782.
    
    The problem with the commit is that it reports an additional "exit (1)" error for every file
    containing a failing test, which is far more than I had intended to do. I'll need to come up with
--

commit 52bd8012bd0f440e21ddec0c1d6ed89605adbb3b
Author: Pavel Labath <labath@google.com>
Date:   Mon Jul 18 11:27:19 2016 +0000

    [test] Report error when inferior test processes exit with a non-zero code
    
    Summary:
    We've run into this problem when the test errored out so early (because it could not connect to
    the remote device), that the code in D20193 did not catch the error. This resulted in the test
    suite reporting success with 0 tests being run.
    
    This patch makes sure that any non-zero exit code from the inferior process gets reported as an
    error. Basically I expand the concept of "exceptional exits", which was previously being used for
    signals to cover these cases as well.
    
    Reviewers: tfiala, zturner
    
--

commit 966bde50c38aa57dec8f02a5c39943500367e0b3
Author: NAKAMURA Takumi <geek4civic@gmail.com>
Date:   Mon Jul 18 03:23:25 2016 +0000

    Revert r275678, "Revert "Revert r275027 - Let FuncAttrs infer the 'returned' argument attribute""
    
    This reverts also r275029, "Update Clang tests after adding inference for the returned argument attribute"
    
    It broke LTO build. Seems miscompilation.
    
    llvm-svn: 275756

--

commit 81cdef31e6a9fcfecae3d1b7c6a467dee18b56e2
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Sat Jul 16 07:22:09 2016 +0000

    Revert "Revert r275029 - Update Clang tests after adding inference for the returned argument attribute"
    
    This reverts commit r275043 after reapplying the underlying LLVM commit.
    
    llvm-svn: 275679

commit 660096b26045e2be00d5a7eb8df15ae3d45cc5c5
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Sat Jul 16 07:21:28 2016 +0000

    Revert "Revert r275027 - Let FuncAttrs infer the 'returned' argument attribute"
    
    This reverts commit r275042; the initial commit triggered self-hosting failures
    on ARM/AArch64. James Molloy identified the problematic backend code, which has
    been disabled in r275677. Trying again...
    
    Original commit message:
    
    Let FuncAttrs infer the 'returned' argument attribute
    
    A function can have one argument with the 'returned' attribute, indicating that
    the associated argument is always the return value of the function. Add
    FuncAttrs inference logic.
    
    llvm-svn: 275678

commit 04b5330ccdf93e3d051c7abe67303dd2dc973303
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Sat Jul 16 07:07:29 2016 +0000

    Disable this-return argument forwarding on ARM/AArch64
    
    r275042 reverted function-attribute inference for the 'returned' attribute
    because the feature triggered self-hosting failures on ARM and AArch64. James
    Molloy determined that the this-return argument forwarding feature, which
    directly ties the returned input argument to the returned value, was the cause.
    It seems likely that this forwarding code contains, or triggers, a subtle bug.
    Disabling for now until we can track that down.
--
    no corresponding tail call instruction. This was causing the creation of a duplicate
    fall-through edge for basic blocks terminated with a conditional jump serving as
    a tail call when there is profile data available for the non-taken branch. In this
    case, the first fall-through edge had a count taken from the profile data, while
    the second has a count computed (incorrectly) by
    BinaryFunction::inferFallThroughCounts.
    
    (cherry picked from FBD3560504)

commit 486ab273c7d003f30fe9cab8cd0ae81c7ede313f
Author: Maksim Panchenko <maks@fb.com>
--

commit a7b6c973e5fb5852bf31d394290f4cc5c80d40ae
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Wed Jul 13 03:24:41 2016 +0000

    [ConstantFold] Don't incorrectly infer inbounds on array GEP
    
    The many levels of nesting inside the responsible code made it easy for
    bugs to sneak in.  Flattening the logic makes it easier to see what's
    going on.
    
--

commit 9a17d7ac6e548fbe40778205ed16be50bc4626c5
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Mon Jul 11 04:52:07 2016 +0000

    Revert r275029 - Update Clang tests after adding inference for the returned argument attribute
    
    The associated backend change is causing miscompiles from the AArch64 backend.
    
    llvm-svn: 275043

commit 02012bcfee8f2a7c37dc38b35efbeb8c91c9cf28
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Mon Jul 11 04:51:23 2016 +0000

    Revert r275027 - Let FuncAttrs infer the 'returned' argument attribute
    
    Reverting r275027 and r275033. These seem to cause miscompiles on the AArch64 buildbot.
    
    llvm-svn: 275042

--

commit ce881a41f9b8ffcf722bb1772035aa8e2a47f7f4
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Mon Jul 11 01:14:21 2016 +0000

    Don't use a SmallSet for returned attribute inference
    
    Suggested post-commit by David Majnemer on IRC (following-up on a pre-commit
    review comment).
    
    llvm-svn: 275033
--

commit 617c962752ed237f95d15cdb0adba60a04908e67
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Sun Jul 10 22:26:52 2016 +0000

    Update Clang tests after adding inference for the returned argument attribute
    
    Adjusting tests after r275027.
    
    llvm-svn: 275029

--

commit d66a7b05dbdc42f9894e0ef5bbba4ff8c37d1e6d
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Sun Jul 10 22:02:55 2016 +0000

    Let FuncAttrs infer the 'returned' argument attribute
    
    A function can have one argument with the 'returned' attribute, indicating that
    the associated argument is always the return value of the function. Add
    FuncAttrs inference logic.
    
    Differential Revision: http://reviews.llvm.org/D22202
    
    llvm-svn: 275027

--
Author: Pavel Labath <labath@google.com>
Date:   Thu Jul 7 15:46:00 2016 +0000

    [LLGS] Work around an adb bug on Android <=M
    
    On android M it can happen that we get a ETXTBSY, when we try to launch the inferior. Sleeping
    and retrying should help us get more stable results.
    
    llvm-svn: 274763

commit 613cce835f1f8ed58a3f116ae979ee196ca826b8
--

commit 0c4f01d44b5c9c14e464e57e7f09ce7f32f22464
Author: Pavel Labath <labath@google.com>
Date:   Wed Jul 6 13:18:50 2016 +0000

    [LLGS] Log more precise errors during inferior launch
    
    Summary:
    We are seeing infrequent failures to launch the inferior process on android. The failing call
    seems to be execve(). This adds more logging to see the actual error reported by the call.
    
    Reviewers: tberghammer
    
    Subscribers: tberghammer, lldb-commits, danalbert
--
    
    This actually uncovered a surprisingly large chain of ultimately unused
    TLI args.
    From what I can gather, this argument is a remnant of when
    isKnownNonNull would look at the TLI directly.
    The current approach seems to be that InferFunctionAttrs runs early in
    the pipeline and uses TLI to annotate the TLI-dependent non-null
    information as return attributes.
    
    This also removes the dependence of functionattrs on TLI altogether.
    
--

commit e3fa8f64da27e597f86205b6b26ff03c7bd1f1c7
Author: Davide Italiano <davide@freebsd.org>
Date:   Wed Jun 29 15:58:37 2016 +0000

    [ELF] More self-explanatory error message when e_machine can't be inferred.
    
    Thanks to Sean Silva for the suggestion!
    
    llvm-svn: 274134

--

commit 60976ba86dae6a9a60d5b0c13ca884573ec1ae3a
Author: Davide Italiano <davide@freebsd.org>
Date:   Wed Jun 29 06:12:39 2016 +0000

    [LTO] Infer ELFKind/EMachine from Bitcode files
    
    So that users are not forced to pass `-m` on the command line
    when the inputs are all bitcode.
    
    PR:   28268
--

commit 5e64d3fb9480a48a70d28fb43244d4659354a844
Author: Rui Ueyama <ruiu@google.com>
Date:   Wed Jun 29 01:30:50 2016 +0000

    Refactor ELF type inference functions.
    
    Previously, we initialized Config->EKind and Config->EMachine when
    we instantiate ELF objects. That was not an ideal location to do that
    because the logic was buried too deep inside a concrete logic.
    
--

    fix invalid assumption about the executable module in Target::Install()
    
    Target::Install() was assuming the module at index 0 was the executable.
    This is often true, but not guaranteed to be the case.  The
    TestInferiorChanged.py test highlighted this when run against iOS.
    After the binary is replaced in the middle of the test, it becomes the
    last module in the list.  The rest of the Target::Install() logic then
    clobbers the executable file by using whatever happens to be the first
    module in the target module list.
    
    This change also marks the TestInferiorChanged.py test as a no-debug-info
    test.
    
    llvm-svn: 273960

commit 97ca82776d1c0f244ff442fc9d9aeaee194fccbe
--
    [yaml2obj] Remove --format option in favor of YAML tags
    
    Summary:
    Our YAML library's handling of tags isn't perfect, but it is good enough to get rid of the need for the --format argument to yaml2obj. This patch does exactly that.
    
    Instead of requiring --format, it infers the format based on the tags found in the object file. The supported tags are:
    
    !ELF
    !COFF
    !mach-o
    !fat-mach-o
--
    Summary:
    Change some of the internal interfaces in Loads.cpp to keep track of the
    number of bytes we're trying to prove dereferenceable using an explicit
    `Size` parameter.
    
    Before this, the `Size` parameter was implicitly inferred from the
    pointee type of the pointer whose dereferenceability we were trying to
    prove, causing us to be conservative around bitcasts. This was
    unfortunate since bitcast instructions are no-ops and should never
    break optimizations.  With an explicit `Size` parameter, we're more
    precise (as shown in the test cases), and the code is simpler.
--

commit c20506c5709b7aa4a613176f138b43c2459a6bb0
Author: Theodoros Kasampalis <theo25@fb.com>
Date:   Sun Jul 3 21:30:35 2016 -0700

    Fix in inferFallthroughCounts
    
    Summary:
    This fixes the initialization of basic block execution counts, where
    we should skip edges to the first basic block but we were not
    skipping the corresponding profile info.
--
Author: Theodoros Kasampalis <theo25@fb.com>
Date:   Thu May 26 15:10:09 2016 -0700

    Better edge counts for fall through blocks in presence of C++ exceptions.
    
    Summary: The inference algorithm for counts of fall through edges takes possible jumps to landing pad blocks into account. Also, the landing pad block execution counts are updated using profile data.
    
    (cherry picked from FBD3350727)

commit ec172c6da02111b2e1150b3bd94578789d4fbd14
Author: Samuel Antao <sfantao@us.ibm.com>
--
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Thu May 26 13:57:03 2016 +0000

    Add "-gmodules" support to the test suite.
    
    This change adds the capability of building test inferiors
    with the -gmodules flag to enable module debug info support.
    Windows is excluded per @zturner.
    
    Reviewers: granata.enrico, aprantl, zturner, labath
    
--

commit fad596aa8195fb390a4ff6cdc016c26007743dfa
Author: Peter Collingbourne <peter@pcc.me.uk>
Date:   Wed May 25 21:26:14 2016 +0000

    Move whole-program virtual call optimization pass after function attribute inference in LTO pipeline.
    
    As a result of D18634 we no longer infer certain attributes on linkonce_odr
    functions at compile time, and may only infer them at LTO time. The readnone
    attribute in particular is required for virtual constant propagation (part
    of whole-program virtual call optimization) to work correctly.
    
    This change moves the whole-program virtual call optimization pass after
    the function attribute inference passes, and enables the attribute inference
    passes at opt level 1, so that virtual constant propagation has a chance to
    work correctly for linkonce_odr functions.
    
    Differential Revision: http://reviews.llvm.org/D20643
    
--

commit 485f9220b75cea2b67d38c452d29c2fbfc592b4b
Author: Theodoros Kasampalis <theo25@fb.com>
Date:   Tue May 24 09:26:25 2016 -0700

    Taking LP counts into account for FT count inference
    
    (cherry picked from FBD28110493)

commit b64e4390a331bea44a719336c982e4d75b2fd786
Author: Hans Wennborg <hans@hanshq.net>
--

commit 7ffd0b44091ecfdbab65051e07636362939ec541
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Mon May 16 20:30:03 2016 +0000

    [Lex] inferModuleFromLocation should do no work if there are no modules
    
    getModuleContainingLocation ends up on the hot-path for typical C code
    which can lead to calls to getFileIDSlow.
    
    To speed this up, short circuit inferModuleFromLocation when there
    aren't any modules, implicit or otherwise.
    
    This shaves 4-5% build time when building the linux kernel.
    
    llvm-svn: 269687
--
    The test infrastructure tests can be run by using the standard python module testing practice of doing the following:
    
    cd packages/Python/lldbsuite/test_event
    python -m unittest discover -s test/src -p 'Test*.py'
    
    Those tests run the dotest inferior with a known broken test and verify that the errors are caught.  These tests did not pass until I modified dotest.py to capture them properly.
    
    @zturner, if you have the chance, if you could try those steps above (the python -m unittest ... line) on Windows, that would be great if we can address any python2/3/Windows bits there.  I don't think there's anything fancy, but I didn't want to hook it into test flow until I know it works there.
    
    I'll be slowly adding more tests that cover some of the other breakage I've occasionally seen that didn't get collected as part of the summarization.  This is the biggest one I'm aware of.
    
--
Date:   Tue May 10 22:26:45 2016 +0000

    AArch64: allow vN to represent 64-bit registers in inline asm.
    
    Unlike xN/wN, the size of vN is genuinely ambiguous in the assembly, so we
    should try to infer what was intended from the type. But only down to 64-bits
    (vN can never represent sN, hN or bN).
    
    llvm-svn: 269132

commit 7eccf4ee0e8eec5cd64bebdec80ca4b92ecc2ecb
--
Author: Manman Ren <manman.ren@gmail.com>
Date:   Fri May 6 21:04:01 2016 +0000

    Availability: set location when creating attribute for tvos, watchos.
    
    When inferring availability attributes for tvos, watchos from ios, we
    use the same source location and set the implicit bit to true.
    
    So when emitting diagnostics on inferred attributes, we have a source
    location.
    
    rdar://25893544
    
    llvm-svn: 268793
--
Author: Adrian McCarthy <amccarth@google.com>
Date:   Wed Apr 27 21:53:19 2016 +0000

    XFail TestIRInterpreter on Windows
    
    There's an open bug with calling functions in the inferior.  And Windows doesn't have the POSIX function getpid().
    
    Differential Revision: http://reviews.llvm.org/D19626
    
    llvm-svn: 267800

--
    only enable these features for classes with hidden LTO visibility. This
    notion is based on object file visibility or (on Windows)
    dllimport/dllexport attributes.
    
    We provide the [[clang::lto_visibility_public]] attribute to override the
    compiler's LTO visibility inference in cases where the class is defined
    in the non-LTO'd part of the linkage unit, or where the ABI supports
    calling classes derived from abstract base classes with hidden visibility
    in other linkage units (e.g. COM on Windows).
    
    If the cross-DSO CFI mode is enabled, bitset checks are emitted even for
--
Author: Ahmed Bougacha <ahmed.bougacha@gmail.com>
Date:   Wed Apr 27 19:04:50 2016 +0000

    [LIR] Set attributes on memset_pattern16.
    
    "inferattrs" will deduce the attribute, but it will be too late for
    many optimizations. Set it ourselves when creating the call.
    
    Differential Revision: http://reviews.llvm.org/D17598
    
    llvm-svn: 267762
--

commit 44c19876c701ec6915bc2d0c683409ef2fbf291b
Author: Ahmed Bougacha <ahmed.bougacha@gmail.com>
Date:   Wed Apr 27 19:04:43 2016 +0000

    [InferAttrs] Mark memset_pattern16 params nocapture.
    
    Differential Revision: http://reviews.llvm.org/D19471
    
    llvm-svn: 267760

commit b0624a2cb4838adf5c9634a723e483f6776a0301
Author: Ahmed Bougacha <ahmed.bougacha@gmail.com>
Date:   Wed Apr 27 19:04:40 2016 +0000

    [TLI] Unify LibFunc attribute inference. NFCI.
    
    Now the pass is just a tiny wrapper around the util. This lets us reuse
    the logic elsewhere (done here for BuildLibCalls) instead of duplicating
    it.
    
--

commit 38c87c2e504a2e12a40ae12dd98e16058f304ac2
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Apr 26 21:48:16 2016 +0000

    [LVI] Infer local facts from unary expressions
    
    As pointed out by John Regehr over in http://reviews.llvm.org/D19485, LVI was being incredibly stupid about applying its transfer rules. Rather than gathering local facts from the expression itself, it was simply giving up entirely if one of the inputs was overdefined. This greatly impacts the precision of the overall analysis and makes it far more fragile as well.
    
    This patch implements only the unary operation case. Once this is in, I'll implement the same for the binary operations.
    
--

    ObjectFile: parse EABI Attributes
    
    This adds basic parsing of the EABI attributes section.  This section contains
    additional information about the target for which the file was built.  Attempt
    to infer additional architecture information from that section.
    
    llvm-svn: 267291

commit 66b0a87ae8d6e148e089e7cd6d45d50887e0ea63
Author: NAKAMURA Takumi <geek4civic@gmail.com>
--
Author: Artem Belevich <tra@google.com>
Date:   Thu Apr 21 21:40:27 2016 +0000

    [CUDA] removed unneeded __nvvm_reflect_anchor()
    
    Since r265060 LLVM infers correct __nvvm_reflect attributes, so
    explicit declaration of __nvvm_reflect() is no longer needed.
    
    Differential Revision: http://reviews.llvm.org/D19074
    
    llvm-svn: 267062
--

commit 612917c784dc7b42b3138cae1cc496c877f5d40a
Author: Enrico Granata <egranata@apple.com>
Date:   Wed Apr 20 20:48:05 2016 +0000

    Fix a bug where LLDB would crash if 'apropos <anything>' was used after spawning an inferior process
    
    llvm-svn: 266911

commit 32773333cbda0c2ca8a643b82fca24a13bc70233
Author: Evgeniy Stepanov <eugeni.stepanov@gmail.com>
--

    fix a race is the LLDB test suite results collection
    
    The race boiled down to this:
    
    If a test worker queue is able to run the test inferior and
    clean up before the dosep.py listener socket is spun up, and
    the worker queue is the last one (as would be the case when
    there's only one test rerunning in the rerun queue), then
    the test suite will exit the main loop before having a chance
    to process any test events coming from the test inferior or
    the worker queue job control.
    
    I found this race to be far more likely on fast hardware.
    Our Linux CI is one such example.  While it will show
    up primarily during meta test events generated by
    a worker thread when a test inferior times out or
    exits with an exceptional exit (e.g. seg fault), it only
    requires that the OS takes longer to hook up the
    listener socket than it takes for the final test inferior
    and worker thread to shut down.
    
    See:
    http://reviews.llvm.org/D19214
    
--
Author: Pavel Labath <labath@google.com>
Date:   Thu Apr 7 08:16:10 2016 +0000

    Revert "Reduce code duplication in ProcessGDBRemote"
    
    In turns out this does make a functional change, in case when the inferior hits an int3 that was
    not placed by the debugger. Backing out for now.
    
    llvm-svn: 265647

commit d54bae65258a3c7fdd1e9b680a5dc91dba3d9453
--

    Fix dotest.py '-p' option for multi-process mode
    
    Summary:
    The '-p' option for dotest.py was ignored in multiprocess mode,
    as the -p argument to the inferior would overwrite the -p argument
    passed on the command line.
    
    Reviewers: zturner, tfiala
    
    Subscribers: lldb-commits, sas
--

    Improve the way LLDB escapes arguments before passing them to the shell
    
    Teach LLDB that different shells have different characters they are sensitive to, and use that knowledge to do shell-aware escaping
    
    This helps solve a class of problems on OS X where LLDB would try to launch via sh, and run into problems if the command line being passed to the inferior contained such special markers (hint: the shell would error out and we'd fail to launch)
    This makes those launch scenarios work transparently via shell expansion
    
    Slightly improve the error message when this kind of failure occurs to at least suggest that the user try going through 'process launch' directly
    
    Fixes rdar://problem/22749408
--

commit ae6c9fe06f9e015ddbe17a13e5958727724847fb
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Mon Apr 4 17:15:57 2016 +0000

    Xcode: modify lldb-python-test-suite target to build inferiors with $(LLDB_PYTHON_TESTSUITE_CC)
    
    $(LLDB_PYTHON_TESTSUITE_CC) defaults to the just-built clang.  Together
    with changes to the zorg repo, this enables the Green Dragon LLDB OS X
    Xcode-based builder to run the new TSAN LLDB tests.
    
--

commit 22f24f681517b9b1f101f782357cb4cec06c324b
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Fri Apr 1 10:04:07 2016 +0000

    [Lexer] Let the compiler infer string lengths. No functionality change intended.
    
    llvm-svn: 265126

commit e550bbdf9d7c4e5eb0b23a50203039808c7a2be4
Author: Benjamin Kramer <benny.kra@googlemail.com>
--
Date:   Fri Apr 1 01:09:05 2016 +0000

    [NVPTX] Annotate some instructions as hasSideEffects = 0.
    
    Summary:
    Tablegen tries to infer this from the selection DAG patterns defined for
    the instructions, but it can't always.
    
    An instructive example is CLZr64.  CLZr32 is correctly inferred to have
    no side-effects, but the selection DAG pattern for CLZr64 is slightly
    more complicated, and in particular the ctlz DAG node is not at the root
    of the pattern.  Thus tablegen can't infer that CLZr64 has no
    side-effects.
    
    Reviewers: jholewinski
    
    Subscribers: jholewinski, tra, llvm-commits
--

commit ae272d718e882b18258a587ce111a4150d761b5e
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Thu Mar 31 21:29:57 2016 +0000

    [NVPTX] Infer __nvvm_reflect as nounwind, readnone
    
    This patch simply mirrors the attributes we give to @llvm.nvvm.reflect
    to the __nvvm_reflect libdevice call.  This shaves about 30% of the code
    in libdevice away because of CSE opportunities.  It's also helps us
    figure out that libdevice implementations of transcendental functions
--
Date:   Wed Mar 30 08:43:54 2016 +0000

    Fix flakyness in TestWatchpointMultipleThreads
    
    Summary:
    the inferior in the test deliberately does not lock a mutex when accessing the watched variable.
    The reason for that is unclear as, based on the logs, the original intention of the test was to
    check whether watchpoints get propagated to newly created threads, which should work fine even
    with a mutex. Furthermore, in the unlikely event (which I have still observed happening from time
    to time) that two threads do manage the execute the "critical section" simultaneously, the test
    will fail, as it is expecting the watchpoint "hit count" to be 1, but in this case it will be 2.
--

commit a734ab9808658310b63e5a945f21837076dd14c7
Author: Faisal Vali <faisalv@yahoo.com>
Date:   Sat Mar 26 16:11:37 2016 +0000

    [Cxx1z-constexpr-lambda-P0170R1]  Support parsing of constexpr specifier (and its inference) on lambda expressions
    
    Support the constexpr specifier on lambda expressions - and support its inference from the lambda call operator's body.
    
    i.e.
      auto L = [] () constexpr { return 5; };
      static_assert(L() == 5); // OK
      auto Implicit = [] (auto a) { return a; };
--

commit 1375560bdbad6f1e186965b778cbe1b2966bce7a
Author: Jingyue Wu <jingyue@google.com>
Date:   Sun Mar 20 20:59:20 2016 +0000

    [NVPTX] Adds a new address space inference pass.
    
    Summary:
    The old address space inference pass (NVPTXFavorNonGenericAddrSpaces) is unable
    to convert the address space of a pointer induction variable. This patch adds a
    new pass called NVPTXInferAddressSpaces that overcomes that limitation using a
    fixed-point data-flow analysis (see the file header comments for details).
    
    The new pass is experimental and not enabled by default. Users can turn
    it on by setting the -nvptx-use-infer-addrspace flag of llc.
    
    Reviewers: jholewinski, tra, jlebar
    
    Subscribers: jholewinski, llvm-commits
    
--
    SetPrivateState() is called on an async thread. This async thread will
    block waiting for the thread_list lock held by the main thread in
    CommandObjectIterateOverThreads. The main thread will also block on the
    async thread during DoResume (although with a timeout), leading to a
    deadlock. Due to the timeout, the deadlock is not immediately apparent,
    but the inferior will be left in an invalid state after the bt all completes,
    and objective-c symbols will not be successfully resolved in the backtrace.
    
    Reviewers: andrew.w.kaylor, jingham, clayborg
    
    Subscribers: sas, lldb-commits
--
    Fix EHFrame processing to add implicit references when needed.
    
    The current code for processCIE and processFDE returns out if it sees
    any references.  The problem with this is that some references could be
    explicit in the binary, while others are implicit as they can be
    inferred from the content of the EHFrame itself.
    
    This change walks the references we have against the references we
    need, and verifies that all explicit references are in the correct place,
    and generates any missing implicit ones.
    
--

    [Renderscript] Explicitly set the language to evaluate allocations
    
    Currently it is not specified, and since allocations are usually
    requested once we hit a renderscript breakpoint, the language will be
    inferred being as renderscript by the ExpressionParser.
    Actually allocations attempt to invoke functions part of the RS runtime,
    written in C/C++, so evaluating the calls in RenderScript could be
    misleading.
    
    In particular, in MIPS, the ABI between C/C++ (mips o32) and
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Mar 3 19:44:06 2016 +0000

    [ValueTracking] Remove dead code from an old experiment
    
    This experiment was originally about trying to use facts implied dominating conditions to infer more precise known bits.  While the compile time was found to be acceptable on several large code bases, we never found sufficiently profitable examples to justify turning on the code by default.  Given this, it's time to abandon the experiment.
    
    Several folks have commented that they've found this useful for experimentation, but nothing has come of those experiments.  Given how easy the patch is to apply, there's no reason to leave the code in tree.
    
    For anyone interested in further investigation in this area, I recommend finding the summary email I sent on one of the original review threads.  In particular, I now believe the use-list based approach is strictly worse than the dom-tree-walking approach.
    
--
Date:   Thu Mar 3 18:31:29 2016 +0000

    [SCEV] Prove no-overflow via constant ranges
    
    Exploit ScalarEvolution::getRange's newly acquired smartness (since
    r262438) by using that to infer nsw and nuw when possible.
    
    llvm-svn: 262639

commit 11ef606f1d33a8c368b1d071631eba28ae50a94c
Author: Sanjoy Das <sanjoy@playingwithpointers.com>
--

commit ba04ed4128e9f45cca46d32326ef1c384154e4a3
Author: Sagar Thakur <sagar.thakur@imgtec.com>
Date:   Fri Feb 26 13:30:34 2016 +0000

    [LLDB][MIPS] Fix TestInferiorAssert.py for MIPS
    
    Patch by Nitesh Jain.
    
    Summary: The debug version of libc.so is require for backtracing which may not be available on all platforms.
    
--

commit 74a1fc6f8723873bbbdf9ac62cb8a3a2cff7b8d0
Author: Chaoren Lin <chaorenl@google.com>
Date:   Wed Feb 24 03:15:21 2016 +0000

    Fix TestCStrings for Linux with i386 inferiors.
    
    Summary: Temporarily revert part of r261704.
    
    Reviewers: spyffe
    
--
    Summary:
    On arm64, linux<=4.4 and Android<=M there is a bug, which prevents single-stepping from working when
    the system comes back from suspend, because of incorrectly initialized CPUs. This did not really
    affect Android<M, because it did not use software suspend, but it is a problem for M, which uses
    suspend (doze) quite extensively.  Fortunately, it seems that the first CPU is not affected by
    this bug, so this commit implements a workaround by forcing the inferior to execute on the first
    cpu whenever we are doing single stepping.
    
    While inside, I have moved the implementations of Resume() and SingleStep() to the thread class
    (instead of process).
    
--
Author: Pavel Labath <labath@google.com>
Date:   Fri Feb 19 10:36:31 2016 +0000

    Mark TestLldbGdbServer.test_software_breakpoint_set_and_remove_work_llgs as flaky on linux
    
    The problem is the asynchronous arrival of inferior stdio (pr25652).
    
    llvm-svn: 261313

commit c919f5f96459f5ca9ec3a8e902e3451eeae9648a
Author: David Majnemer <david.majnemer@gmail.com>
--
Author: Pavel Labath <labath@google.com>
Date:   Tue Feb 16 09:58:50 2016 +0000

    Bump up timeout in TestChangeProcessGroup
    
    The test fails very rarely. I suspect this is simply because the inferior does not have enough
    time to create the file under heavy load.
    
    llvm-svn: 260951

commit 35f26f613a37a4e7894a92440d4f2f20539d9b79
Author: Pavel Labath <labath@google.com>
Date:   Tue Feb 16 09:58:47 2016 +0000

    Mark TestLldbGdbServer.test_written_M_content_reads_back_correctly as flaky on linux
    
    I believe the root cause is the asynchronous arrival of inferior stdio (pr25652).
    
    llvm-svn: 260950

commit 986a49b0360109c10ea0c9fa735730ce18d435a6
Author: Benjamin Kramer <benny.kra@googlemail.com>
--
Author: Reid Kleckner <rnk@google.com>
Date:   Thu Feb 11 00:14:04 2016 +0000

    Fix two tests relying on LLVM -O1 behavior
    
    Something changed the inference of nonnull.
    
    llvm-svn: 260472

commit 7a0c65cbcc196c98253517d738867fce78fc0216
Author: Hemant Kulkarni <khemant@codeaurora.org>
--

    [GMR/OperandBundles] Teach getModRefBehavior about operand bundles
    
    In general, memory restrictions on a called function (e.g. readnone)
    cannot be transferred to a CallSite that has operand bundles.  It is
    possible to make this inference smarter, but lets fix the behavior to be
    correct first.
    
    llvm-svn: 260193

commit 4a33ab7b2cc3a396b41ce2c0710ad08213f4792e
--

commit 59b982e1be3af0a1c6dc1564a9df8123404359cc
Author: Richard Smith <richard-llvm@metafoo.co.uk>
Date:   Tue Feb 2 23:58:56 2016 +0000

    PR24989: Stop trying to use the C++11 rules for lambda return type inference in
    C++14 generic lambdas. It conflicts with the C++14 return type deduction
    mechanism, and results in us failing to actually deduce the lambda's return
    type in some cases.
    
    llvm-svn: 259609

commit 0d473d12fef8c7e1f0843bab2a74583b2f5da1f5
Author: Zachary Turner <zturner@google.com>
Date:   Tue Feb 2 23:56:45 2016 +0000

    Fix inverted conditional in TestInferiorAssert.py
    
    llvm-svn: 259608

commit b90168ff419f76ee14464bf72d342656954bf99b
Author: Siva Chandra <sivachandra@google.com>
--
    When promoting allocas to LDS, we know we are indexing
    into a specific area just created, and the calculation
    will also never overflow.
    
    Also emit some of the muls as nsw nuw, because instcombine
    infers this already from the range metadata. I think
    putting this on the other adds and muls might be OK too,
    but I'm not 100% sure.
    
    llvm-svn: 259545

--
Author: Philip Reames <listmail@philipreames.com>
Date:   Mon Feb 1 22:57:53 2016 +0000

    [LVI] Add select handling
    
    Teach LVI to handle select instructions in the exact same way it handles PHI nodes.  This is useful since various parts of the optimizer convert PHI nodes into selects and we don't want these transformations to cause inferior optimization.
    
    Note that this patch does nothing to exploit the implied constraint on the inputs represented by the select condition itself.  That will be a later patch and is blocked on http://reviews.llvm.org/D14476
    
    llvm-svn: 259429

--

commit 7124c11ad9fef5b767aa94e4ac2c2d5e21c6381d
Author: Omair Javaid <omair.javaid@linaro.org>
Date:   Wed Jan 27 13:57:33 2016 +0000

    Decorarte TestInferiorAssert xfails on AArch64 Linux
    
    This patch decorates some of TestInferiorAssert test cases with expectedFailureLinux on AArch64.
    
    llvm-svn: 258930

commit b95861d35e4c24ce828c4b1e1c9b1470bfeb4111
Author: Matthew Simpson <mssimpso@codeaurora.org>
--
    The python test run target started failing recently.
    I tracked it down to what looks like the passing of
    environment variables into the python script.
    
    This locally fixes the vast majority of errors that
    were ultimately inferior test build command failures.
    Not sure what caused that to start happening.
    
    llvm-svn: 258585

commit 6eeb5e70e7dff27151452894b966981b58bcd81e
--
Author: Rafael Espindola <rafael.espindola@gmail.com>
Date:   Fri Jan 22 19:44:46 2016 +0000

    Add ArrayRef support to EndianStream.
    
    Using an array instead of ArrayRef would allow type inference, but
    (short of using C99) one would still need to write
    
        typedef uint16_t VT[];
        LE.write(VT{0x1234, 0x5678});
    
--
Author: Zachary Turner <zturner@google.com>
Date:   Fri Jan 15 22:22:40 2016 +0000

    Fix TestDebugBreak.py.
    
    We can't assume that the main thread of an inferior has index 0,
    even in a single-threaded app.
    
    llvm-svn: 257946

commit 21da1ed15b39620ddc0254743609d760f4c22137
--
    1. The SWIG typemaps for converting Python lists to and from C++
       arrays were not updated for Python 3.  So they were doing things
       like PyString_Check instead of using the PythonString from
       PythonDataObjects.
    2. ProcessLauncherWindows was ignoring the environment completely.
       So any test that involved launching an inferior with any kind
       of environment variable would have failed.
    3. The test itself was using process.GetSTDOUT(), which isn't
       implemented on Windows.  So this was changed to save the
       value of the environment variable in a local variable and
       have the debugger look at the value of the variable.
--
    Original commit message:
    
    Performance improvement: Change lldb so that it puts a breakpoint
    on the first branch instruction after a function return (or the end
    of a source line), instead of a breakpoint on the return address,
    to skip an extra stop & start of the inferior process.
    
    I changed Process::AdvanceAddressToNextBranchInstruction to not
    take an optional InstructionList argument - no callers are providing
    a cached InstructionList today, and if this function was going to
    do that, the right thing to do would be to fill out / use a
--
Date:   Fri Jan 8 11:16:45 2016 +0000

    Another fix for TestBatchMode on linux
    
    On locked down systems (such as our buildbot) one needs to do a special dance to allow attaching
    to processes. This commit adds this code to the TestBatchMode inferior.
    
    llvm-svn: 257165

commit 9e007efad22c495ed1f5a3d6c700c9e3ee8ede89
Author: Silviu Baranga <silviu.baranga@arm.com>
--
Date:   Fri Jan 8 00:06:03 2016 +0000

    Performance improvement: Change lldb so that it puts a breakpoint
    on the first branch instruction after a function return (or the end
    of a source line), instead of a breakpoint on the return address,
    to skip an extra stop & start of the inferior process.
    
    I changed Process::AdvanceAddressToNextBranchInstruction to not
    take an optional InstructionList argument - no callers are providing
    a cached InstructionList today, and if this function was going to
    do that, the right thing to do would be to fill out / use a
--
Date:   Thu Jan 7 23:32:34 2016 +0000

    Better scheme to lookup alternate mangled name when looking up function address.
    
    Summary:
    This change is relevant for inferiors compiled with GCC. GCC does not
    emit complete debug info for std::basic_string<...>, and consequently, Clang
    (the LLDB compiler) does not generate correct mangled names for certain
    functions.
    
    This change removes the hard-coded alternate names in
--
Author: James Molloy <james.molloy@arm.com>
Date:   Thu Jan 7 13:33:28 2016 +0000

    [GlobalsAA] Partially back out r248576
    
    See PR25822 for a more full summary, but we were conflating the concepts of "capture" and "escape". We were proving nocapture and using that proof to infer noescape, which is not true. Escaped-ness is a function-local property - as soon as a value is used in a call argument it escapes. Capturedness is a related but distinct property. It implies a *temporally limited* escape. Consider:
    
      static int a;
      int b;
      int g(int * nocapture arg);
      int f() {
--

commit ae050a570317ac8504bdd31fa73b52100471d753
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Jan 6 04:53:16 2016 +0000

    [BasicAA] Remove special casing of memset_pattern16 in favor of generic attribute inference
    
    Most of the properties of memset_pattern16 can be now covered by the generic attributes and inferred by InferFunctionAttrs.  The only exceptions are:
    - We don't yet have a writeonly attribute for the first argument.
    - We don't have an attribute for modeling the access size facts encoded in MemoryLocation.cpp.
    
    Differential Revision: http://reviews.llvm.org/D15879
    
--

commit 2466719e448d7c010407a758cd7dc1d3ce9c959a
Author: Philip Reames <listmail@philipreames.com>
Date:   Mon Jan 4 22:49:23 2016 +0000

    [MemoryBuiltins] Remove isOperatorNewLike by consolidating non-null inference handling
    
    This patch removes the isOperatorNewLike predicate since it was only being used to establish a non-null return value and we have attributes specifically for that purpose with generic handling. To keep approximate the same behaviour for existing frontends, I added the various operator new like (i.e. instances of operator new) to InferFunctionAttrs. It's not really clear to me why this isn't handled in Clang, but I didn't want to break existing code and any subtle assumptions it might have.
    
    Once this patch is in, I'm going to start separating the isAllocLike family of predicates. These appear to be being used for a mixture of things which should be more clearly separated and documented. Today, they're being used to indicate (at least) aliasing facts, CSE-ability, and default values from an allocation site.
    
    Differential Revision: http://reviews.llvm.org/D15820
    
--
     2) Each state has a "TryParentState", which:
        a) for a catchpad that's not the last handler on its catchswitch, is
           the state of the next catchpad on that catchswitch.
        b) for all other pads, is the state of the pad whose try region is the
           next outer try region enclosing this state's try region.  The "try
           regions are not present as such in the IR, but will be inferred
           based on the placement of invokes and pads which reach each other
           by exceptional exits.
    
    Catchswitches do not get their own states, but each gets mapped to the
    state of its first catchpad.
--

commit 3a040e6d4782f181ab19a73f619df41b70019dd5
Author: Chandler Carruth <chandlerc@gmail.com>
Date:   Sun Dec 27 08:41:34 2015 +0000

    [attrs] Extract the pure inference of function attributes into
    a standalone pass.
    
    There is no call graph or even interesting analysis for this part of
    function attributes -- it is literally inferring attributes based on the
    target library identification. As such, we can do it using a much
    simpler module pass that just walks the declarations. This can also
    happen much earlier in the pass pipeline which has benefits for any
    number of other passes.
    
    In the process, I've cleaned up one particular aspect of the logic which
    was necessary in order to separate the two passes cleanly. It now counts
    inferred attributes independently rather than just counting all the
    inferred attributes as one, and the counts are more clearly explained.
    
    The two test cases we had for this code path are both ... woefully
    inadequate and copies of each other. I've kept the superset test and
    updated it. We need more testing here, but I had to pick somewhere to
    stop fixing everything broken I saw here.
--
    A standard socket.error will just issue an INFO statement and continue.
    Something other than a socket.error will get an ERROR: printed (and
    also continue).
    
    Hopefully this gets us more info and also handles the completely
    to-be-expected scenario that the test inferior might go down at
    any point.
    
    llvm-svn: 255581

commit 5bbc0e1888c655fbfdde1944edfd016170368362
--
      flow, just a bunch of simple operands;  catchpad would be splittable.
    - Introduce catchswitch, a control flow instruction designed to model
      the constraints of funclet oriented EH.
    - Make funclet scoping explicit by having funclet instructions consume
      the token produced by the funclet which contains them.
    - Remove catchendpad and cleanupendpad.  Their presence can be inferred
      implicitly using coloring information.
    
    N.B.  The state numbering code for the CLR has been updated but the
    veracity of it's output cannot be spoken for.  An expert should take a
    look to make sure the results are reasonable.
--

commit 5183147e2d5b18447131299bb700058c9b26081f
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Wed Dec 9 06:45:43 2015 +0000

    wire timeouts and exceptional inferior process exits through the test event system
    
    The results formatter system is now fed timeouts and exceptional process
    exits (i.e. inferior dotest.py process that exited by signal on POSIX
    systems).
    
    If a timeout or exceptional exit happens while a test method is running
    on the worker queue, the timeout or exceptional exit is charged and
    reported against that test method.  Otherwise, if no test method was
--
Date:   Tue Dec 8 00:53:56 2015 +0000

    Refactor ResultsFormatter creation into result_formatter.
    
    This cleans up dotest.py and is a pre-step for getting
    the test inferior runner to send post-inferior run events
    to the events collector, as this code needs to be accessed
    from within dosep.py.
    
    llvm-svn: 254979

--

commit 296e063d8f9bcdaab4a1d17a7f3b3f5160e910f2
Author: Abhishek Aggarwal <abhishek.a.aggarwal@intel.com>
Date:   Wed Dec 2 09:40:17 2015 +0000

    PTRACE ABI to read FXSAVE area for 32-bit inferior
    
    Summary:
     - Problem occurs when:
        -- 32-bit inferiors run on x86_32 machine and
           the architecture doesn't have AVX feature
    
        -- This causes FPRType to be set to eFPRTypeFXSAVE
    
        -- PTRACE_GETFPREGS was being used to read FXSAVE area
    
        -- For 32-bit inferiors running on x86_32 machine,
           PTRACE_GETFPREGS reads FSAVE area and not FXSAVE area
    
     - Changed ptrace API to PTRACE_GETREGSET for 32-bit inferiors
        -- This reads FPR data in FXSAVE format.
        -- For 64-bit inferiors, no change has been made.
    
     - Modified XFAIL for TestReturnValue.py
        -- Earlier, this test was passing for Linux OS
        -- Now, it passes for Android OS as well
    
--

commit 7aac24805bdcb5e2d1c47d09a92e43da89eabcfb
Author: Zachary Turner <zturner@google.com>
Date:   Thu Nov 19 19:10:54 2015 +0000

    Pass -fms-compatibility-version when building test inferiors.
    
    -fms-compatibility-version defaults to VS 2013.  When using
    VS 2015, this will lead to compilation failures of the test
    inferiors in the C++ standard library for language conformance
    reasons.
    
    The fix here is to simply pass -fms-compatibility-version=19.0 when
    we detect that a VS 2015 compiler is present.  Even though we're
    actually using clang to do the compilation, clang uses this same
--
      1. Must never recurse directly or indirectly, else the GV would be clobbered.
      2. Must never rely on the value in GV at the start of the function (apart from the initializer).
    
    GlobalOpt can already do this, but it is hamstrung and only ever tries to demote globals inside "main", because C++ gives extra guarantees about how main is called - once and only once.
    
    In LTO mode, we can often prove the first property (if the function is internal by this point, we know enough about the callgraph to determine if it could possibly recurse). FunctionAttrs now infers the "norecurse" attribute for this reason.
    
    The second property can be proven for a subset of functions by proving that all loads from GV are dominated by a store to GV. This is conservative in the name of compile time - this only requires a DominatorTree which is fairly cheap in the grand scheme of things. We could do more fancy stuff with MemoryDependenceAnalysis too to catch more cases but this appears to catch most of the useful ones in my testing.
    
    llvm-svn: 253168

--
    
       1. For the very first frame, Unwinder doesn't check the validity
          of Full UnwindPlan before creating StackFrame from it:
    
            When 'process launch' command is run after setting a breakpoint
            in inferior, the Unwinder runs and saves only Frame 0 (the frame
            in which breakpoint was set) in thread's StackFrameList i.e.
            m_curr_frames_sp. However, it doesn't check the validity of the
            Full UnwindPlan for this frame by unwinding 2 more frames further.
    
       2. Unwinder doesn't update the CFA value of Cursor when Full UnwindPlan
--
Author: James Molloy <james.molloy@arm.com>
Date:   Thu Nov 12 10:56:51 2015 +0000

    Update clang regression tests for 'norecurse'
    
    FunctionAttrs has just been taught how to infer 'norecurse'. Update clang tests for LLVM r252871.
    
    llvm-svn: 252872

commit 7e9bdd5d010b0378e3479d434bd2a3a359ff226d
Author: James Molloy <james.molloy@arm.com>
--
    easy to also add support for versioning away may-aliasing intervening
    stores that would otherwise prevent this transformation.
    
    This optimization is also performed by Load-PRE in GVN without the
    option of multi-versioning.  As was discussed with Daniel Berlin in
    http://reviews.llvm.org/D9548, this is inferior to a more loop-aware
    solution applied here.  Hopefully, we will be able to remove some
    complexity from GVN/MemorySSA as a consequence.
    
    In the long run, we may want to extend this pass (or create a new one if
    there is little overlap) to also eliminate loop-indepedent redundant
--
Author: Tamas Berghammer <tberghammer@google.com>
Date:   Tue Nov 3 18:03:47 2015 +0000

    Skip TestBacktraceAll on android-arm
    
    The android compiler can't compile the inferior because of an issue
    in the standard library.
    
    llvm-svn: 251951

commit daa51d4a96d879777f3c9a4db3066051e52d554e
--

commit cada2d8d1e613671749db21b137876141a2a326f
Author: Chandler Carruth <chandlerc@gmail.com>
Date:   Sat Oct 31 00:28:37 2015 +0000

    [FunctionAttrs] Inline the prototype attribute inference to an existing
    loop over the SCC.
    
    The separate function wasn't really adding much, NFC.
    
    llvm-svn: 251728
--

commit acd0a5cfba993c03c005aea8bf7230bc071e6f7e
Author: Oleksiy Vyalov <ovyalov@google.com>
Date:   Wed Oct 28 18:36:11 2015 +0000

    Mark TestHelloWorld and TestInferiorAssert.py as XFAIL due llvm.org/pr25338.
    
    llvm-svn: 251542

commit 5268721e59624a7a2b46ed48619eec3f60f488f7
Author: George Rimar <grimar@accesssoftek.com>
--
    stack could not be unwinded from functions
    residing in the vdso object.
    
    This commit adds support for loading such files by
    reading the Aux vectors since a vdso is invisibily
    mapped to the inferiors address space and the
     actual file is not present in the filesystem. The
    presence of the vdso is detected by inspecting
    the Aux vector for AT_SYSINFO_EHDR tag.
    
    Reviewers: lldb-commits, ovyalov, tberghammer
--
      parsing
    * Optimize C++ method basename validation with replacing a regex with
      hand written code
    
    These modifications reduce the time required to parse the symtab from
    large applications by ~25% (tested with LLDB as inferior)
    
    Differential revision: http://reviews.llvm.org/D14088
    
    llvm-svn: 251402

--
    
    Summary:
    Gdb-remote's async thread sent out the eBroadcastBitRunPacketSent message *before* actually
    sending out the continue packet. Since it's this message the actually triggers the public state
    transition, it could happen (and it did happen in TestAttachResume, which does an "process
    interrupt" right after a continue) that we attempt to stop the inferior before it was actually
    started (which obviously did not end well). This fixes the problem by moving the broadcast after
    the packet was actually sent.
    
    Reviewers: clayborg
    
--
Date:   Mon Oct 26 15:00:56 2015 -0700

    Extract non-taken branch frequencies from LBR
    
    Summary:
    Previously, we inferred all non-taken branch frequencies with the
    information we had for taken branches. This patch teaches perf2flo and llvm-flo
    how to read and incorporate non-taken branch frequencies directly from the
    traces available in LBR data and by disassembling the binary. It still leaves
    the inference engine untouched in case we need it to fill out other
    fall-throughs.
    
    (cherry picked from FBD2589212)

commit f33319699dbf6f4a7b2f0e816b01d719706ea0b1
--
Author: James Molloy <james.molloy@arm.com>
Date:   Mon Oct 26 14:10:46 2015 +0000

    [ValueTracking] Extend r251146 to catch a fairly common case
    
    Even though we may not know the value of the shifter operand, it's possible we know the shifter operand is non-zero. This can allow us to infer more known bits - for example:
    
      %1 = load %p !range {1, 5}
      %2 = shl %q, %1
    
    We don't know %1, but we do know that it is nonzero so %2[0] is known zero, and importantly %2 is known non-zero.
--
    exposed by this change
    
    Loading the debug info from a large application is the slowest task
    LLDB do. This CL makes most of the dwarf parsing code multi-threaded.
    
    As a result the speed of "attach; backtrace; exit;" when the inferior
    is an LLDB with full debug info increased by a factor of 2.
    
    Differential revision: http://reviews.llvm.org/D13662
    
    llvm-svn: 251106
--
    
    Instead of bailing out when we see loads, analyze them. If we can prove that the loaded-from address must escape, then we can conclude that a load from that address must escape too and therefore cannot alias a non-addr-taken global.
    
    When checking if a Value can alias a non-addr-taken global, if the Value is a LoadInst of a non-global, recurse instead of bailing.
    
    If we can follow a trail of loads up to some base that is captured, we know by inference that all the loads we followed are also captured.
    
    llvm-svn: 251017

commit 5a4d8cd5190ff52027f93417ed120e6da75fa1cd
Author: James Molloy <james.molloy@arm.com>
--
    `llvm::Function` when operand bundles are present.
    
    Attributes locally present on the `CallInst` or `InvokeInst` will still
    override operand bundle semantics.  The LangRef has been amended to
    reflect this.  Note: this change does not do anything prevent
    `-function-attrs` from inferring `CallSite` local attributes after
    inspecting the called function -- that will be done as a separate
    change.
    
    I've used `-adce` and `-early-cse` to test these changes.  There is
    nothing special about these passes (and they did not require any
--
Author: Igor Laevsky <igmyrj@gmail.com>
Date:   Tue Oct 20 21:33:30 2015 +0000

    [MemorySanitizer] NFC. Do not use GET_INTRINSIC_MODREF_BEHAVIOR table.
    
    It is now possible to infer intrinsic modref behaviour purely from intrinsic attributes.
    This change will allow to completely remove GET_INTRINSIC_MODREF_BEHAVIOR table.
    
    Differential Revision: http://reviews.llvm.org/D13907
    
    llvm-svn: 250860
--
    Make dwarf parsing multi-threaded
    
    Loading the debug info from a large application is the slowest task
    LLDB do. This CL makes most of the dwarf parsing code multi-threaded.
    
    As a result the speed of "attach; backtrace; exit;" when the inferior
    is an LLDB with full debug info increased by a factor of 2 (on my machine).
    
    Differential revision: http://reviews.llvm.org/D13662
    
    llvm-svn: 250821
--

commit 9b58b2e64b89322f4b7d2004b127df3661b68981
Author: Rafael Auler <rafaelauler@fb.com>
Date:   Tue Oct 13 10:25:45 2015 -0700

    Make llvm-flo infer branch count data for fall-through edges
    
    Summary:
    The LBR only has information about taken branches and does not record
    information when a branch is not taken. In our CFG, we call these edges
    "fall-through" edges. This patch teaches llvm-flo how to infer fall-through
    edge frequencies.
    
    (cherry picked from FBD2536633)

commit f79f6302c195039c3e917f43836defcb74953701
--

commit c60963c6c7b4338ce6fa17bf29d1231972afe2cd
Author: Jim Ingham <jingham@apple.com>
Date:   Mon Oct 12 19:11:03 2015 +0000

    Fix a misunderstanding of the ThreadPlan::OkayToDiscard flag in InferiorCallPOSIX.  It was
    set to true, but all plans run by RunThreadPlan need to have this set to false so they will
    return control to RunThreadPlan without consulting plans higher on the stack.
    
    Since this seems like a common error, I also modified RunThreadPlan to enforce this behavior.
    
--
        -- Change resolves Bug 24733:
           Removed XFAIL for Clang as the test works and passes for
           Clang compiler as well
    
        -- Change provides a Generic/Better way of testing Bug 24457
           and Bug 25050 by using 'int3' inline assembly in inferior
    
    Signed-off-by: Abhishek Aggarwal <abhishek.a.aggarwal@intel.com>
    
    Reviewers: ovyalov, jingham, clayborg
    
--

commit d4f2afa23c8b4a26d553c5e5126351f1d7157f93
Author: Douglas Gregor <dgregor@apple.com>
Date:   Fri Oct 9 20:36:17 2015 +0000

    Fix inference of _Nullable for weak Objective-C properties.
    
    The inference of _Nullable for weak Objective-C properties was broken
    in several ways:
    
    * It was back-patching the type information very late in the process
      of checking the attributes for an Objective-C property, which is
      just wrong.
    * It was using ad hoc checks to try to suppress the warning about
      missing nullability specifiers (-Wnullability-completeness), which
      didn't actual work in all cases (rdar://problem/22985457)
    * It was inferring _Nullable even outside of assumes-nonnull regions,
      which is wrong.
    
    Putting the inference of _Nullable for weak Objective-C properties in
    the same place as all of the other inference logic fixes all of these
    ills.
    
    llvm-svn: 249896

commit 6ccc8ca6d9715c76eb89f0d338b2a782f1edd0c4
--

    Run tests with dwo symbol files
    
    dwo symbol files are generated when code compiled with the "-gsplit-dwarf"
    command option (https://gcc.gnu.org/wiki/DebugFission). This CL modifies
    the test system to run tests with inferiors compile with the "-gsplit-dwarf"
    
    Differential revision: http://reviews.llvm.org/D13300
    
    llvm-svn: 249530

--

commit 922b7bf8084098c69c94c49be55cc07ddca12988
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Wed Oct 7 00:42:31 2015 +0000

    AMDGPU: Remove inferRegClassFromUses / inferRegClassFromDefs
    
    I'm not sure why this would be necessary, and no tests fail with
    them removed. Looking at the uses is suspect as well because
    the use reg classes will likely change when the users are moved
    as a result of moving this instruction.
--

commit b285e9e0d2faa84e6404ddc6aa9b54e0c2981c39
Author: Tamas Berghammer <tberghammer@google.com>
Date:   Fri Oct 2 12:00:04 2015 +0000

    Change expected stop reason in TestInferiorAssert for Android API <= 16
    
    llvm-svn: 249120

commit f5ead561b3e41c588235a536db2587557b2fc1c4
Author: Tamas Berghammer <tberghammer@google.com>
--

    [WinEH] Emit __C_specific_handler tables for the new IR
    
    We emit denormalized tables, where every range of invokes in the same
    state gets a complete list of EH action entries. This is significantly
    simpler than trying to infer the correct nested scoping structure from
    the MI. Fortunately, for SEH, the nesting structure is really just a
    size optimization.
    
    With this, some basic __try / __except examples work.
    
--
Author: Pavel Labath <labath@google.com>
Date:   Wed Sep 30 10:59:39 2015 +0000

    Fix TestAttachDenied on linux
    
    This test was timing out because the test inferior was forking a child, which was not terminated
    correctly. The test contained provisions to terminate this child, but these were no longer
    working. The idea was to wake up upon receiving SIGTERM and then kill the child. However, this
    was failing because the test first tried to use SIGHUP, which ended up killing the inferior.
    
    Fix: make sure we catch SIGHUP also.
    llvm-svn: 248889

commit 55a8e80de8dbda1fcd39c8f1cdc6f3638c78fbe2
--
    
    Proposed solution (main logic in lldbtest.py, rest of them are test
    cases fixed up for the new style):
    * Have only 1 test fuction in the test files what will run for all
      debug info separately and this test function should call just
      "self.build(...)" to build an inferior with the right debug info
    * When a class is created by python (the class object, not the class
      instance), we will generate a new test method for each debug info
      format in the test class with the name "<test-function>_<debug-info>"
      and remove the original test method. This way unittest2 see multiple
      test methods (1 for each debug info, pretty much as of now) and will
      handle the test selection and the failure reporting correctly (the
      debug info will be visible from the end of the test name)
    * Add new annotation @no_debug_info_test to disable the generation of
      multiple tests for each debug info format when the test don't have an
      inferior
    
    Differential revision: http://reviews.llvm.org/D13028
    
    llvm-svn: 248883

--

    test runner: switch to pure-Python timeout mechanism
    
    The timeout mechanism has been implemented in python,
    so there is no more dependence on external utilities
    for timing out an inferior dotest.py process.
    
    Platform-specific bits are implemented for POSIX-like
    and Windows platforms.  There is a small class named
    ProcessHelper in process_control.py that needs to be
    overridden for platforms that fall outside of the
--
    pylintrc file (e.g. $HOME/.pylintrc) to support
    always finding the lldb-specific Python library
    directories.
    
    With the pylintrc modification using this script,
    the lldb python tests and test inferstructure can
    be linted on any of potentially multiple lldb source
    trees on the system without further work from
    the developer.
    
    llvm-svn: 248676
--
    Fix race condition during process detach
    
    Summary:
    The following situation occured in TestAttachResume:
    
    The inferior was stoped at a breakpoint and we did a continue, immediately followed by a detach.
    Since there was a trap instruction under the IP, the continue did a step-over-breakpoint before
    resuming the inferior for real. In some cases, the detach command was executed between these two
    events (after the step-over stop, but before continue). Here, public state was running, but
    private state was stopped. This caused a problem because HaltForDestroyOrDetach was checking the
    public state to see whether it needs to stop the process (call Halt()), but Halt() was checking
    the private state and concluded that there is nothing for it to do.
    
--
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Tue Sep 22 22:47:34 2015 +0000

    test runner: remove print from prior commit; fixup listner socket backlog
    
    When doing test event collation from dotest inferiors to the parallel test
    runner, I had a hard-coded small value for the socket backlog. Fix it to
    be 2*num workers so we don't fail socket connections from inferiors.
    
    llvm-svn: 248337

commit 81771737571069d55ddb8a2ed5051945c454831e
Author: Devin Coughlin <dcoughlin@apple.com>
--

commit 1bf2bb713b353ac76616ebb6cfcc8b45a0a3e117
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Tue Sep 22 15:21:50 2015 +0000

    test runner: Unix systems now put inferior dotest in its own process group.
    
    This increases isolation as it relates to signal handling between parent and
    children.
    
    llvm-svn: 248282
--

commit 6165d31a8395efd19d049e24b06ca70c37f71228
Author: Gabor Horvath <xazax.hun@gmail.com>
Date:   Fri Sep 18 16:43:27 2015 +0000

    [Static Analyzer] Use generics related information to infer dynamic types.
    
    Differential Revision: http://reviews.llvm.org/D12916
    
    llvm-svn: 248002

--

commit 8d8033c3b4e0087023ba328a4c772c79796e7421
Author: Zachary Turner <zturner@google.com>
Date:   Thu Sep 17 20:18:50 2015 +0000

    Fix a race condition when terminating inferiors on Windows.
    
    If a breakpoint was hit in the inferior after shutdown had
    started but before it was complete, it would cause an unclean
    terminate of the inferior, leading to various problems the most
    visible of which is that handles to the inferior executable would
    remain locked, and the test suite would fail to run subsequent
    tests because it could not recompile the inferior.
    
    This fixes a major source of flakiness in the test suite.
    
    llvm-svn: 247929

--

commit 6864cbced6756129e9aff63e7c41938de3bd1a29
Author: Gabor Horvath <xazax.hun@gmail.com>
Date:   Tue Sep 15 23:14:01 2015 +0000

    [Static Analyzer] Added an XFAIL test for inlining when the type inference involves generic types.
    
    llvm-svn: 247739

commit 3c1ac0a17afe842f0685b5834dea3d45ee2eb6cc
Author: Michael J. Spencer <bigcheesegs@gmail.com>
--

commit bdc1eafe20e60362a5ee712b0beee0229ac66de5
Author: Igor Laevsky <igmyrj@gmail.com>
Date:   Tue Sep 15 17:51:50 2015 +0000

    [CorrelatedValuePropagation] Infer nonnull attributes
    
    LazuValueInfo can prove that value is nonnull based on the context information.
    Make use of this ability to infer nonnull attributes for the call arguments.
    
    Differential Revision: http://reviews.llvm.org/D12836
    
    llvm-svn: 247707

--

    Removed XFAIL marker from passing tests, rdars 18684124, 15367233
    
    Related to these two test case classes:
    test/driver/batch_mode/TestBatchMode.py
    test/functionalities/inferior-assert/TestInferiorAssert.py
    
    llvm-svn: 247567

commit 703c30904ec355074cf0044a737d39a376cbd310
Author: Ed Maste <emaste@freebsd.org>
--

commit 906d7be922cd148d3b0027ab1c06eb2e56fe7e49
Author: Ed Maste <emaste@freebsd.org>
Date:   Mon Sep 14 14:40:22 2015 +0000

    Remove expectedFailureFreeBSD from passing test_inferior_asserting_disassemble
    
    llvm.org/pr18533
    
    llvm-svn: 247564

--

commit 444d0056157592b565a2ed7d4632e23420a79a92
Author: Chandler Carruth <chandlerc@gmail.com>
Date:   Sun Sep 13 08:03:23 2015 +0000

    [FunctionAttrs] Make the per-function attribute inference a boring
    static function rather than a method. It just needed access to
    TargetLibraryInfo, and this way it can be easily reused between the
    current FunctionAttrs implementation and any port for the new pass
    manager.
    
--

commit 608cb82e46e2462e14bd7f72786f5cd9fd359aa5
Author: Zachary Turner <zturner@google.com>
Date:   Fri Sep 11 20:00:00 2015 +0000

    XFAIL tests that try to call a function in the inferior.
    
    llvm.org/pr21765
    
    llvm-svn: 247456

--

commit 6628713f4f83c41dd910aec817f17370d8b2a6bd
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Sep 9 23:40:12 2015 +0000

    [RewriteStatepointsForGC] Extend base pointer inference to handle insertelement
    
    This change is simply enhancing the existing inference algorithm to handle insertelement instructions by conservatively inserting a new instruction to propagate the vector of associated base pointers. In the process, I'm ripping out the peephole optimizations which mostly helped cover the fact this hadn't been done.
    
    Note that most of the newly inserted nodes will be nearly immediately removed by the post insertion optimization pass introduced in 246718. Arguably, we should be trying harder to avoid the malloc traffic here, but I'd rather get the code correct, then worry about compile time.
    
    Unlike previous extensions of the algorithm to handle more case, I discovered the existing code was causing miscompiles in some cases. In particular, we had an implicit assumption that the peephole covered *all* insert element instructions, so if we had a value directly based on a insert element the peephole didn't cover, we proceeded as if it were a base anyways. Not good. I believe we had the same issue with shufflevector which is why I adjusted the predicate for them as well.
    
--

commit 15d5563cea9de5dbdca0bded0bceb2b56797591c
Author: Philip Reames <listmail@philipreames.com>
Date:   Wed Sep 9 23:26:08 2015 +0000

    [RewriteStatepointsForGC] Make base pointer inference deterministic
    
    Previously, the base pointer algorithm wasn't deterministic. The core fixed point was (of course), but we were inserting new nodes and optimizing them in an order which was unspecified and variable. We'd somewhat hacked around this for testing by sorting by value name, but that doesn't solve the general determinism problem.
    
    Instead, we can use the order of traversal over the def/use graph to give us a single consistent ordering. Today, this is a DFS order, but the exact order doesn't mater provided it's deterministic for a given input.
    
    (Q: It is safe to rely on a deterministic order of operands right?)
    
    Note that this only fixes the determinism within a single inference step. The inference step is currently invoked many times in a non-deterministic order. That's a future change in the sequence. :)
    
    Differential Revision: http://reviews.llvm.org/D12640
    
    llvm-svn: 247208

--

commit 139a096dce616a613a4d7184f06ed6250c3eeaac
Author: Abhishek Aggarwal <abhishek.a.aggarwal@intel.com>
Date:   Tue Sep 8 10:19:37 2015 +0000

    Bug 24733: TestRegisters.py for Clang inferiors
    
    Summary:
      - Bug 24457 can now be tested for inferiors compiled
        by clang compiler also.
    
      - A generic test case for GCC and Clang inferiors:
        -- Works even when Clang and GCC produce different
           assembly for the same inferior.
    
      - Refer Differential Revision: http://reviews.llvm.org/D12677
    
    Signed-off-by: Abhishek Aggarwal <abhishek.a.aggarwal@intel.com>
    llvm-svn: 247000
--
    
    Summary:
      - For 'register read --all' command on x86_64-Linux Platform:
    
          -- Provide correct values of X87 FPU Special Purpose Registers
          -- Both 32-bit & 64-bit inferiors give correct values on this
             Platform
    
      - Added a Test Vector:
          -- To verify the expected behaviour of the command
    
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Sep 3 21:34:30 2015 +0000

    [RewriteStatepointsForGC] Strengthen invariants around BDVs
    
    As a first step towards a new implementation of the base pointer inference algorithm, introduce an abstraction for BDVs, strengthen the assertions around them, and rewrite the BDV relation code in terms of the abstraction which includes an explicit notion of whether the BDV is also a base. The later is motivated by the fact we had a bug where insertelement was always assumed to be a base pointer even though the BDV code knew it wasn't. The strengthened assertions in this patch would have caught that bug.
    
    The next step will be to separate the DefiningValueMap into a BDV use list cache (entirely within findBasePointers) and a base pointer cache. Having the former will allow me to use a deterministic visit order when visiting BDVs in the inference algorithm and remove a bunch of ordering related hacks. Before actually doing the last step, I'm likely going to extend the lattice with a 'BaseN' (seen only base inputs) state so that I can kill the post process optimization step.
    
    Phabricator Revision: http://reviews.llvm.org/D12608
    
    llvm-svn: 246809

--
Author: Philip Reames <listmail@philipreames.com>
Date:   Thu Sep 3 20:24:29 2015 +0000

    [RewriteStatepointsForGC] Workaround a lack of determinism in visit order
    
    The visit order being used in the base pointer inference algorithm is currently non-deterministic.  When working on http://reviews.llvm.org/D12583, I discovered that we were relying on a peephole optimization to get deterministic ordering in one of the test cases.
    
    This change is intented to let me test and land http://reviews.llvm.org/D12583.  The current code will not be long lived.  I'm starting to investigate a rewrite of the algorithm which will combine the post-process step into the initial algorithm and make the visit order determistic.  Before doing that, I wanted to make sure the existing code was complete and the test were stable.  Hopefully, patches should be up for review for the new algorithm this week or early next.
    
    llvm-svn: 246801

--

commit 5055685cda022119052d86cb468cf2b7f4d19a13
Author: Pavel Labath <labath@google.com>
Date:   Thu Sep 3 09:36:22 2015 +0000

    Fix deadlock while attaching to inferiors
    
    Summary:
    There was a race condition in the AsyncThread, where we would end up sending a vAttach
    notification to the thread before it got a chance set up its listener (this can be reproduced by
    adding a sleep() at the very beginning of ProcessGDBRemote::AsyncThread()). This event would then
--
Date:   Wed Sep 2 17:59:19 2015 +0000

    When redirecting stdio, use FILE_SHARE_DELETE.
    
    Some tests were failing because the test would try to delete the
    file before inferior had exited, but on Windows this will fail by
    default unless you specify FILE_SHARE_DELETE when opening the file.
    
    Can't think of a good reason not to do this, so here it is.
    
    llvm-svn: 246682
--
Date:   Wed Sep 2 09:12:28 2015 +0000

    Address flakyness in TestAttachResume
    
    Summary:
    The test (among other things) attempts to verify that detaching works while the inferior is
    running. However, this was racy since the inferior could end up stopping again before we got a
    chance to detach from it (the test could be made to fail reliably by inserting a sleep just after
    the last "continue" command). The reason for the stop was that we had a breakpoint set in a place
    that can be hit by multiple threads, and we stop because another thread hit a breakpoint.
    
    I fix this by moving the breakpoint to a place that is reachable from only one thread. I also
--

commit 7a9495bcd59402b888207cae6bdb927643cc81a5
Author: Pavel Labath <labath@google.com>
Date:   Tue Sep 1 15:00:51 2015 +0000

    [NativeProcessLinux] Fix detach of multithreaded inferiors
    
    When detaching, we need to detach from all threads of the inferior and not just the main one.
    Without this, a multi-threaded inferior would usually crash once the server exits.
    
    llvm-svn: 246549

commit 6924dcdf6f7370756098598020a0a53f5f248a3f
Author: Aaron Ballman <aaron@aaronballman.com>
--
Author: Pavel Labath <labath@google.com>
Date:   Tue Sep 1 10:59:36 2015 +0000

    [NativeProcessLinux] Fix assertion failure when killing a process
    
    Linux sometimes sends us a PTRACE_EVENT_EXIT when an inferior process gets a SIGKILL. This can be
    confusing, since normally we don't expect any events when the inferior is stopped. This commit
    adds code to handle this situation (resume the thread and let it exit normally) and avoid an
    assertion failure in ResumeThread().
    
    llvm-svn: 246539

--

commit a88caeab6c20db6325b5fa4d80cc79830e7a278f
Author: Philip Reames <listmail@philipreames.com>
Date:   Mon Aug 31 19:44:38 2015 +0000

    [FunctionAttr] Infer nonnull attributes on returns
    
    Teach FunctionAttr to infer the nonnull attribute on return values of functions which never return a potentially null value. This is done both via a conservative local analysis for the function itself and a optimistic per-SCC analysis. If no function in the SCC returns anything which could be null (other than values from other functions in the SCC), we can conclude no function returned a null pointer. Even if some function within the SCC returns a null pointer, we may be able to locally conclude that some don't.
    
    Differential Revision: http://reviews.llvm.org/D9688
    
    llvm-svn: 246476

--

    In SendContinuePacketAndWaitForResponse there is a special bit of
    code that looks for a second stop-reply packet in response to an
    interrupt (control-c).  This is to handle the case where where a
    stop packet is making its way up to lldb right as lldb decides to
    interrupt the inferior.  If the inferior is running and we interrupt
    it, we'd expect a T11 type response meaning that the inferior halted
    because of the interrupt.  But if the interrupt gets a T05 type
    response instead, meaning that we stopped execution by hitting a
    breakpoint or whatever, then the interrupt was received while the
    inferior was already paused and so it is treated as a "?" packet
    -- the remote stub will send the stop message a second time.
    
    There's a timeout where we wait to get this second stop reply packet
    in SendContinuePacketAndWaitForResponse, currently 1ms.  For a slow
    remote target, it may take longer than that to send the second stop
--
    Implement basic DidAttach and DidLaunch for DynamicLoaderWindowsDYLD.
    
    Summary:
    This commit implements basic DidAttach and DidLaunch for the windows
    DynamicLoader plugin which allow us to load shared libraries from the
    inferior.
    
    At the moment, I'm unsure how we're going to gather the load address of
    the main module over gdb protocol so I always use an offset of 0, which
    works well for processes we create ourselves (no randomization). I will
    address this point later on.
--
Author: James Y Knight <jyknight@google.com>
Date:   Fri Aug 21 18:19:06 2015 +0000

    Properly provide alignment of 'byval' arguments down to llvm.
    
    This is important in the case that the LLVM-inferred llvm-struct
    alignment is not the same as the clang-known C-struct alignment.
    
    Differential Revision: http://reviews.llvm.org/D12243
    
    llvm-svn: 245719
--

    [NativeProcessLinux] Fix a bug in instruction-stepping over thread creation
    
    Summary:
    There was a bug in NativeProcessLinux, where doing an instruction-level single-step over the
    thread-creation syscall resulted in loss of control over the inferior. This happened because
    after the inferior entered the thread-creation maintenance stop, we unconditionally performed a
    PTRACE_CONT, even though the original intention was to do a PTRACE_SINGLESTEP. This is fixed by
    storing the original state of the thread before the stop (stepping or running) and then
    performing the appropriate action when resuming.
    
    I also get rid of the callback in the ThreadContext structure, which stored the lambda used to
--

commit 78856474fbd3025f3ff4727c575f8794d2aa1515
Author: Pavel Labath <labath@google.com>
Date:   Wed Aug 19 13:47:57 2015 +0000

    On Linux, clear the signal mask of the launched inferior
    
    Summary:
    Due to fork()/execve(), the launched inferior inherits the signal mask of its parent (lldb-server). But because lldb-server modifies its signal mask (It blocks SIGCHLD, for example), the inferior starts with some signals being initially blocked.
    
    One consequence is that TestCallThatRestarts.ExprCommandThatRestartsTestCase (test/expression_command/call-restarts) fails because sigchld_handler() in lotta-signals.c is not called, due to the SIGCHLD signal being blocked.
    
    To prevent the signal masking done by lldb-server from affecting the created inferior, the signal mask of the inferior is now cleared before the execve().
    
    Patch by: Yacine Belkadi
    
    Reviewers: ovyalov, labath
    
--

commit d2c4c9b132e1f819f2207a607fda794a7d2e6595
Author: Pavel Labath <labath@google.com>
Date:   Tue Aug 18 08:23:35 2015 +0000

    [LLGS] Avoid misrepresenting log lines as inferior output
    
    Summary:
    in case we are logging to stdout, any log lines from the forked child can be misconstrued to be
    inferior output. To avoid this, we disable all logging immediately after forking.
    
    I also fix the implementatoion of DisableAllLogChannels, which was a no-op before this commit.
    
    Reviewers: clayborg, ovyalov
    
--
    
    This commit serializes the UsedPhysRegMask register mask from the machine
    register information class. The mask is serialized as an inverted
    'calleeSavedRegisters' mask to keep the output minimal.
    
    This commit also allows the MIR parser to infer this mask from the register
    mask operands if the machine function doesn't specify it.
    
    Reviewers: Duncan P. N. Exon Smith
    llvm-svn: 244548

--
Date:   Sat Aug 8 17:58:47 2015 +0000

    [Static Analyzer] Add --analyzer-target option to scan-build.
    
    When interposing on a compiler doing cross-compilation, scan-build
    does not infer the target triple needed to pass to clang for
    doing static analysis.  The --analyzer-target option allows one
    to manually specify the target triple used during static analysis
    (and only static analysis) for such cases.
    
    Patch by Honggyu Kim!
--

    [NVPTX] Use LDG for pointer induction variables.
    
    More specifically, make NVPTXISelDAGToDAG able to emit cached loads (LDG) for pointer induction variables.
    
    Also fix latent bug where LDG was not restricted to kernel functions. I believe that this could not be triggered so far since we do not currently infer that a pointer is global outside a kernel function, and only loads of global pointers are considered for cached loads.
    
    llvm-svn: 244166

commit 4cc10d432a0b38e4ec5292b39925f95ebcde2801
Author: Kostya Serebryany <kcc@google.com>
--

    Force the MachO generated for Darwin to have VERSION_MIN load command
    
    On Darwin, it is required to stamp the object file with VERSION_MIN load
    command. This commit will provide a VERSRION_MIN load command to the
    MachO file that doesn't specify the version itself by inferring from
    Target Triple.
    
    llvm-svn: 244059

commit 2556a1efec43c86927ecf977a9d00fd7442cfdc1
--

commit 845f40ada6707d2571e6410a7e1989c8c7073f5e
Author: Chaoren Lin <chaorenl@google.com>
Date:   Mon Aug 3 23:59:41 2015 +0000

    XFAIL TestInferiorAssert for Android API <= 16.
    
    llvm-svn: 243922

commit 53e30aec46b627210986fb0167dec354bd965aac
Author: Adam Nemet <anemet@apple.com>
--

commit c4ffd48aba663ea3dfd5bf60fab9affcf5b081be
Author: Douglas Katzman <dougk@google.com>
Date:   Tue Jul 28 16:52:42 2015 +0000

    Let cmake infer source file language by the file extension.
    
    This applies default compiler flags to .S files, in particular removing
    the "-pedantic" option, which is desirable because there is nothing to
    reasonably warn about; and the only thing that gcc warns about is that
    you allegedly can't correctly invoke GLUE2 in lib/builtins/assembly.h
--
    [CMake] Workaround for PR24222: don't fail if we can't target COMPILER_RT_TEST_TARGET_TRIPLE unless it was explicitly set.
    
    Summary:
    Although we assume that we can always target host triple, relax
    this check to avoid failing at configure-time for cases when we are
    not able to correctly infer/verify host triple for some reasons.
    
    See http://llvm.org/bugs/show_bug.cgi?id=24222 for more details.
    
    Reviewers: hans
    
--

commit 9070f53079b72b0a64a8ad0a2623f97b93cda620
Author: Chaoren Lin <chaorenl@google.com>
Date:   Fri Jul 17 22:13:29 2015 +0000

    Detect if necessary to build inferior with -pie for Android.
    
    Summary:
    - Add target_is_android check (with cached results).
    - Make android_device_api also cache results.
    - Also removes the need to pass --env OS=Android when testing against Android.
--

commit b063f5c7e173a02d7eaa39387ed8f06c2026a70b
Author: Samuel Benzaquen <sbenza@google.com>
Date:   Fri Jul 17 16:05:27 2015 +0000

    [ASTMatchers] Use provided target NodeKind instead of inferring it from the matchers.
    
    Individual matchers might not be convertible to each other's kind, but
    they might still all be convertible to the target kind.
    All the callers already know the target kind, so just pass it down.
    
--

    Add jThreadsInfo support to lldb-server
    
    Summary:
    This commit adds initial support for the jThreadsInfo packet to lldb-server. The current
    implementation does not expedite inferior memory.  I have also added a description of the new
    packet to our protocol documentation (mostly taken from Greg's earlier commit message).
    
    Reviewers: clayborg, ovyalov, tberghammer
    
    Subscribers: lldb-commits
--
    [PPC64LE] Fix vec_sld semantics for little endian
    
    The vec_sld interface provides access to the vsldoi instruction.
    Unlike most of the vec_* interfaces, we do not attempt to change the
    generated code for vec_sld based on the endian mode.  It is too
    difficult to correctly infer the desired semantics because of
    different element types, and the corrected instruction sequence is
    expensive, involving loading a permute control vector and performing a
    generalized permute.
    
    For GCC, this was implemented as "Don't touch the vec_sld"
--
    [PPC64LE] Fix vec_sld semantics for little endian
    
    The vec_sld interface provides access to the vsldoi instruction.
    Unlike most of the vec_* interfaces, we do not attempt to change the
    generated code for vec_sld based on the endian mode.  It is too
    difficult to correctly infer the desired semantics because of
    different element types, and the corrected instruction sequence is
    expensive, involving loading a permute control vector and performing a
    generalized permute.
    
    For GCC, this was implemented as "Don't touch the vec_sld"
--

commit a50387f1b3a226d5e0b587d5eec876eafc220914
Author: Rui Ueyama <ruiu@google.com>
Date:   Tue Jul 14 02:58:13 2015 +0000

    COFF: Fix entry name inference for x86.
    
    Entry name selection rule is already complicated on x64, but it's more
    complicated on x86 because of the underscore name mangling scheme.
    
    If one of _main, _main@<number> (a C function) or ?main@@... (a C++ function)
--
    about three threads and the synchronisation between them is a major source of latency when
    debugging linux and android applications.
    
    In order to be able to go single threaded, we must have the ability to listen for events from
    multiple sources (primarily, client commands coming over the network and debug events from the
    inferior) and perform necessary actions. For this reason I introduce the concept of a MainLoop.
    A main loop has the ability to register callback's which will be invoked upon receipt of certain
    events. MainLoopPosix has the ability to listen for file descriptors and signals.
    
    For the moment, I have merely made the GDBRemoteCommunicationServerLLGS class use MainLoop
    instead of waiting on the network socket directly, but the other threads still remain. In the
--

commit ea533cde30df7b9941b27606168e0664344f580d
Author: Rui Ueyama <ruiu@google.com>
Date:   Thu Jul 9 19:54:13 2015 +0000

    COFF: Infer machine type earlier than before.
    
    Previously, we infer machine type at the very end of linking after
    all symbols are resolved. That's actually too late because machine
    type affects how we mangle symbols (whether or not we need to
    add "_").
    
    For example, /entry:foo adds "_foo" to the symbol table if x86 but
    "foo" if x64.
    
    This patch moves the code to infer machine type, so that machine
    type is inferred based on input files given via the command line
    (but not based on .directives files).
    
    llvm-svn: 241843

commit 594e676cbe475dc879980e919731c3614aa083eb
--
Author: Rui Ueyama <ruiu@google.com>
Date:   Wed Jul 8 20:35:29 2015 +0000

    COFF: Remove dead code.
    
    r241647 made Driver to infer machine type, so this code is not actually in use.
    
    llvm-svn: 241720

commit 1c79ce9a4cc0aad8e95d018db56b380f7920886c
Author: Rui Ueyama <ruiu@google.com>
--

commit 7a544f7327a4b158913a1bbe40b039f6bb7d8d86
Author: Peter Collingbourne <peter@pcc.me.uk>
Date:   Wed Jul 8 19:00:46 2015 +0000

    LibDriver: Fix output path inference.
    
    The inferred output file name is based on the first input file, not the
    first one with extension .obj. The output file was also being written to
    the wrong directory; it needs to be written to whichever directory on the
    libpath it was found in. This change fixes both issues.
    
    llvm-svn: 241710
--

commit 7fa93c77303e408aa3fad7a9e3cc43849ce021ce
Author: Douglas Gregor <dgregor@apple.com>
Date:   Tue Jul 7 06:20:31 2015 +0000

    [libclang] When inferring nonnull use the contextual keyword for the code-completion results,
    when appropriate.
    
    rdar://20742295
    
    llvm-svn: 241560
--
    We use findModuleForHeader() in several places, but in header search we
    were not calling it when a framework module didn't show up with the
    expected name, which would then lead to unexpected non-modular includes.
    Now we will find the module unconditionally for frameworks.  For regular
    frameworks, we use the spelling of the module name from the module map
    file, and for inferred ones we use the canonical directory name.
    
    In the future we might want to lock down framework modules sufficiently
    that these name mismatches cannot happen.
    
    rdar://problem/20465870
--

commit 85225b0a367a488df4920caf3d11c6b04754891b
Author: Rui Ueyama <ruiu@google.com>
Date:   Thu Jul 2 03:15:15 2015 +0000

    COFF: Infer entry point as early as possible, but not too early.
    
    On Windows, we have four different main functions, {w,}{main,WinMain}.
    The linker has to choose a corresponding entry point function among
    {w,}{main,WinMain}CRTStartup. These entry point functions are defined
    in the standard library. The linker resolves one of them by looking at
--
    
    Object files containing entry point functions conflicts each other.
    For example, we cannot resolve both mainCRTStartup and WinMainCRTStartup
    because other symbols defined in the files conflict.
    
    Previously, we inferred CRT function name at the very end of name
    resolution. I found that that is sometimes too late. If the linker
    already linked one of these four archive member objects, it's too late
    to change the decision.
    
    The right thing to do here is to infer entry point name after adding
    all symbols from command line files and before adding any other files
    (which are specified by directive sections). This patch does that.
    
    llvm-svn: 241236

--
    
    Summary:
    Current default is 10 minutes, which causes the test suite to run very long in
    case of test timeouts. On local linux, each test completes in under 90 seconds in the
    slowest configuration (debug build of lldb, using debug clang to build
    inferiors). I am changing the default to 4m on local targets, while retaining
    the 10m timeout for remote ones.
    
    Reviewers: sivachandra, vharron
    
    Subscribers: tberghammer, lldb-commits
--

    COFF: Fix logic to find default entry name or subsystem.
    
    The previous logic to find default entry name or subsystem does not
    seem correct (i.e. was not compatible with MSVC linker). Previously,
    default entry name was inferred from CRT functions and user-defined
    entry functions. Subsystem was inferred from CRT functions.
    
    Default entry name and subsystem are now inferred based on the
    following table. Note that we no longer use CRT functions to infer
    them.
    
                   Entry name           Subsystem
      main         mainCRTStartup       console
      wmain        wmainCRTStartup      console
--

commit 57d7232f401d664792d8fb44cf6e49d7d601c38d
Author: Pavel Labath <labath@google.com>
Date:   Thu Jun 25 12:57:35 2015 +0000

    Enable TestInferiorCrashing and TestRecursiveInferior on android
    
    Summary:
    the original bug was fixed (a rogue breakpoint messing up inferior data structures) and the tests
    seems to pass now. Since android has a default SEGV handler, I have had to alter the test
    expectation in this case.
    
    Test Plan: Tests pass on android arm.
    
--

    Check for consistent use of nullability type specifiers in a header.
    
    Adds a new warning (under -Wnullability-completeness) that complains
    about pointer, block pointer, or member pointer declarations that have
    not been annotated with nullability information (directly or inferred)
    within a header that contains some nullability annotations. This is
    intended to be used to help maintain the completeness of nullability
    information within a header that has already been audited.
    
    Note that, for performance reasons, this warning will underrepresent
--
    
    Introduce the clang pragmas "assume_nonnull begin" and "assume_nonnull
    end" in which we make default assumptions about the nullability of many
    unannotated pointers:
    
      - Single-level pointers are inferred to __nonnull
      - NSError** in a (function or method) parameter list is inferred to
        NSError * __nullable * __nullable.
      - CFErrorRef * in a (function or method) parameter list is inferred
        to CFErrorRef __nullable * __nullable.
      - Other multi-level pointers are never inferred to anything.
    
    Implements rdar://problem/19191042.
    
    llvm-svn: 240156

--

commit 8cf78d1c6488ccaec7e2d9f8539a4bf0a6a300eb
Author: Siva Chandra <sivachandra@google.com>
Date:   Thu Jun 18 20:33:56 2015 +0000

    [TestLoadUnload] Build the main inferior exe with -pie.
    
    Test Plan: dotest.py -p TestLoadUnload on Android API >= 21
    
    Reviewers: tberghammer
    
--

commit ae36985af77996494d7f3efa6c01359f86921945
Author: Rui Ueyama <ruiu@google.com>
Date:   Thu Jun 18 00:40:33 2015 +0000

    COFF: Fix entry point inference bug.
    
    Previously, LLD couldn't find a default entry point if it's
    defined by a library.
    
    llvm-svn: 239982
--

commit 2f4749309c1c456a5ff39d09c503f450e558ca3d
Author: Pavel Labath <labath@google.com>
Date:   Wed Jun 17 23:28:55 2015 +0000

    Add a test for expression evaluation while inferior is blocked in a syscall
    
    Summary: The test is XFAILed for Linux x86_64 and i386 because of bug #23659.
    
    Test Plan: NFC
    
--
Date:   Fri Jun 12 19:21:35 2015 +0000

    Driver: only set -mlinker-version based on host if it's valid
    
    We were adding an extra "-mlinker-version" argument to the invocation
    based on a value inferred from "ld -v". This is set by the build
    systems to either a sane value or an empty string (e.g. for custom
    built ld), which we don't want to pass on.
    
    No test really possible because the value depends on both host system
    and how CMake was invoked.
--

commit e6eea5d055d06db7aefdfa879ae052a2d34ab464
Author: Chaoren Lin <chaorenl@google.com>
Date:   Mon Jun 8 22:13:28 2015 +0000

    Skip TestInferiorChanged if host platform is windows.
    
    Summary: Opened files on Windows cannot be modified, so this test doesn't make sense.
    
    Reviewers: ovyalov, zturner, flackr, clayborg
    
--

    [TestGdbRemoteRegisterState] Do not flip ARM *psr register in the test
    
    Summary:
    Not all of that register is readable/writable in user mode. This means
    that even if the inferior is stopped, parts of the register could be
    changing. So, do not flip this register to check if its value can be
    restored.
    
    Reviewers: tberghammer, chaoren
    
--

commit 3ee0fe4c2ccb2a2c60d1018d635d3f7fc60868a0
Author: Rui Ueyama <ruiu@google.com>
Date:   Sun May 31 03:55:46 2015 +0000

    COFF: Implement subsystem inference.
    
    llvm-svn: 238668

commit 5cff68599d6140194bf8efdd68896d2c35b4062f
Author: Rui Ueyama <ruiu@google.com>
Date:   Sun May 31 03:34:08 2015 +0000

    COFF: Infer entry symbol name if /entry is not given.
    
    `main` is not the only main function in Windows. You can choose one
    from these four -- {w,}{WinMain,main}. There are four different entry
    point functions for them, {w,}{WinMain,main}CRTStartup, respectively.
    The linker needs to choose the right one depending on which `main`
--

commit e1adc7bc3a00614aab14fbaec0361375a73d7100
Author: Adrian McCarthy <amccarth@google.com>
Date:   Fri May 29 23:01:25 2015 +0000

    Fix inferior's i/o connections to its console window on Windows 7.
    
    llvm-svn: 238629

commit 2d0913cd8d0d697bd7095e5796f14f7882a266fd
Author: NAKAMURA Takumi <geek4civic@gmail.com>
--

commit c4e25c96483643748e6fcf669a776603697365ef
Author: Pavel Labath <labath@google.com>
Date:   Fri May 29 10:13:03 2015 +0000

    Report inferior SIGSEGV as a signal instead of an exception on linux
    
    Summary:
    Previously, we reported inferior receiving SIGSEGV (or SIGILL, SIGFPE, SIGBUS) as an "exception"
    to LLDB, presumably to match OSX behaviour. Beside the fact that we were basically lying to the
    user, this was also causing problems with inferiors which handle SIGSEGV by themselves, since
    LLDB was unable to reinject this signal back into the inferior.
    
    This commit changes LLGS to report SIGSEGV as a signal. This has necessitated some changes in the
    test-suite, which had previously used eStopReasonException to locate threads that crashed. Now it
    uses platform-specific logic, which in the case of linux searches for eStopReasonSignaled with
    signal=SIGSEGV.
--

commit 05a1f2ac4c65d83783e084b0942ddbe94347d2d4
Author: Pavel Labath <labath@google.com>
Date:   Thu May 28 08:59:21 2015 +0000

    [NativeProcessLinux] Support inferiors which change their process group
    
    Summary:
    Previously, we wait()ed for events from the inferiors process group. This is resulted in a
    failure if the inferior changed its process group in the middle of execution. To avoid this, I
    pass -1 to the wait() call. The flag __WNOTHREAD makes sure we don't actually wait for events
    from any process, but only the processes(threads) which are our children (or traced by us). Since
    this happens on the monitor thread, which is dedicated to monitoring a single inferior, we will
    be getting events only from this inferior.
    
    Test Plan: All tests pass on linux. I have added a test to check the new functionality.
    
    Reviewers: chaoren, ovyalov
    
--
Author: Philip Reames <listmail@philipreames.com>
Date:   Fri May 22 23:53:24 2015 +0000

    Extend EarlyCSE to handle basic cases from JumpThreading and CVP
    
    This patch extends EarlyCSE to take advantage of the information that a controlling branch gives us about the value of a Value within this and dominated basic blocks. If the current block has a single predecessor with a controlling branch, we can infer what the branch condition must have been to execute this block. The actual change to support this is downright simple because EarlyCSE's existing scoped hash table logic deals with most of the complexity around merging.
    
    The patch actually implements two optimizations.
    1) The first is analogous to JumpThreading in that it enables EarlyCSE's CSE handling to fold branches which are exactly redundant due to a previous branch to branches on constants. (It doesn't actually replace the branch or change the CFG.) This is pretty clearly a win since it enables substantial CFG simplification before we start trying to inline.
    2) The second is analogous to CVP in that it exploits the knowledge gained to replace dominated *uses* of the original value. EarlyCSE does not otherwise reason about specific uses, so this is the more arguable one. It does enable further simplication and constant folding within the rest of the visit by EarlyCSE.
    
--
Date:   Fri May 22 19:34:17 2015 +0000

    Implement PlatformWindows::GetEnvironment.
    
    This fixes a couple of tests that rely on being able to get the
    host's environment or spawn an inferior with specific arguments.
    
    llvm-svn: 238042

commit 4f2a9726d4d1ed9f513926dc340b722978674e7b
Author: Zachary Turner <zturner@google.com>
--

commit e8208ce06542e4cf05c1a6a4a53bb9d2f625fb55
Author: Siva Chandra <sivachandra@google.com>
Date:   Fri May 22 00:52:41 2015 +0000

    [TestLldbGdbServer] Up sleep duration to 1min in the inferior thread_func.
    
    Summary:
    The current sleep duration is not sufficient for Android.
    
    [[ Its a completely different investigation as to why Android needs longer
--

commit 3c1c5b9d88e3a529a09435618d8ac6c599ad3041
Author: Zachary Turner <zturner@google.com>
Date:   Thu May 21 19:56:26 2015 +0000

    Fix race condition when detaching/killing an inferior.
    
    llvm-svn: 237945

commit 883dec058fe9037ae779ae608b027ee33e852b7b
Author: Rafael Espindola <rafael.espindola@gmail.com>
--

    Fixed intermittent failures in TestGdbRemote*/TestLldbGdbServer
    
    test/tools/lldb-server/commandline/Test* were actually executing in
    their parent directory. This looks fine at first because they aren't
    compiling an inferior executable.
    
    Unfortunately, they still call "make clean" during their cleanup,
    which is likely causing all kinds of havok in tests running in the
    parent directory
    
--
Date:   Thu May 21 08:32:18 2015 +0000

    [NativeProcessLinux] Fix handling of SIGSTOP
    
    Summary:
    Previously, NPL tried to reinject SIGSTOP into the inferior in an attempt to get the process to
    start in the group-stop state. This was:
    a) wrong (reinjection should be controlled by "process handle" lldb setting)
    b) racy (it should use Resume for transparent resuming instead of RequestResume)
    c) broken (llgs crashed on inferior SIGSTOP)
    
    With this change, SIGSTOP is handled just like any other signal delivered to the inferior: we
    stop all threads and report signal reception to lldb. SIGSTOP reinjection does not behave the
    same way as it would outside the debugger, but simulating this is a hard problem and is not
    normally necessary.
    
    Test Plan: I have added a test which verifies we get SIGSTOP reports and we do not crash.
--

    [TestAttachDenied] Use a file instead of a pipe for synchronization.
    
    Summary:
    One cannot use mknod or mkfifo on user Android devices. This commit
    changes the use of pipe to a file to synchronize between the inferior
    and the test.
    
    Test Plan: dotest.py -P TestAttachDenied
    
    Reviewers: ovyalov, chaoren
--

commit 96ad3de54bae1148b0c0e490b3e61515baf215d6
Author: Robert Flack <flackr@gmail.com>
Date:   Sat May 9 15:53:31 2015 +0000

    Convert mmap options for target in InferiorCallMmap.
    
    Converts the MAP_PRIVATE and MAP_ANON options to the target platform constants
    (on which the call runs) rather than using those of the compiled host.
    
    Test Plan:
--

    [mips] Emit the .insn directive for empty basic blocks.
    
    Summary:
    In microMIPS, labels need to know whether they are on code or data. This is
    indicated with STO_MIPS_MICROMIPS and can be inferred by being followed
    by instructions. For empty basic blocks, we can ensure this by emitting the
    .insn directive after the label.
    
    Also, this fixes some failures in our out-of-tree microMIPS buildbots, for the
    exception handling regression tests under: SingleSource/Regression/C++/EH
--
Author: Enrico Granata <egranata@apple.com>
Date:   Wed May 6 21:01:07 2015 +0000

    Add a language objc class-table dump command
    
    This command dumps a bunch of interesting facts about all Objective-C classes known to LLDB in the inferior process
    
    llvm-svn: 236640

commit 2ca909d824a1a86437d081552e4cbe28ba79ff37
Author: Tom Stellard <thomas.stellard@amd.com>
--
commit 398732979a681a2cce9b921564b798fbe688b865
Author: Hafiz Abid Qadeer <hafiz_abid@mentor.com>
Date:   Mon Apr 27 15:04:42 2015 +0000

    Improve handling of ctrl-c with MSVC.
    Currently hitting Ctrl-C in Windows LLDB-MI just exits MI. But according to test_lldbmi_stopped_when_interrupt() in TestMiSignal.py Ctrl-C should send a SIGINT signal to the inferior.
    Patch adds this functionality to Windows so SIGINT is sent on Ctrl-C.
    
    Patch from EwanCrawford. Reviewed in http://reviews.llvm.org/D9248.
    
    llvm-svn: 235887
--
    [PowerPC] Enable printing instructions using aliases
    
    TableGen had been nicely generating code to print a number of instructions using
    shorter aliases (and PowerPC has plenty of short mnemonics), but we were not
    calling it. For some of the aliases we support in the parser, TableGen can't
    infer the "inverse" alias relationship, so there is still more to do.
    
    Thus, after some hours of updating test cases...
    
    llvm-svn: 235616

--

    Fix TestFdLeak on Linux.
    
    Summary:
    LLGS leaks pipes (when launched by lldb), sockets (when launched by platform),
    and/or log file to the inferior. This should prevent all possible leaks.
    
    Reviewers: vharron, clayborg
    
    Reviewed By: clayborg
    
--

commit 5fd24c673e679557c3fcc16a6686c5f4af4944b9
Author: Pavel Labath <labath@google.com>
Date:   Thu Apr 23 09:04:35 2015 +0000

    [NativeProcessLinux] Fix race condition during inferior thread creation
    
    The following situation occured if we were stopping a process (due to breakpoint, watchpoint, ...
    hit) while a new thread was being created.
    - process has two threads: A and B.
    - thread A hits a breakpoint: we send a STOP signal to thread B and register a callback with
--

commit 66eda7323c8e627d8e796c6fac012d99d6fa3341
Author: Enrico Granata <egranata@apple.com>
Date:   Fri Apr 17 01:50:11 2015 +0000

    Fix a bug where argdumper would not launch inferiors correctly in the presence of arguments of the form word1\ word2 (vs. the quoted form "word1 word2")
    
    Fixes rdar://20493444
    
    llvm-svn: 235157

--

commit 7c1d91d8166896e1358c64827a4b347b4dc69523
Author: Ilia K <ki.stfu@gmail.com>
Date:   Wed Apr 15 13:08:35 2015 +0000

    Add teardown hook to shutdown an inferior process
    
    Summary: Add teardown hook to shutdown an inferior process
    
    Reviewers: jasonmolenda, clayborg, tberghammer
    
    Reviewed By: clayborg, tberghammer
    
--
Author: Vince Harron <vince@nethacker.com>
Date:   Wed Apr 15 10:40:51 2015 +0000

    Fixed remote failures in TestCPP11EnumTypes, probably others
    
    Typically, LLGS only sends stdout/stderr notifications when the inferior
    process is running.
    
    Because LLGS reads stdout from the process in a separate thread, sometimes
    these stdout notifications can be received after the server has sent a thread
    stop message. The host isn't expecting stdout to be generated by the target
--
    Missing `-lpthread` causes gcc test failure.
    
    Summary:
    `-lpthread` was removed for `g++ -std=c++11` on Linux due to llvm.org/pr21553,
    but the original issue doesn't seem to be reproducible anymore. Even if it were,
    it had nothing to do with compiling inferiors.
    
    Reviewers: sbest, sivachandra, chying
    
    Subscribers: lldb-commits
    
--

commit bcbfa09f307f6e6e024b3b4705cb3060ad0da798
Author: Enrico Granata <egranata@apple.com>
Date:   Fri Apr 10 01:55:57 2015 +0000

    Fix a problem where 'process launch' was not correctly re-quoting arguments for the inferior process when handing them down for the actual launch
    
    This covers most of rdar://20490076, but leaves one corner case still open - namely the case where we try to have arguments of the form foo\ bar (unquoted, but slashed) go through argdumper
    
    llvm-svn: 234554

--

commit 32c7265a1200d5a1462fd654c914b841dcaac5ba
Author: Chaoren Lin <chaorenl@google.com>
Date:   Tue Apr 7 18:45:03 2015 +0000

    Fix bug where an additional O packet is sent after inferior exits.
    
    Summary:
    ConnectionFileDescriptor::Read was returning eConnectionStatusError instead of 0
    on m_shutting_down, which caused the caller to think that some number of bytes
    were read.
--
Author: Reid Kleckner <rnk@google.com>
Date:   Mon Apr 6 18:50:38 2015 +0000

    [WinEH] Don't sink allocas into child handlers
    
    The uselist isn't enough to infer anything about the lifetime of such
    allocas. If we want to re-add this optimization, we will need to
    leverage lifetime markers to do it.
    
    Fixes PR23122.
    
--

commit 20952ccf90f801e17c4b119e804ea7bf810cbaeb
Author: Vince Harron <vince@nethacker.com>
Date:   Fri Apr 3 01:00:06 2015 +0000

    TestRecursiveInferior fixed on Linux
    
    Summary:
    Updated test to reflect that Linux and Darwin behave the same now.
    
    Removed @expectedFailureLinux for passing tests.
--
Date:   Thu Apr 2 11:07:55 2015 +0000

    Fix test expectation for aarch64 in several test case
    
    These test cases check if they are able to read registers after the
    inferior is crashed. Previously they did it with reading the eax
    register what is only available on i386 and x86_64. Thic CL add code to
    do the check based on the target architecture (currently i386, x86_64
    and aarch64 is supported)
    
    Differential revision: http://reviews.llvm.org/D8702
--
    behavior of the local lldb binary.
    
    Test Plan:
    Run tests on different remote os. Several previously failing tests now pass:
    TestArrayTypes.py
    TestInferiorChanged.py
    TestInferiorCrashing.py
    TestIvarProtocols.py
    TestProcessIO.py
    TestPublicAPIHeaders.py
    TestRecursiveInferior.py
    
    Differential Revision: http://reviews.llvm.org/D8747
    
    llvm-svn: 233805

--
Author: Vince Harron <vince@nethacker.com>
Date:   Tue Mar 31 17:45:54 2015 +0000

    TestPrintStackTraces - made XFAIL more precise
    
    Works with x86_64 inferior, fails w/i386 inferior - updated test to
    reflect
    
    llvm-svn: 233717

commit 3d2979ee2fb3ec9f22bacbc509d06203350df982
--

    MS ABI: Implement driver-level support for thread-safe statics
    
    Decide whether or not to use thread-safe statics depending on whether or
    not we have an explicit request from the driver.  If we don't have an
    explicit request, infer which behavior to use depending on the
    compatibility version we are targeting.
    
    N.B. CodeGen support is still ongoing.
    
    llvm-svn: 232906
--

    Don't close pseudo terminal master file descriptor on EOF
    
    Some application on Linux an all application on android close stdout and
    stderr during the libc exit stage. Previously the master file descriptor
    of the pseudo terminal used to communicate with the inferior was closed
    on an EOF causing a race condition and a possible SIGHUP on process
    exit. After this change the master file descriptor will be closed by the
    destructor of the GDBRemoteCommunicationServerLLGS class.
    
    Differential revision: http://reviews.llvm.org/D8436
--
Date:   Wed Mar 18 00:41:29 2015 +0000

    [SCEV] Make isImpliedCond smarter.
    
    Summary:
    This change teaches isImpliedCond to infer things like "X sgt 0" => "X -
    1 sgt -1".  The `ConstantRange` class has the logic to do the heavy
    lifting, this change simply gets ScalarEvolution to exploit that when
    reasonable.
    
    Depends on D8345
--
    Respect include_inlines when looking up functions in SymbolFileDWARF
    
    Summary:
    SymbolFileDWARF was not respecting the include_inlines argument in function lookup in all code
    paths. This resulted in an attempt to call an inlined function during expression evaluation,
    which is impossible, and usually resulted in a segfault in the inferior. This patch makes sure
    include_inlines is respected in all code paths.
    
    Reviewers: clayborg
    
    Subscribers: lldb-commits, sivachandra
--
Date:   Thu Mar 12 10:12:41 2015 +0000

    Fix ProcessIO test failures
    
    Summary:
    There was a race condition regarding the output of the inferior process. The reading of the
    output is performed on a separate thread, and there was no guarantee that the output will get
    eventually consumed. Because of that, it was happening that calling Process::GetSTDOUT was not
    returning anything even though the process was terminated and would definitely not produce any
    further output. This was usually happening only under very heavy system load, but it can be
    reproduced by placing an usleep in the stdio thread (Process::STDIOReadThreadBytesReceived).
--

commit 1c292271448644886527879ce69354503b3233d7
Author: Philip Reames <listmail@philipreames.com>
Date:   Tue Mar 10 22:43:20 2015 +0000

    Infer known bits from dominating conditions
    
    This patch adds limited support in ValueTracking for inferring known bits of a value from conditional expressions which must be true to reach the instruction we're trying to optimize. At this time, the feature is off by default. Once landed, I'm hoping for feedback from others on both profitability and compile time impact.
    
    Forms of conditional value propagation have been tried in LLVM before and have failed due to compile time problems.  In an attempt to side step that, this patch only considers conditions where the edge leaving the branch dominates the context instruction. It does not attempt full dataflow.  Even with that restriction, it handles many interesting cases:
     * Early exits from functions
     * Early exits from loops (for context instructions in the loop and after the check)
     * Conditions which control entry into loops, including multi-version loops (such as those produced during vectorization, IRCE, loop unswitch, etc..)
--
Author: Richard Smith <richard-llvm@metafoo.co.uk>
Date:   Tue Mar 10 00:19:04 2015 +0000

    [modules] This check is run before we resolve the header, not after, so just
    check that private headers are in a list matching the role. (We can't perform
    the opposite checks for non-private headers because we infer those.)
    
    llvm-svn: 231728

commit 2547f93e95c8f06a1589615b923be9445f41e581
Author: Ben Langmuir <blangmuir@apple.com>
--

commit 7e621e9d5e011a50b4e0917ef0b6367c44567a90
Author: Owen Anderson <resistor@mac.com>
Date:   Sun Mar 8 21:53:59 2015 +0000

    Teach DataLayout to infer a plausible alignment for things even when nothing is specified by the user.
    
    llvm-svn: 231613

commit f4af99bc6a1d15664d5412b90d4ebc6f2ff032af
Author: Johannes Doerfert <doerfert@cs.uni-saarland.de>
--

commit a5397c019823c536f375e80396c7eed7bf203191
Author: Sanjoy Das <sanjoy@playingwithpointers.com>
Date:   Wed Mar 4 22:24:23 2015 +0000

    [IndVarSimplify] use the "canonical" way to infer no-wrap.
    
    Summary:
    rL225282 introduced an ad-hoc way to promote some additions to nuw or
    nsw.  Since then SCEV has become smarter in directly proving no-wrap;
    and using the canonical "ext(A op B) == ext(A) op ext(B)" method of
--
Date:   Tue Mar 3 20:11:48 2015 +0000

    [TestGlobalVariables] LD_LIBRARY_PATH should be process working directory.
    
    Summary:
    The inferior can load the library now, but the remote test is still failing
    because of a module loading problem in LLDB.
    
    Reviewers: ovyalov, sivachandra, clayborg
    
    Subscribers: lldb-commits
--

commit e56f6dceea8c169997c3427a3a61cd52710237bf
Author: Chaoren Lin <chaorenl@google.com>
Date:   Sun Mar 1 04:31:16 2015 +0000

    Fix attaching to 32 bit inferior with 64 bit llgs.
    
    Summary: Executable module should use inferior architecture instead of host architecture.
    
    Reviewers: ovyalov, vharron, clayborg
    
    Subscribers: lldb-commits
    
--
    
    Summary:
    http://llvm.org/bugs/show_bug.cgi?id=20400
    
    The default triple of i686-pc-linux-gnu for 32 bit linux targets is compatible
    but not necessarily identical to the inferior binaries.
    
    Applying Azat Khuzhin's solution of using ArchSpec::IsCompatibleMatch() instead
    of ArchSpec::IsExactMatch() when comparing ObjectFile and Modules architecture.
    
    Reviewers: vharron
--

    Add support for SBProcess::PutSTDIN to remote processes
    
    Processes running on a remote target can already send $O messages
    to send stdout but there is no way to send stdin to a remote
    inferior.
    
    This allows processes using the API to pump stdin into a remote
    inferior process.
    
    It fixes a hang in TestProcessIO.py when running against a remote
    target.
    
    llvm-svn: 228419
--
Date:   Fri Feb 6 11:32:52 2015 +0000

    Fix TestProcesslaunch regression caused by D7372
    
    Summary:
    After closing all the leaked file descriptors to the inferior tty, the following problem occured:
    - when stdin, stdout and stderr are redirected, there are no slave descriptors open (which is good)
    - lldb has a reader thread, which attempts to read from the master end of the tty
    - this thread receives an EOF
    - in response, it closes it's master end
    - as this is the last open file descriptor for the master end, this deletes the tty and sends
      SIGHUP to the inferior (this is bad)
    
    I fix this problem by making sure the master end remains open for the duration of the inferior
    process by storing a copy of the file descriptor in ProcessMonitor. I create a copy to avoid
    ownership issues with the reading thread.
    
    Reviewers: ovyalov, emaste
    
--

commit be86bb1e6ae27cc0fbe56b88a2b0cbb6bf30db5e
Author: Hafiz Abid Qadeer <hafiz_abid@mentor.com>
Date:   Fri Feb 6 11:06:41 2015 +0000

    Give error on "-inferior-tty-set" command.
    This command is not implemented yet. Giving error gives chance to clients to
    handle it properly instead of falsely assuming the lldb-mi is supporting it.
    
    llvm-svn: 228389

--

commit 97a9ac198255de8420624d66417301765b116795
Author: Pavel Labath <labath@google.com>
Date:   Thu Feb 5 16:44:42 2015 +0000

    Avoid leaking log file descriptors into the inferior process.
    
    Summary:
    This commit adds a new open flag File::eOpenOptionCloseOnExec (i.e., O_CLOEXEC), and adds it to
    the list of flags when opening log files (#ifndef windows). A regression test is included.
    
--
commit 250b1b890293bce75747ed2f12e18c1b2e6cfd83
Author: Jason Molenda <jmolenda@apple.com>
Date:   Tue Feb 3 23:39:47 2015 +0000

    Small fix for the "memory write -i filename" command -- if the user fails to specify the
    number of bytes to write into the inferior process, the "default byte size" will be 1.
    In that case, we want to copy the entire file into memory.  The code was looking for
    a default byte size of 0 to indicate that the user had not provided a specific # of
    bytes to copy; adjust that to 1 to match the actual default value.
    <rdar://problem/18074973>
    
--
Author: Reid Kleckner <rnk@google.com>
Date:   Tue Feb 3 19:04:26 2015 +0000

    thread safety: Add move ctor to BeforeInfo to fix MSVC build
    
    MSVC cannot infer move ctors yet.
    
    llvm-svn: 228009

commit b7d562878440cedcca1cefa2ba445092f2f7753e
Author: Sanjay Patel <spatel@rotateright.com>
--

commit 20433ae11b4f653783d1e6ff102cd02cdbff1245
Author: Chaoren Lin <chaorenl@google.com>
Date:   Tue Feb 3 01:51:06 2015 +0000

    Fixed TestInferiorChanged
    
    replaced expected stop reason 'address invalid' with 'signal SIGSEGV'
    
    llvm-svn: 227921

commit 0c1463d4ea6dd23c8d1f3c296811e891d930a8d4
Author: Chaoren Lin <chaorenl@google.com>
Date:   Tue Feb 3 01:51:05 2015 +0000

    Fixed TestInferiorCrashing failures
    
    LLGS debugging is outputting different thread stop reasons than
    local linux debugging.  The stop reasons are reasonable so I've left
    left them alone.  Might update them to match darwin in the future.
    
--

commit 911a6dcaa980034659498af658cb1c1884055d0e
Author: Chaoren Lin <chaorenl@google.com>
Date:   Tue Feb 3 01:51:02 2015 +0000

    LLGS local - signal stops inferior in debugger
    
    NativeProcessLinux::MonitorSignal was automatically resuming threads
    that stopped due to a signal.  This is inconsistent with the
    behavior of lldb and gdb.  This change removes the automatic resume.
    
--
      not updating the internal state about the thread assumed to be
      running now.  I'll add a test and upstream this in a moment.
    
    * Added a verbose logging mechanism to event processing within
      ThreadStateCoordinator.  It is currently enabled when the
      'log enable lldb thread' is true upon inferior launch/attach.
    
    llvm-svn: 227909

commit 56f981bfceaeeee00ad4097d29723cfb05e59bdf
Author: Chaoren Lin <chaorenl@google.com>
--

commit 9c3a07984f12101a9109ed2e2afa9c2bc3d394b6
Author: Enrico Granata <egranata@apple.com>
Date:   Tue Feb 3 01:06:35 2015 +0000

    Allow customizing the timeout of the inferior
    
    llvm-svn: 227906

commit 9c58e8aac4cf811b7488406a872aaf8f2dcb04b5
Author: Enrico Granata <egranata@apple.com>
--
commit cc391a0a12ca97e7299d4ae31c75b69229e6ffd3
Author: Kate Stone <katherine.stone@apple.com>
Date:   Wed Jan 21 23:39:16 2015 +0000

    Expression evaluation for functions with unknown signatures on works by
    inferring the function signature.  This works well where the ABI doesn't
    distinguish between variadic and fixed argument lists, but on arm64 the
    calling conventions differ.  The default assumption works for fixed argument
    lists, but variadic functions require explicit prototypes to be called.
    
    By far the most common case where this is an issue is when attempting to use
--
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Tue Jan 20 05:58:07 2015 +0000

    Bitcode: Don't create comdats when autoupgrading macho bitcode
    
    Don't infer COMDAT groups from older bitcode if the target is macho,
    it doesn't have COMDATs.
    
    llvm-svn: 226546

commit aa687a3d4cdc2c964fd70df7925d9a8a2e6d55fc
--

commit 5eee895ccf9bea773e3c01f8915a9fba106e4f3f
Author: Chandler Carruth <chandlerc@gmail.com>
Date:   Sun Jan 18 01:45:07 2015 +0000

    [PM] Lift the actual analyses used into the inferface rather than
    accepting a Pass and querying it for analyses.
    
    This is necessary to allow the utilities to work both with the old and
    new pass managers, and I also think this makes the interface much more
    clear and helps the reader know what analyses the utility can actually
--

commit baa15585ca33c47b6fbf6ee4b95fdfdd862dda77
Author: Enrico Granata <egranata@apple.com>
Date:   Fri Jan 16 18:59:54 2015 +0000

    Add a utility script that executes an inferior process tucking its output away somewhere safe, and not letting error messages escape
    This has potential to be useful in build automation environments
    
    llvm-svn: 226300

commit ef5c9503e3a6e721a0356ad7f99e781e543e1057
--

commit c1d88ea5a751e7e42fc01d297e25eda9e790fea1
Author: Ben Langmuir <blangmuir@apple.com>
Date:   Tue Jan 13 17:47:44 2015 +0000

    Inherit attributes when infering a framework module
    
    If a module map contains
    framework module * [extern_c] {}
    
    We will now infer [extern_c] on the inferred framework modules (we
    already inferred [system] as a special case).
    
    llvm-svn: 225803

commit 7615f00e5188e50180f9e2f62c24d50191038bdd
Author: Ben Langmuir <blangmuir@apple.com>
--

commit d3d7f3b5bd8467c60e3b223d6d10366e6d2e0c90
Author: Ben Langmuir <blangmuir@apple.com>
Date:   Tue Jan 13 17:47:29 2015 +0000

    Remove unused method canInferFrameworkModule
    
    llvm-svn: 225801

commit 7d3d50bcb223e1e4c55592fe441cc0cc8369b7d9
Author: Hal Finkel <hfinkel@anl.gov>
--
Author: Sanjoy Das <sanjoy@playingwithpointers.com>
Date:   Sat Jan 10 23:41:24 2015 +0000

    Fix PR22179.
    
    We were incorrectly inferring nsw for certain SCEVs. We can be more
    aggressive here (see Richard Smith's comment on
    http://llvm.org/bugs/show_bug.cgi?id=22179) but this change just
    focuses on correctness.
    
    Differential Revision: http://reviews.llvm.org/D6914
--

commit 0f1b4997cef22f3a8a0798a4a253d0db38d8735d
Author: Siva Chandra <sivachandra@google.com>
Date:   Sat Jan 10 00:25:23 2015 +0000

    [TestInferiorAssert] Differentiate DWARF and DSYM tests with suffixes.
    
    Reviewers: vharron, clayborg
    
    Reviewed By: clayborg
    
--

commit 398f46f8f237497591901c6952dd936dc503c79b
Author: Ted Kremenek <kremenek@apple.com>
Date:   Wed Dec 31 07:44:51 2014 +0000

    [analyzer] Change ccc-analyzer to mimick behavior on OSX Mavericks/Yosemite to automatically infer the SDK location.
    
    llvm-svn: 225038

commit a7a8c4c09e947a8a5898a640536ee2fc131163ed
Author: Craig Topper <craig.topper@gmail.com>
--
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Fri Dec 26 10:29:40 2014 +0000

    Update tests due to r224849
    
    Inferring nuw caused some clang tests to change their output.
    
    llvm-svn: 224851

commit f8c7e25560f0e9bae864d7ad56079877b99c0e28
Author: Evgeniy Stepanov <eugeni.stepanov@gmail.com>
--

commit b1296ec0fdb7ca009443b8e488b2f568ebefc3df
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Fri Dec 26 09:50:35 2014 +0000

    InstCombine: Infer nuw for multiplies
    
    A multiply cannot unsigned wrap if there are bitwidth, or more, leading
    zero bits between the two operands.
    
    llvm-svn: 224849
--

commit 54c2ca25392d242fcf1e5cdc3d97737c8b002384
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Fri Dec 26 09:10:14 2014 +0000

    InstCombe: Infer nsw for multiplies
    
    We already utilize this logic for reducing overflow intrinsics, it makes
    sense to reuse it for normal multiplies as well.
    
    llvm-svn: 224847
--

commit 23fd69560bce1a962046dc5eb4953b53fcda8329
Author: Craig Topper <craig.topper@gmail.com>
Date:   Sun Dec 21 20:05:06 2014 +0000

    [X86] Add hasSideEffects = 0 to CALLpcrel16. This matches what is inferred from patterns for the 32-bit version.
    
    llvm-svn: 224692

commit 22b4c256e12316a8f2ec5b02ecff606c9b54d438
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
--
      Simple a, b;
    
      a = b;
    }
    
    Above the implicit copy assignment operator was inferred as host device but
    there was only a host assignment copy defined which is an error in device
    compilation mode.
    
    Differential Revision: http://reviews.llvm.org/D6565
    
--
    up dialogs when LLDB crashes in native code because it will hang
    the test suite.  This patch silences those dialogs by checking an
    environment variable at startup and configuring Windows based on
    its value.
    
    This patch also adds an environment variable to force inferiors to
    never spawn in their own console window.  This is useful to prevent
    new window spawm when running the test suite.
    
    Reviewed by: Scott Graham
    
--

commit 859e4b5da12ec670e5237663fbe77e9dc37f4aab
Author: Oleksiy Vyalov <ovyalov@google.com>
Date:   Wed Dec 10 01:27:28 2014 +0000

    Add D request handler to GDBRemoteCommunicationServer in order to support detach from inferior.
    
    llvm-svn: 223901

commit 238d897b07ff986b086c0a37e465dbc4310307e5
Author: Sean Callanan <scallanan@apple.com>
--

commit 80c2c60f36d9fd16de7998868de207621b5af883
Author: Zachary Turner <zturner@google.com>
Date:   Tue Dec 9 19:28:00 2014 +0000

    XFAIL all of TestInferiorAssert.py tests on Windows.
    
    Getting this working correctly is a significant amount of work.
    Assertions on Windows show up as error code 0xC0000409, which is
    STATUS_STACK_BUFFER_OVERRUN.  In order to accurately determine
    that this is not just any stack buffer overrun, but one triggered
--

commit 0bc23e33a734a353f035397d973d4791f39b83f5
Author: David Blaikie <dblaikie@gmail.com>
Date:   Wed Dec 3 19:58:48 2014 +0000

    Simplify CodeGenRegBank::inferMatchingSuperRegClass & its caller by passing an iterator rather than index
    
    llvm-svn: 223262

commit dacea4bc531523a8218f68ff633b993deb99ba34
Author: David Blaikie <dblaikie@gmail.com>
--
Author: Jason Molenda <jmolenda@apple.com>
Date:   Tue Dec 2 00:26:21 2014 +0000

    Fix the behavior of ${current-pc-arrow} in the default disassembly
    format for the not-current-stack-frame.  This was causing
    test/functionalities/inferior-assert to fail.
    
    Also document the new additions to the format specifications used
    in the disassembly-format changes to formats.html.
    
    <rdar://problem/19102757>
--
Author: Shawn Best <sbest@blueshiftinc.com>
Date:   Fri Nov 21 06:49:39 2014 +0000

    fix Bug21211 : reworked test/api/multithreaded/test_listener_event_description.cpp to work properly on Linux/FreeBSD
    
    Issue D5632 fixed an issue where linux would dump spurious output to tty on startup (due to a broadcast stop event). After the checkin, it was noticed on FreeBSD a unit test was now failing. On closer investigation I found the test was using the C++ API to launch an inferior while using an SBListener to monitor the public state changes. As on OSx, it was expecting to see:
    
    eStateRunning
    eStateStopped
    
    On Linux/FreeBSD, there is an extra state change
--
    This implements the skeleton of a RegisterContext for Windows.
    In particular, this implements support only for x86 general purpose
    registers.
    
    After this patch, LLDB on Windows can perform basic debugging
    operations in a single-threaded inferior process (breakpoint,
    register inspection, frame select, unwinding, etc).
    
    Differential Revision: http://reviews.llvm.org/D6322
    Reviewed by: Greg Clayton
    
--
    obj2yaml, yaml2obj: Add support for COFF executables
    
    In support of serializing executables, obj2yaml now records the virtual address
    and size of sections.  It also serializes whatever we strictly need from
    the PE header, it expects that it can reconstitute everything else via
    inference.
    
    yaml2obj can reconstitute a fully linked executable.
    
    In order to get executables correctly serialized/deserialized, other
    bugs were fixed as a circumstance.  We now properly respect file and
--

commit 50d60be3ce72f8f1005895fa3e7d14ec1a1f385c
Author: Shawn Best <sbest@blueshiftinc.com>
Date:   Tue Nov 11 00:28:52 2014 +0000

    Fix error handling in NativeProcessLinux::AttachToInferior: http://reviews.llvm.org/D6158
    
    llvm-svn: 221647

commit e106102176f04b782e342bab8942a35febb6ab02
Author: Alexey Samsonov <vonosmas@gmail.com>
--

commit 2d220ab9b4fa1ed1157fc809d0c1fc1e7ae24f8c
Author: Rui Ueyama <ruiu@google.com>
Date:   Thu Nov 6 23:50:48 2014 +0000

    [PECOFF] Improve subsystem inference
    
    If /subsystem option is not given, the linker needs to infer the
    subsystem based on the entry point symbol. If it fails to infer
    that, the linker should error out on it.
    
    LLD was almost correct, but it would fail to infer the subsystem
    if the entry point is specified with /entry. This is because the
    subsystem inference was coupled with the entry point function
    searching (if no entry point name is specified, the linker needs
    to find the right entry name).
    
    This patch makes the subsystem inference an independent pass to
    fix the issue. Now, as long as an entry point function is defined,
    LLD can infer the subsystem no matter how it resolved the entry
    point.
    
    I don't think scanning all the defined symbols is fast, although
    it shouldn't be that slow. The file class there does not provide
    any easy way to find an atom by name, so this is what we can do
--

commit 51ff559500c460f7f779019c1bfa964a1c2f223d
Author: David Majnemer <david.majnemer@gmail.com>
Date:   Thu Nov 6 08:10:41 2014 +0000

    Object, COFF: Infer symbol sizes from adjacent symbols
    
    Use the position of the subsequent symbol in the object file to infer
    the size of it's predecessor.  I hope to eventually remove whatever COFF
    specific details from this little algorithm so that we can unify this
    logic with what Mach-O does.
    
    llvm-svn: 221444
--
    is in no way related to that of other process plugins which have also
    implemented classes with similar names such as DebugMonitor.
    
    Also created a DebugEventHandler interface, which will be used by
    implementors to get notified when debugging events happen in the
    inferiors.
    
    llvm-svn: 221322

commit dc0d9e46a5efbcd496fe60070f569185a9418397
Author: Tim Northover <tnorthover@apple.com>
--

commit 15d810fa29b370a17131233c7a60b626f8ad686b
Author: Stephane Sezer <sas@cd80.net>
Date:   Fri Oct 31 22:37:24 2014 +0000

    Always transmit SIGPROF back to the inferior.
    
    Summary:
    SIGPROF is used for profiling processes (with google-perftools for
    instance), which results in the inferior receiving a SIGPROF from the
    kernel every few milliseconds. Instead of stopping the debugging session
    and notifying the user of this, we should just pass the signal and keep
    running.
    
    This follows the behavior we have in UnixSignals.cpp.
--
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Sun Oct 26 22:08:56 2014 +0000

    Fix TestAttachResume test so it doesn't hang on Linux with ptrace lockdown.
    
    Similar to previous fix, this augments the test inferior to
    immediately indicate it may be ptraced by any Linux process
    when the appropriate symbols are defined.
    
    This seems to indicate we need to fix our lldb attach logic to
    catch when an attach fails, and trigger an appropriate error
--
    Fix HelloWorld attach test for Linux kernels with ptrace ancestor lockdown.
    
    Similar to a recent test I fixed for gdb-remote attach scenarios, this
    fix is for Linux kernels, such as Ubuntu's stock setup on 11.04-ish and
    later, where ptrace starts requiring a ptracer to be an ancestor of the
    inferior to be ptraced.  This change checks for Linux and the ptrace-related
    flags.  If they're found, it tries to switch on the "allow any ptracer" mode
    for the inferior as the first statements in the program.  It's a best-effort
    solution - if the prctl call fails, the failure is ignored, and probably will
    lead to the test failing.
    
    The ptrace security behavior can be modified system-wide, but is outside the
    scope of the test to address.  Hence I went with this particular solution.
--

    Fix 4 failing llgs-related tests on a stock Ubuntu 14.04 x86_64 system./
    
    This fix addresses a requirement on some Linux kernels that limits
    a PTRACER to be an ancestor of the ptraced process.  The fix in this
    case is to have the inferior test exe explicitly allow any ptracer
    to attach.
    
    This fixes several ptrace-related issues that I did not see on a modified
    kernel we used internally on my team.
    
--
Date:   Fri Oct 17 11:56:00 2014 +0000

    [DSE] Remove no-data-layout-only type-based overlap checking
    
    DSE's overlap checking contained special logic, used only when no DataLayout
    was available, which inferred a complete overwrite when the pointee types were
    equal. This logic seems fine for regular loads/stores, but does not work for
    memcpy and friends. Instead of fixing this, I'm just removing it.
    Philosophically, transformations should not contain enhanced behavior used only
    when data layout is lacking (data layout should be strictly additive), and
    maintaining these rarely-tested code paths seems not worthwhile at this stage.
--

commit 75f47c3a5d8fa1f3f7f492af58199d34f10f26ed
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Sat Oct 11 21:42:09 2014 +0000

    llgs: fixes to PTY/gdb-remote inferior stdout/stderr handling, logging addtions.
    
    With this change, both local-process llgs and remote-target llgs stdout/stderr
    handling from inferior work correctly.
    
    Several log lines have been added around PTY and stdout/stderr redirection
    logic on the lldb client side.
    
    Regarding remote llgs execution, see the following:
    
    With these changes, remote llgs with $O now works properly:
    
    $ lldb
    (lldb) platform select remote-linux
    (lldb) target create ~/some/inferior/exe
    (lldb) gdb-remote {some-target}:{port}
    (lldb) run
    
    The sequence above will correctly redirect stdout/stderr over gdb-remote $O,
    as is needed for remote debugging.  That sequence assumes there is a lldb-gdbserver
--
    For local debugging with llgs, the following sequence also works, and
    uses local PTYs instead to avoid $O and extra gdb-remote messages:
    
    $ lldb
    (lldb) settings set platform.plugin.linux.use-llgs true
    (lldb) target create ~/some/inferior/exe
    (lldb) run
    
    The above will run the inferior using llgs on the local host, and
    will use PTYs rather than $O redirection.
    
    This change also removes the logging that happened after the fork but
    before the exec when llgs is launching a new inferior process.  Some
    aspect of the file handling during that portion of code would not do
    the right thing with log handling.  We might want to go back later
    and have that communicate over a pipe from the child to parent to pass
    along any messages that previously were logged in that section of code.
    
--

commit 8f0c803c26a908a9f1841e793037719877ee2abb
Author: Rui Ueyama <ruiu@google.com>
Date:   Tue Oct 7 01:38:46 2014 +0000

    [PECOFF] Infer machine type from input object file
    
    If /machine option is omitted, the linker needs to infer that from
    input object files. This patch implements that.
    
    llvm-svn: 219180

commit 6cfcc294fe081f960cbc302a87e49e31ca35beae
--
Author: Eli Bendersky <eliben@google.com>
Date:   Tue Sep 30 17:38:34 2014 +0000

    CUDA: mark the target of implicit intrinsics properly
    
    r218624 implemented target inference for implicit special members. However,
    other entities can be implicit - for example intrinsics. These can not have
    inference running on them, so they should be marked host device as before. This
    is the safest and most flexible setting, since by construction these functions
    don't invoke anything, and we'd like them to be invokable from both host and
    device code. LLVM's intrinsics definitions (where these intrinsics come from in
    the case of CUDA/NVPTX) have no notion of target, so both host and device
    intrinsics can be supported this way.
--

commit 9a220fca4a6f01f1d3363b3cb53f4f2fa77851c4
Author: Eli Bendersky <eliben@google.com>
Date:   Mon Sep 29 20:38:29 2014 +0000

    CUDA: Fix incorrect target inference for implicit members.
    
    As PR20495 demonstrates, Clang currenlty infers the CUDA target (host/device,
    etc) for implicit members (constructors, etc.) incorrectly. This causes errors
    and even assertions in Clang when compiling code (assertions in C++11 mode where
    implicit move constructors are added into the mix).
    
    Fix the problem by inferring the target from the methods the implicit member
    should call (depending on its base classes and fields).
    
    llvm-svn: 218624

commit 52c0f6adb667a6095270466254c52a1fd8af7026
--

commit 87bac59adce546601eb397e4a3c1354b0282f4d4
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Thu Sep 18 21:02:03 2014 +0000

    llgs: removed some wait-for-stop code in inferior process launch pipeline.
    
    The $A handler was unnecessarily waiting for the launched app to hit a stop
    before returning.  Removed this code.
    
    Renamed the llgs inferior launching code to LaunchProcessForDebugging ()
    to prevent it from possibly being mistaken as code that lldb-platform uses
    to launch a debugserver process.  We probably want to look at breaking out
    llgs-specific and lldb-platform-specific code into separate derived classes,
    with common code in a shared base class.
    
--
    Building with -pedantic, -Wbind-to-temporary-copy, or -Wc++98-compat still
    shows the warning.
    
    The motivation is that I built re2, and this was the only warning that was
    emitted during the build. Both changing re2 to fix the warning and detecting
    clang and suppressing the warning in re2's build seem inferior than just giving
    the compiler a good default for this warning.
    
    Also move the cxx98compat version of this warning to CXX98CompatPedantic, and
    update tests accordingly.
    
--
Author: Reid Kleckner <rnk@google.com>
Date:   Tue Sep 16 17:28:15 2014 +0000

    Fix move-only type issues in Interpreter with MSVC
    
    MSVC 2012 cannot infer any move special members, but it will call them
    if available. MSVC 2013 cannot infer move assignment. Therefore,
    explicitly implement the special members for the ExecutionContext class
    and its contained types.
    
    llvm-svn: 217887

--

commit 511e5cdce4020e221d3a8609492004e908ccfc1a
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Thu Sep 11 23:29:14 2014 +0000

    llgs: fix Ctrl-C inferior interrupt handling to do the right thing.
    
    * Sends a SIGSTOP to the process.
    * Fixes busted SIGSTOP handling.  Now builds a list of non-stopped
      that we wait for the PTRACE group-stop for.  When the final must-stop
      tid gets its group stop, we propagate the process state change.
--
    Add a ProcessStructReader utility class to LLDB
    
    The purpose of a ProcessStructReader is to allow intelligent reading of data from the underlying process
    Traditionally, the way this has been handled is to have a load_address and shuffle it around, and use Process::ReadMemory()-kind APIs
    
    With a ProcessStructReader one can define a clang type that matches exactly the definition of the thing they are trying to ingest from the inferior process, and then just point LLDB at where the data is
    Since this work is done in terms of clang types, one can honor packed/aligned attributes, sizes of types on the inferior architecture, and similar tricky caveats without having to hardcode them
    
    llvm-svn: 217644

commit 6f8525d8a6c650d6dd75c029f731e72a916bdbb4
Author: Lang Hames <lhames@gmail.com>
--

commit 635f9c71589dd2cb80257e29aa02c5e5dd03742b
Author: Nick Kledzik <kledzik@apple.com>
Date:   Thu Sep 4 20:08:30 2014 +0000

    [mach-o] Let darwin driver infer arch from .o files if -arch not used.
    
    Mach-O has a "fat" (or "universal") variant where the same contents built for
    different architectures are concatenated into one file with a table-of-contents
    header at the start.  But this leaves a dilemma for the linker - which
    architecture to use.
--
    access only argument-derived pointers (currently, we know this only for
    memory intrinsics).
    
    Also, we fix a theoretical problem with using the NoCapture attribute to skip
    the capture check. This is incorrect (as explained in the comment added), but
    would not matter in any code generated by Clang because we get only inferred
    nocapture attributes in Clang-generated IR.
    
    This functionality is not yet enabled by default.
    
    llvm-svn: 216818
--

commit 76e0fc9884adbcb1e797cfd60ff3d772801717ba
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Wed Aug 27 22:58:26 2014 +0000

    Add some logging around Process attaching and inferior exec handling.
    
    llvm-svn: 216630

commit ad8beabe38f5d1f2045ba91940877639ba46e7c0
Author: Juergen Ributzka <juergen@apple.com>
--

commit 426282813220cb3328c9554fdef33983057daeb0
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Thu Aug 21 17:16:26 2014 +0000

    Fix on Linux for ReadThread lingering after inferior exits
    
    See this email thread:
    http://lists.cs.uiuc.edu/pipermail/lldb-commits/Week-of-Mon-20140818/012487.html
    
    This patch handles the case where the inferior process exits but leaves the ReadThread in a continuous loop reading from the communication pipe.  On MacOSX, the ReadThread exits when it receives a 0 return value from the read due to EOF.  On Linux the read returns -1 and sets errno to EIO error, this does not currently cause the thread to shutdown so it continues to read from the comm.   In Communication::ReadThread I added a handler for eConnectionStatusError to disconnect and shutdown the thread.
    
    Change by Alex Pepper.
    
    llvm-svn: 216194

--
Date:   Tue Aug 12 16:42:33 2014 +0000

    Verify all the module map files for a pcm are the same on load
    
    We already verified the primary module map file (either the one that
    defines the top-level module, or the one that allows inferring it if it
    is an inferred framework module). Now we also verify any other module
    map files that define submodules, such as when there is a
    module.private.modulemap file.
    
    llvm-svn: 215455

--
    
    This allows accessing an SReg subregister with a normal subregister
    index, instead of getting a machine verifier error.
    
    Also be sure to include all of these subregisters in SReg_32.
    This fixes inferring SGPR instead of SReg when finding a
    super register class.
    
    llvm-svn: 214901

commit 2efa42c937bffd082680aff01e089bafd0243c03
--
Date:   Mon Jul 28 22:53:49 2014 +0000

    Fixup TestStepNoDebug to cleanup properly on shutdown.
    
    This was causing core dumps on MacOSX and was not properly
    cleaning up the state of the inferior before exiting.
    
    The test was overriding def tearDown(), but failed to
    call the base class after doing its own cleanup.  This
    essentially eliminated normal clean-up activity.
    
--
    
    This functionality is currently turned off by default.
    
    Part of the motivation for introducing scoped-noalias metadata is to enable the
    preservation of noalias parameter attribute information after inlining.
    Sometimes this can be inferred from the code in the caller after inlining, but
    often we simply lose valuable information.
    
    The overall process if fairly simple:
     1. Create a new unqiue scope domain.
     2. For each (used) noalias parameter, create a new alias scope.
--
Date:   Fri Jul 25 01:15:34 2014 +0000

    Fix an x86 assembler stack unwind calculation for non-volatile registers.
    
    This change has the practical effect of fixing some backtrace
    scenarios that would fail with inferiors running on the Android Art
    host-side JVM under Linux x86_64 on Ubuntu 14.04.
    
    See this lldb-commits thread for more details:
    http://lists.cs.uiuc.edu/pipermail/lldb-commits/Week-of-Mon-20140721/011988.html
    
--
    
    This is a part of a larger change to move the entry point
    processing to a later pass than the driver. On Windows the default
    entry point function varies depending on user-provided functions.
    That means the driver is not able to correctly know the entry point
    function name. Only passes after the core linker can infer it.
    
    llvm-svn: 213697

commit 12bb77ddd1ab418fce280d2be5af9a3b6c4295fc
Author: David Majnemer <david.majnemer@gmail.com>
--
    CaptureTracking, generalizes it slightly (by adding a ReturnCaptures
    parameter), and makes it generally available via a PointerMayBeCapturedBefore
    utility function.
    
    This logic will be needed, for example, to perform noalias function parameter
    attribute inference.
    
    No functionality change intended.
    
    llvm-svn: 213519

--
Date:   Mon Jul 21 12:27:23 2014 +0000

    Move isIdentifiedFunctionLocal from BasicAA to AA
    
    The ability to identify function locals will exist outside of BasicAA (for
    example, logic for inferring noalias function arguments will need this), so
    make this concept generally accessible without code duplication.
    
    No functionality change.
    
    llvm-svn: 213514
--
Author: Matt Arsenault <Matthew.Arsenault@amd.com>
Date:   Tue Jul 15 01:55:03 2014 +0000

    Teach computeKnownBits to look through addrspacecast.
    
    This fixes inferring alignment through an addrspacecast.
    
    llvm-svn: 213030

commit 138551bb15f2a67cc498546a08df3103fea36924
Author: Andrea Di Biagio <Andrea_DiBiagio@sn.scee.net>
--

commit 6b7f73451f7e83ff3c9e175ab47af444486fd2d7
Author: Ben Langmuir <blangmuir@apple.com>
Date:   Mon Jul 14 19:45:12 2014 +0000

    Fix case-sensitivity of inferred framework modules
    
    Just because we can open a directory named "COcoa.framework" doesn't
    mean we should provide a "COcoa" module on a case-insensitive filesystem.
    
    llvm-svn: 212975
--

commit 3b9a93498bd67a92e669da0ee11f6af2ac32f85e
Author: Jason Molenda <jmolenda@apple.com>
Date:   Thu Jul 10 10:23:01 2014 +0000

    Get the inferior binary's name via the command line argument instead
    of hardcoding it.
    
    llvm-svn: 212698

commit cbd44c591d0ff434be4c9dbdd194ae0e1b186e3e
--

    Add a new test in api/multiple-debuggers which tries to create 50
    debug sessions simultaneously to expose race conditoin/locking
    issues.
    
    This directory has an inferior program, testprog.cpp that has a
    couple of functions we can put breakpoints on.
    
    It has a driver program, multi-process-driver.cpp, which links
    against the LLDB solib and uses the SB APIs.  It creates 50 pthreads,
    creates a debugger on all of them, launches a debug session of the
    inferior testprog, hits a couple breakpoints, walks the stack,
    continues, etc., and then kills the inferior and ends the debug
    session.
    
    A pass is if all fifty debug sessions complete successfully
    in the alloted time (~60 seconds).
    
--
    
    When a stub reported $#00 (unsupported) for _M and _m
    packets, the unsupported response was not handled and
    the client then marked the _M/_m commands as definitely
    supported.  However, they would always fail, preventing
    lldb's fallback InferiorCallMmap-based allocation strategy
    from being used to attempt to allocate memory in the inferior
    process space.
    
    llvm-svn: 211425

commit d119fa028ac28ed4ec0bf11d1178bf58dedf72a7
--
Date:   Thu Jun 19 17:35:40 2014 +0000

    Fixed up gdb-remote auxv regex issues with binary data.
    Fixes two causes for https://github.com/tfiala/lldb/issues/7.
    
    1. Ensures the inferior program has started executing, by printing
    a message on output first thing (per the "message:" command line arg)
    and waiting for that text to arrive before doing any checks related
    to auxv support.
    
    2. Fixes up auxv-related regex patterns to be compiled with the Python
--
    Added gdb-remote auxv tests.
    
    First batch of auxv-related tests from llgs branch.
    
    Includes helpers for unescaping gdb-remote binary-escaped
    data, converting binary data from inferior endian-ness to
    integral values, etc.
    
    Tests on debugserver are expected to be skipped since it
    doesn't support auxv and the tests are geared to be skipped
    on platforms that don't broadcast support for the feature
--
    
    So now every operation is defined in terms of TableGen DAGs. There are a bunch
    of operators to use, including "op" (a generic unary or binary operator), "call"
    (to call other intrinsics) and "shuffle" (take a guess...). One of the main
    advantages of this apart from making it more obvious what is going on, is that
    we have proper type inference. This has two obvious advantages:
    
      1) TableGen can error on bad intrinsic definitions easier, instead of just
         generating wrong code.
      2) Calls to other intrinsics are typechecked too. So
         we no longer need to work out whether the thing we call needs to be the Q-lane
--
    
    This code is inefficient because the check (a == 1) to execute do1() is
    not needed.
    
    The reason is that because we already checked that (a >= 1) initially by
    checking that also  (a < 2) we basically already inferred that (a == 1)
    without the need of an extra basic block spawned to check if actually (a
    == 1).
    
    The patch addresses this problem by keeping track of already
    checked bounds in the LowerSwitch algorithm, so that when the time
--
    the information about a thread from the jThreadExtendedInfo result.
    I need to do more work to make this format reasonably.
    
    Han Ming added calls into the pmenergy and pmsample libraries if
    debugserver is run on Mac OS X Yosemite to get information about the
    inferior's power use.
    
    I added support to debugserver for gathering the Genealogy information
    about threads, if it exists, and returning it in the jThreadExtendedInfo
    JSON result.
    
--
Date:   Tue Jun 10 09:52:44 2014 +0000

    AArch64: teach FastISel how to handle offset FrameIndices
    
    Previously we were abandonning the attempt, leading to some combination of
    extra work (when selection of a load/store fails completely) and inferior code
    (when this leads to a real memcpy call instead of inlining).
    
    rdar://problem/17187463
    
    llvm-svn: 210520
--
    send/response elements to the packet flow. Removed the older pid-only
    query mechanism. The parser verifies all the keys provided are within
    the documented known set of key-value pairs.
    
    Added helper routine to unpack the hex value of a $p-style register
    read response according to the endian-ness of the inferior as reported
    by qProcessInfo.
    
    Added a test to verify qProcessInfo includes an endian key/value pair.
    
    Refactored several older tests to move to the less verbose test
--

    Added gdb-remote memory read ($m) test.
    
    Added set-memory:{content} and get-memory-address-hex: commands
    to the test exe for gdb-remote.  Added a test that sets the content
    via the inferior command line, then reads it back via gdb-remote
    with $m.
    
    Passing on debugserver.  Marked as fail on llgs.  Implementing
    in the llgs branch next.
    
--
    gdb-remote testing: new test, cleaned up socket reading.
    
    Added new SocketPacketPump class to decouple gdb remote packet
    reading from packet expectations code.  This allowed for cleaner
    implementation of the separate $O output streams (non-deterministic
    packaging of inferior stdout/stderr) from all the rest of the packets.
    
    Added a packet expectation matcher that can match expected accumulated
    output with a timeout.  Use a dictionary with "type":"output_match".
    See lldbgdbserverutils.MatchRemoteOutputEntry for details.
    
--
Author: Sebastian Pop <spop@codeaurora.org>
Date:   Tue May 27 22:42:09 2014 +0000

    pass element size to delinearization
    
    Instead of relying on the delinearization to infer the size of an element,
    compute the element size from the base address type. This is a much more precise
    way of computing the element size than before, as we would have mixed together
    the size of an element with the strides of the innermost dimension.
    
    llvm-svn: 209695
--
    parameters: these simplified term expressions are passed to the array shape
    recognizer that will not recognize constant dimensions anymore: these will be
    recognized as different strides in parametric subscripts.
    
    The only important special case of a constant dimension is the size of elements.
    Instead of relying on the delinearization to infer the size of an element,
    compute the element size from the base address type. This is a much more precise
    way of computing the element size than before, as we would have mixed together
    the size of an element with the strides of the innermost dimension.
    
    llvm-svn: 209691
--
       ABI!).
    
    This implements option 2. The DAG machinery really isn't setup for the
    first (there's a fairly strong assumption that "zeroext" goes to at
    least the smallest register size), and even if it was the resulting
    DAG looks like it would be inferior in many cases.
    
    Theoretically we could add AssertZext nodes in the consumers of
    ABI-passed values too now, but this actually seems to make the code
    worse in practice by making truncation proceed in two steps. The code
    produced is equally valid if we continue to assume only the low bit is
--
    
    llgs and debugserver gdbremote protocol tests now collect $O notification
    output into the context returned from expect_lldb_gdbserver_replay.
    context["O_count"] is an integer indicating the number of $O packets
    collected during the replay, and context["O_content"] contains the
    accumulated hex-decoded text output by the inferior (stdout and stderr).
    
    Modified the $O check test to check the accumulated output rather than
    a direct $O packet.
    
    llvm-svn: 209560
--
Date:   Wed May 21 20:12:01 2014 +0000

    Added tests for q{f,s}ThreadInfo for attached processes.
    
    Added helper methods:
    prep_debug_monitor_and_inferior(): properly handles
    the two cases of running the stub against an inferior process
    launched by the stub, and one attached to by the stub.  See
    docs for function: simplifies test creation for tests that want
    to test the same operations against a launched and attached inferior.
    
    Added the q{f,s}ThreadInfo and $qC response comparison test (verifies
    they both return the same thing) when the process is attached rather
    than launched by the stub.
    
    Modified the previous two tests added to make use of the new
    prep_debug_monitor_and_inferior() facility.
    
    llvm-svn: 209318

commit 9f4674c828c413dd5e481713ebcc0b90b80a94f8
Author: Rui Ueyama <ruiu@google.com>
--

    Added gdb-remote tests for q{f,s}ThreadInfo.
    
    The First test verifies that qThreadInfo queries work for stub-launched processes.
    
    The second test verifies that $qC after stub-launched inferior returns the same
    thread as the qThreadInfo queries.
    
    llvm-svn: 209314

commit 5a1ef9c855e319cd25134ea2779658b155e8038f
--
    ProcessGDBRemote now properly handles X as indication of
    a process exit state.
    
    The @debugserver_test and @lldb_test for $k now properly expects
    an X notification (signal-caused exit) after killing a just-attached
    inferior that was still in the stopped state.
    
    llvm-svn: 209108

commit cc8c96c1335af3c23a78cf3dbc3690316d43abe8
Author: Filipe Cabecinhas <me@filcab.net>
--
Author: Jason Molenda <jmolenda@apple.com>
Date:   Tue May 13 22:02:48 2014 +0000

    Add a new SBThread::SafeToCallFunctions API; this calls over to
    the SystemRuntime to check if a thread will have any problems
    performing an inferior function call so the driver can skip
    making that function call on that thread.  Often the function
    call can be executed on another thread instead.
    <rdar://problem/16777874>
    
    llvm-svn: 208732
--
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Tue May 6 06:15:23 2014 +0000

    gdbremote testing: added regex support to match packets and propagate/test against previously stored matches.
    
    Added a test validating that $qC after an inferior launch via $A
    returns a thread id that an immediately followig $? reports for the
    active thread. This is currently skipped on debugserver (the thread
    ids don't match) and isn't yet implemented in TOT for llgs.
    
    llvm-svn: 208061
--

commit 41c60c818fc42826c2ab4e0d38195bf6df38e70d
Author: Todd Fiala <todd.fiala@gmail.com>
Date:   Tue Apr 29 18:21:07 2014 +0000

    Added gdb remote protocol tests for no output and inferior non-zero exit code.
    
    Tests added for debugserver and lldb-gdbserver.  lldb-gdbserver marked as
    XFAIL on top of tree.
    
    Added build_gdbremote_A_packet test helper to construct a gdbremote A
--

commit ffbafa2af021504d2bdb575b5445e53faf63bb7a
Author: Ben Langmuir <blangmuir@apple.com>
Date:   Wed Apr 23 21:10:46 2014 +0000

    Do not print inferred submodules explicitly in __inferred_module.map
    
    Otherwise including a header in your source file that is not included by
    framework's umbrella header will silently add an empty submodule with that
    name.
    
    is automatically translated to
    @import Foo.NotInModule;
    
    which then would have succeeded because the inferred module map
    contained an empty submodule called NotInModule.
    
    llvm-svn: 207024

commit 4dbd4891c7bdfcecb4933a50ca72285acc238850
--
Author: Lang Hames <lhames@gmail.com>
Date:   Tue Apr 22 12:04:53 2014 +0000

    [X86] Require HasBMI2 for the new BZHI tablegen patterns.
    
    Evidently tablegen doesn't infer this from the HasBMI2 predicate on the BZHI
    instructions. This should fix the recent bot failures.
    
    llvm-svn: 206885

commit 189e7fdcfb7300c989ff261d3d17fef4d30cf059
--

commit 4898cde4e100d65de375ee0bbf19c66061fa4f25
Author: Ben Langmuir <blangmuir@apple.com>
Date:   Mon Apr 21 19:49:57 2014 +0000

    Allow submodule inferrences with a missing umbrella when the module is unavailable
    
    If the module is unavailable because of a missing header, don't diagnose
    a "module * {}" declaration for having a missing umbrella.
    
    llvm-svn: 206776
--
    second time:
    clang -I /path/to/A -I /different/path/to/B ...
    
    will now rebuild A as expected.
    
    * in the case of inferred modules, we use the module map file that
    allowed the inference, not the __inferred_module.map file, since the
    inferred file path is the same for every inferred module.
    
    llvm-svn: 206201

commit 8f80ccc6353f929c9861586b27f165b7ac66273b
Author: Hans Wennborg <hans@hanshq.net>
--
Author: Hal Finkel <hfinkel@anl.gov>
Date:   Mon Mar 24 15:07:28 2014 +0000

    [PowerPC] Mark many instructions as commutative
    
    I'm under the impression that we used to infer the isCommutable flag from the
    instruction-associated pattern. Regardless, we don't seem to do this (at least
    by default) any more. I've gone through all of our instruction definitions, and
    marked as commutative all of those that should be trivial to commute (by
    exchanging the first two operands). There has been special code for the RL*
    instructions, and that's not changed.
--
    When a label is parsed, check if there is type information available for the
    label.  If so, check if the symbol is a function.  If the symbol is a function
    and we are in thumb mode and no explicit thumb_func has been emitted, adjust the
    symbol data to indicate that the function definition is a thumb function.
    
    The application of this inferencing is improved value handling in the object
    file (the required thumb bit is set on symbols which are thumb functions).  It
    also helps improve compatibility with binutils.
    
    The one complication that arises from this handling is the MCAsmStreamer.  The
    default implementation of getOrCreateSymbolData in MCStreamer does not support
--

commit 68ccbe01b0fdb6b2ce3893d851ce225cd869cf0b
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
Date:   Fri Mar 14 02:26:31 2014 +0000

    [Modules] Make sure that the synthesized file "__inferred_module.map" doesn't show up as dependency of a module file.
    
    Follow-up for rdar://15459210
    
    llvm-svn: 203882

--

commit 0d6a1ff23d2106e1348add3ad906c9ba0258998f
Author: Jason Molenda <jmolenda@apple.com>
Date:   Fri Mar 7 23:28:54 2014 +0000

    Fix a small inferior process memory leak in SystemRuntimeMacOSX::PopulatePendingItemsForQueue().
    
    llvm-svn: 203312

commit d33e94295899364dfb7bbb0a130cab5fdfe26abc
Author: Arnold Schwaighofer <aschwaighofer@apple.com>
--
Date:   Fri Mar 7 19:19:56 2014 +0000

    [ADT] Update PointerIntPair to handle pointer types with more than 31 bits free.
    
    Previously, the assertions in PointerIntPair would try to calculate the value
    (1 << NumLowBitsAvailable); the inferred type here is 'int', so if there were
    more than 31 bits available we'd get a shift overflow.
    
    Also, add a rudimentary unit test file for PointerIntPair.
    
    llvm-svn: 203273
--
    all the tests on x86_64 Linux with no failures. I also ran some simple
    tests with 32-bit Linux exe on x86_64 host and 32-bit linux exe on
    i686 32-bit host and these worked fine.
    
    Note (from Todd): the UserData struct in the Linux i386 register
    context (only used by Linux i386 host running Linux 32-bit inferior)
    is out of sync with what shows up in the sys/user.h for an 32-bit
    Linux build (per an earlier change of mine to make it look more like
    x86_64 host running x86 exe). I think we should (1) make i386 Linux
    targets run using the same register context (and correct ones) on i386
    and x86_64 linux hosts if that is possible, and (2) we could use some
--

commit c71f60f4a111630014130a16785080c95444d36e
Author: Ed Maste <emaste@freebsd.org>
Date:   Fri Feb 28 17:13:39 2014 +0000

    Restore signal delivery to the inferior on FreeBSD
    
    This was broken in the threaded inferior implementation for FreeBSD
    (r196787) and caused FreeBSD to resume always with no signal.
    
    llvm-svn: 202513

commit 4c523d3f8d25e033fde4ee4b07cf8aa6a2cfdb94
--
    properly sized a recently.
    
    This change also modifies POSIXThread to create a
    RegisterContextLinux_i386 only when the host is 32-bit; otherwise, it
    uses the RegisterContextLinux_x86_64, which works properly for 32-bit
    and 64-bit inferiors on a 64-bit host.
    
    I tested this debugging a Linux x86 exe on an x86 host (Ubuntu 13.10
    x86), and debugging a Linux x86 exe and a Linux x86-64 exe on an
    x86-64 host (Ubuntu 12.04 LTS).  Those cases all worked.
    
--

commit 2a6c252df2f3bd49a1fb4fc58c4608ccdb6d79a8
Author: Jason Molenda <jmolenda@apple.com>
Date:   Sat Feb 15 00:20:40 2014 +0000

    Add some additional logging to the Mac OS X SystemRuntime.  Fix a bug where lldb could free an inferior's vm_page.
    
    llvm-svn: 201447

commit 92e3aa2622157eef651172996a7c6474bc5ec410
Author: Fariborz Jahanian <fjahanian@apple.com>
--
Author: Ed Maste <emaste@freebsd.org>
Date:   Tue Feb 11 18:28:18 2014 +0000

    Update decorator for FreeBSD failure pr18066
    
    The test expects the inferior to have exited, but it is still stopped.
    
    llvm.org/pr18066
    
    llvm-svn: 201166

--
    Fix for failure to unwind Linux stack frames with call in final position.
    
    Fixes http://llvm.org/bugs/show_bug.cgi?id=18656.
    
    Note this exposes a failure on Linux of
    TestInferiorAssert.test_inferior_asserting_disassemble, similar to how
    it fails on FreeBSD. I'll file a bug for this next. We're now getting
    another frame beyond where we used to prior to this fix, so the fix is
    exposing failures in previosly not-reachable frames.
    
    Much thanks to Jason Molenda, who had much to do with helping figure
--

    [x86] Fix signed relocations for i64i32imm operands
    
    These should end up (in ELF) as R_X86_64_32S relocs, not R_X86_64_32.
    Kill the horrid and incomplete special case and FIXME in
    EncodeInstruction() and set things up so it can infer the signedness
    from the ImmType just like it can the size and whether it's PC-relative.
    
    llvm-svn: 200495

commit 40f08ebece6064c8aa705eca9cc32cd0e1534006
--
Date:   Wed Jan 29 21:31:34 2014 +0000

    llvm-cov: Expect a source file as a positional parameter
    
    Currently, llvm-cov isn't command-line compatible with gcov, which
    accepts a source file name as its first parameter and infers the gcno
    and gcda file names from that. This change keeps our -gcda and -gcno
    options available for convenience in overriding this behaviour, but
    adds the required parameter and inference behaviour as a compatible
    default.
    
    llvm-svn: 200417

commit 0d35ed912ad74b7afb0510777240045a10a46c7f
--
Author: Reid Kleckner <rnk@google.com>
Date:   Tue Jan 28 02:08:22 2014 +0000

    x86: add implicit defs for cpuid
    
    This avoids miscompiling MS inline asm in LLVM where we have to infer
    clobbers.  Test case forthcoming in Clang.
    
    llvm-svn: 200279

commit 4aaba3e2200d91a79735b7d011f4d060d64434c9
--
    with LaunchProcess (). The net effect is that the default process
    monitoring that LaunchProcess () adds will kick in, allowing the
    GDBRemoteCommunicationServer to be able to reap processes started with
    this facility correctly. Later, in the case of lldb-gdbserver, we'll
    also have the proper process monitoring going on to really debug the
    inferior process.
    
    llvm-svn: 200246

commit 92ce6e83fcd95419e4eaeb7fc8c50f4df48c7469
Author: Joerg Sonnenberger <joerg@bec.de>
--
Date:   Mon Jan 27 17:03:57 2014 +0000

    Fix group stop signal handling issue on Linux.
    
    This patch addresses a bug where in a multi-threaded program a new
    signal from the inferior may be received before all group-stop
    messages from an earlier signal have been handled.
    
    Patch by Andrew MacPherson
    
    llvm-svn: 200226
--

commit 7dd218245cedbbc380225964356a0688bf18c2dd
Author: David Woodhouse <dwmw2@infradead.org>
Date:   Mon Jan 20 12:02:31 2014 +0000

    [x86] Infer disassembler mode from SubtargetInfo feature bits
    
    Aside from cleaning up the code, this also adds support for the -code16
    environment and actually enables the MODE_16BIT mode that was previously
    not accessible.
    
--
    built around the entire specified pipeline. This makes the common case
    for tests super easy:
    
      ./bin/opt -passes=instcombine,sroa,gvn
    
    But this won't introduce any of the complexity of the fully inferred old
    system -- we only ever do this for the *entire* argument, and we only
    look at the first pass. If the other passes don't fit in the pass
    manager selected it is a hard error.
    
    The other interesting aspect here is that I'm not relying on any
--
commit 769c04ea359e555bd60ae50763427d645d0a396e
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Tue Dec 17 01:01:33 2013 +0000

    ObjectiveC migrator. Fixes a bug when protocol
    conformance is inferred. // rdar://15515206
    
    llvm-svn: 197448

commit 0caf4fef47e27f8ea13bcaabb9a9969b3234c298
Author: Quentin Colombet <qcolombet@apple.com>
--

commit 49e69ee557ad492d7a36319671f85b88b9f66827
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Thu Dec 12 01:02:00 2013 +0000

    Objective-C migrator: when inferring 'readonly' property of an
    Objective-C object conforming to 'NSCopying' protocol, infer
    a 'copy' property, instead of 'strong'. // rdar://15525937
    
    llvm-svn: 197102

commit e6a877518368174ea3c56016e16ed03dbf15a2e8
--

commit 4f2ecc6177068bd904f3745a4796e3b2c437605c
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
Date:   Tue Dec 10 18:36:49 2013 +0000

    [objcmt] Add a modernization option to infer and suggest designated initializers.
    
    rdar://15509284
    
    llvm-svn: 196943

--

commit 1d981a9606afed98b8f8a918886d01537caa41b3
Author: Ed Maste <emaste@freebsd.org>
Date:   Mon Dec 9 17:27:18 2013 +0000

    test: Update decorators for FreeBSD failures with threaded inferior support
    
    llvm.org/pr18190
    llvm.org/pr18191
    
    llvm-svn: 196792
--

commit 7fd845cc9daef37d0409bd8aa22fa4ae5850b52e
Author: Ed Maste <emaste@freebsd.org>
Date:   Mon Dec 9 15:51:17 2013 +0000

    Threaded inferior support for FreeBSD
    
    Modelled in part on GDBRemoteCommunicationClient.
    
    Review: http://llvm-reviews.chandlerc.com/D2267
    llvm-svn: 196787

commit f369dba051641cd3bb422c95618c8b561f992184
Author: Ed Maste <emaste@freebsd.org>
Date:   Mon Dec 9 15:25:37 2013 +0000

    test: Add annotation for FreeBSD failures w/ threaded inferiors
    
    llvm.org/pr17944
    llvm.org/pr17946
    
    llvm-svn: 196786
--
    A number of tests fail to build on FreeBSD because the test build script
    defaults to libstdc++ for clang.  On FreeBSD the libstdc++ is rather old
    and libc++ should be used instead.
    
    (These tests previously had an @expectedFailureFreeBSD decorator for
    pr16696, the umbrella PR for the lack of threaded inferior support on
    FreeBSD.  The work to add that support will be committed soon.)
    
    llvm-svn: 196101

commit 9e67d594ef393783ac516353dc7722cffa285533
--

commit 1a11b3b001c2633e0395c4da2c794995155c31a4
Author: Rui Ueyama <ruiu@google.com>
Date:   Mon Nov 25 02:00:00 2013 +0000

    [PECOFF] Infer subsystem from the entry point function.
    
    If /subsystem option is not specified, the linker needs to infer it from the
    entry point function. If "main" or "wmain" is defined, it's a console
    application. If "WinMain" or "wWinMain" is defined, it's a GUI application.
    
    llvm-svn: 195592

--
commit d9aef7883dae29c1b1ac2d5ad00372d72ece65ae
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Thu Nov 21 17:49:34 2013 +0000

    ObjectiveC migrator. delegate property must be
    inferred as 'assign', not 'assign' and 'strong'.
    // rdar://15509831
    
    llvm-svn: 195368

commit cf4143b55e881519b06295e6954778d00f949c43
--
commit 54c8eaad902dac61f347aa6c5a4627aac301a9a0
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Thu Nov 21 00:58:17 2013 +0000

    ObjectiveC migrator. use strong instead of
    retain attribute for inferred properties.
    // rdar://15519923
    
    llvm-svn: 195292

commit 0fe676a243dabc20a660f2332d7072f69c664c42
--
commit 2e793d6124e02b9eb12f63140917129ab3dc9dc6
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Nov 13 00:08:36 2013 +0000

    ObjectiveC migrator. Place use of NS_NONATOMIC_IOSONLY
    on inferred property attribute under
     -objcmt-ns-nonatomic-iosonly  option.
    // rdar://15442742
    
    llvm-svn: 194532

--
Author: Jim Ingham <jingham@apple.com>
Date:   Thu Nov 7 00:11:47 2013 +0000

    This patch does a couple of things.
    It completes the job of using EvaluateExpressionOptions consistently throughout
    the inferior function calling mechanism in lldb begun in Greg's patch r194009.
    
    It removes a handful of alternate calls into the ClangUserExpression/ClangFunction/ThreadPlanCallFunction which
    were there for convenience.  Using the EvaluateExpressionOptions removes the need for them.
    
    Using that it gets the --debug option from Greg's patch to work cleanly.
--

commit 071b98edec5606d4eee2eba6f1d9a52051a7d8ed
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Fri Nov 1 00:26:48 2013 +0000

    ObjectiveC migrator. When inferring readwrite property,
    do not remove the setter if its availability differs
    from availability of the getter (which is now turned into
    a property). Otherwise, synthesized setter will
    inherit availability of the property (which is incorrect).
    // rdar://15300059
--
Author: Ed Maste <emaste@freebsd.org>
Date:   Thu Oct 31 17:21:15 2013 +0000

    Tls test fails on FreeBSD due to llvm.org/pr16696
    
    (Threaded inferior debugging not yet available on FreeBSD.)
    
    llvm-svn: 193771

commit d5cc93c3ae76e379cae1c1e3a4e875a320bf4e6c
Author: Alexey Samsonov <samsonov@google.com>
--
    FileManager), but will be unable to get the content from the
    SourceManager (as ModuleMap previously created its own SourceManager).
    
    Two problems needed to be fixed which this patch exposed:
    
    1. Storing the inferred module map
    When writing out a module, the ASTWriter stores the names of the files
    in the main source manager; when loading the AST again, the ASTReader
    errs out if such a file is found missing, unless it is overridden.
    Previously CompilerInstance's compileModule method would store the
    inferred module map to a temporary file; the problem with this approach
    is that now that the module map is handled by the main source manager,
    the ASTWriter stores the name of the temporary module map as source to
    the compilation; later, when the module is loaded, the temporary file
    has already been deleted, which leads to a compilation error. This patch
    changes the inferred module map to instead inject a virtual file into
    the source manager. This both saves some disk IO, and works with how the
    ASTWriter/ASTReader handle overridden source files.
    
    2. Changing test input in test/Modules/Inputs/*
    Now that the module map file is handled by the main source manager, the
--

commit de79e816863b1c026dac1ec329cda30ebabf47a5
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Thu Oct 17 22:23:32 2013 +0000

    ObjectiveC migrator. In infering NS_ENUM/NS_OPTIONS
    macros, prefer the typedef immediately following the
    enum declaration to the one preceeding it.
    // rdar://15200915
    
    llvm-svn: 192927
--
    
    - Add support for the DW_OP_GNU_push_tls_address DWARF opcode, as generated by gcc and recent versions of clang. Earlier versions of clang (such as 3.2, which is default on Ubuntu right now) do not generate TLS debug info correctly so can not be supported here.
    
    - Understand the format of the pthread DTV block. This is where it gets tricky. We have three basic options here:
    
      1) Call "dlinfo" or "__tls_get_addr" on the inferior and ask it directly. However this won't work on core dumps, and generally speaking it's not a good idea for the debugger to call functions itself, as it has the potential to not work depending on the state of the target.
    
      2) Use libthread_db. This is what GDB does. However this option requires having a version of libthread_db on the host cross-compiled for each potential target. This places a large burden on the user, and would make it very hard to cross-debug from Windows to Linux, for example. Trying to build a library intended exclusively for one OS on a different one is not pleasant. GDB sidesteps the problem and asks the user to figure it out.
    
      3) Parse the DTV structure ourselves. On initial inspection this seems to be a bad option, as the DTV structure (the format used by the runtime to manage TLS data) is not in fact a kernel data structure, it is implemented entirely in useerland in libc. Therefore the layout of it's fields are version and OS dependent, and are not standardized.
    
--
commit 1b6678767d9cfe7a33db98e586b5559394af3884
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Oct 16 22:35:19 2013 +0000

    ObjectiveC migrator. Remove blank lines
    when inferring property from setter/getter
    methods. // rdar://15200949
    
    llvm-svn: 192853

commit b822cffad2b9f1f019e82146eb1c5cd8e68d7315
--
commit 78bff0505e01393f1996d614e8e1d1d84c63544a
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Oct 16 20:44:26 2013 +0000

    ObjectiveC migrator. Don't add 'assign' for
    inferred properties when type is scalar and
    assumed to be 'assign. // rdar://15231241
    
    llvm-svn: 192841

commit 920bb2a758bf9562de9a422f703c6d9aa7db8eac
--
commit 4a8865b14546831f77fac58b9ea82df31ef3e979
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Oct 16 19:48:23 2013 +0000

    ObjectiveC migrator. 'atomic' is the default attribute.
    Don't add it to inferred property. // rdar://14988132
    
    llvm-svn: 192834

commit 074c314ea07d8e939da49c5fced0e5b1da30f208
Author: Sean Callanan <scallanan@apple.com>
--

    r192075 broke the buildbot at
    
        http://lab.llvm.org:8013/builders/libcxx_clang-x86_64-darwin11-RA
    
    lit.py: <string>:230: note: inferred use_system_lib as: False
    lit.py: <string>:247: fatal: C++ ABI setting None unsupported for tests
    
    cxx_abi is geting set to None, and the lit script errors out shortly after
    that.  This patch changes the default of cxx_abi from None to 'libcxxabi'.
    This is likely not the right way to fix this problem.  However it gets the
--
commit 7c87b43d28f134f3902261786a62f309e99538c4
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Thu Oct 10 18:23:13 2013 +0000

    ObjectiveC migrator: For 'default' and 'shared' family of
    methods, infer their self's type as their result type.
    // rdar://15145218
    
    llvm-svn: 192377

commit 9b971f95909034bb380b131996650c5235685100
--
commit 20a1124ce58bd1d8c6b88cd19cea68f2e020f6ad
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Oct 9 19:06:08 2013 +0000

    ObjectiveC migrator. Introduce a new objcmt-atomic-property option
    and use it to infer all properties as 'atomic'.
    // rdar://14988132
    
    llvm-svn: 192317

commit d39827d4a40e480e1f4d282b190d0e78fd50ba20
--
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Oct 9 17:37:28 2013 +0000

    ObjectiveC migrator. Introduce a new print policy for
    suppression of strong lifetime qualifiers when
    inferring property. // rdar://15082812
    
    llvm-svn: 192305

commit a40c5263edbd0a834ae88d5e5c6244aa111c1fb1
Author: Bill Wendling <isanbard@gmail.com>
--

commit 3c593d63a1d0d750ddbec841ff96fcbd2906b18a
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Tue Oct 8 21:32:16 2013 +0000

    ObjectiveC migrator: Add support for inferring
    properties of function pointer type.
    // rdar://15082812
    
    llvm-svn: 192237

--

commit 02461d02186edc0e7a9c23817ac3da235b6a488d
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Tue Oct 8 20:14:24 2013 +0000

    ObjectiveC migration. Add support for inferring
    properties of block pointer types. Also, remove
    strong lifetime attribute from property type
    in this migration. This is wip.
    // rdar://15082818
    
--
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Mon Oct 7 20:41:53 2013 +0000

    ObjectiveC migrator: A typical implementation of
    'default' methods in Foundation does not
    infer 'instancetype' for methods' result type.
    // rdar://15145218
    
    llvm-svn: 192129

commit b8b41d3ea4445c9d3d4e0cd7c9b6a11c6ce1640a
--

commit 5d783df5f7224225fa0f1f0810eaec5d5555acf8
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Fri Sep 27 22:55:54 2013 +0000

    ObjectiveC migrator. Infer property from getters only
    if property name is a valid identifier in the underlying
    language. // rdar://15044184
    
    llvm-svn: 191584

--

commit cc64cc1773f2cf08e1c321a59659a9ccd2206338
Author: Matt Kopec <Matt.Kopec@intel.com>
Date:   Thu Sep 26 20:54:17 2013 +0000

    Fix the thread jump test case for 32-bit inferiors. A jump was going back to a function call using a source line number. However, the parameters being passed to the function were setup before the instruction we jumped to. In other words, the source line was associated with assembly after the function parameters had been setup for the function to be called.
    
    llvm-svn: 191457

commit bb5c5f8289f24f4befbe76fde9c349dc7980989d
Author: Carlo Kok <ck@remobjects.com>
--

commit 8b5773053b7f133a7d2a9ba775a16a8f7c0c13ec
Author: Ashok Thirumurthi <ashok.thirumurthi@intel.com>
Date:   Thu Sep 26 14:35:59 2013 +0000

    Fix the partial backtrace in a recursive inferior compiled with -fomit-frame-pointer.
    
    - Removes the block in UnwindLLDB::AddOneMoreFrame that tests for a bad stack setup,
    since it is neither correct (tests the FP GPR), complete (doesn't consider multi-frame
    cycles), nor reachable (the construction of RegisterContextLLDB will fail in the case
    where either of the two (why just two?) previous frames have the same canonical frame
--

commit bb82b84c34344ee49365adad42d6be6a7a6b3dfd
Author: Ashok Thirumurthi <ashok.thirumurthi@intel.com>
Date:   Wed Sep 25 15:30:14 2013 +0000

    Cache and restore the frame-format, so that test_set_frame_format doesn't modify the default, as required for TestInferiorAssert.py.
    
    - Also fixes this test case to set/verify a non-default frame-format and explain the intent.
    
    llvm-svn: 191378

--

commit 02bdb16524b952ae4ef459e066e29ee2232670df
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Mon Sep 23 20:27:06 2013 +0000

    ObjectiveC migrator: Infer NS_OPTIONS when if there is at
    least one hex enumerator, all others are also
    hex enumerator (0 enumerator is excepted).
    // rdar://15044304
    
    llvm-svn: 191222
--

commit e106cded612b974ba81f83694b2bf06402a6710e
Author: Daniel Malea <daniel.malea@intel.com>
Date:   Thu Sep 19 22:41:36 2013 +0000

    Disable TestInferiorAssert (due to llvm.org/pr17276)
    - last remaining failure on the clang buildbot
    
    llvm-svn: 191047

commit aee2ebe5a5381a9d669fb33652501705576fd81d
--

commit 1c900bcf26777db2cb3cb6e3f552a21e0aa3acd6
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Sep 18 20:35:47 2013 +0000

    ObjectiveC migrator: For consistency, also infer
    'instancetype' for known family of methods
    with related result type; such as 'init'
    methods. // rdar://14987948
    
    llvm-svn: 190956
--

commit 2ba62a72061b64ead359594672e85412024daa37
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Sep 18 17:22:25 2013 +0000

    ObjectiveC migrator: Infer property in the presense
    of methods annotated with attributes.
    // rdar://14987909
    
    llvm-svn: 190947

--
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Sep 18 15:43:52 2013 +0000

    ObjectiveC migrator: placing another check for
    'deprecated' container before doing the 'instancetype'
    inference.
    
    llvm-svn: 190943

commit c258b3010f50cea654f52fb03ce274d3ebe6538d
Author: Michael Sartain <mikesart@valvesoftware.com>
--

commit 6e1798e36aba89cd56c4bbbd1ae3e3fd83ea9bc8
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Tue Sep 17 23:32:51 2013 +0000

    ObjectiveC migrator. infer NS_OPTIONS correctly in the
    presense of parenthesized enumerator initializers.
    
    llvm-svn: 190901

commit cfe210997879cb7bd3b9835ea4931c6267286349
--

commit f6c6505eaa7a9dfb37cd57f9c6d0349829557a99
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Tue Sep 17 22:41:25 2013 +0000

    ObjectiveC migrator: Don't infer property from
    'deprected' setters either. // rdar://14989365
    
    llvm-svn: 190894

commit 38820972e9826596f62f7daaa8ee2241651d3b0b
--

commit 4c3d9c5e24200e026168d3ff8a68a85f10d2877f
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Tue Sep 17 19:38:55 2013 +0000

    ObjectiveC migrator: Don't infer a property from isXXX method
    of retainable object (readonly or otherwise).
    
    llvm-svn: 190881

commit 85230d50f2ebe14b4c7cffb2c4d213398baed1cf
--

commit 92f7242a56ef524ceb3530dd3bcdc3e60bf4412f
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Tue Sep 17 19:00:30 2013 +0000

    ObjectiveC migrator. Infer property in categories
    declared as getter with or without setter method.
    // rdar://15010020
    
    llvm-svn: 190878

--
Date:   Tue Sep 17 13:44:39 2013 +0000

    Add llvm.x86.* intrinsics for Intel SHA Extensions
    
    Add llvm.x86.* intrinsics for all of the Intel SHA Extensions instructions, as
    well as tests. Also remove mayLoad and hasSideEffects, which can be inferred
    from the instruction patterns.
    
    llvm-svn: 190864

commit bc86efb89d13ef36a76b00e59666e1ce8be25ed0
--
Date:   Mon Sep 16 22:00:17 2013 +0000

    Fixes symbol resolution for a function with a tail call because the PC
    for the frame is one past the address range of the calling function.
    - Lowers the fix from RegisterContextLLDB for use with disassembly
    - Fixes one of three issues in the disassembly test in TestInferiorAssert.py
    
    Also adds documentation that explains the resolution depths and interface.
    
    Note: This change affects the resolution scope for eSymbolContextFunction
    without impacting the performance of eSymbolContextSymbol.
--
    test: Update FreeBSD failure decorators
    
    llvm.org/pr15261 missing size for static arrays
    llvm.org/pr15278 expressions generating signals
    llvm.org/pr15824 thread states aren't properly maintained
    llvm.org/pr16696 threaded inferior debugging not yet on FreeBSD
    llvm.org/pr17214 inline stepping fails on FreeBSD
    llvm.org/pr17225 Clang assertion failure
    llvm.org/pr17226 frame info lost after failed expression evaluation
    llvm.org/pr17228 test timeout
    
--

commit 34fea36340da2cbfbbb4fab3d5b86745eef93c46
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Sep 11 18:27:16 2013 +0000

    ObjectiveC migrator. Modify inferred property name
    such that it does not lower case the staring property
    name if getter name (after "get" prefix) starts with
    two upper case letters.
    
    llvm-svn: 190539
--
commit ca39960f31794edb380c4723e34e2de919e3f4f6
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Sep 11 17:05:15 2013 +0000

    ObjectiveC migrator. methods which look like a getter and
    start with "get" are inferreed as a readonly properties.
    
    llvm-svn: 190532

commit 60ac1269c639a5969237ba496a3544c9175157f6
Author: Serge Pavlov <sepavloff@gmail.com>
--

commit c02bfb9a85465a58730ef15a66e85aa7a627762e
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Tue Sep 10 18:39:32 2013 +0000

    ObjectiveC migrator: rename inferred isXXX property,
    with a suitable 'getter' attribute.
    
    llvm-svn: 190420

commit bac9d13647b5a875f1a564703bca70ab59f49726
--

commit 9d5fffb425dbb3b8c623a8382da7c6ad352d1fdb
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Mon Sep 9 23:56:14 2013 +0000

    ObjectiveC migrator. Do not infer NS_RETURNS_INNER_POINTER
    annotation on methods which return typedef of pointer to
    an incomplete struct type.
    
    llvm-svn: 190372

--

commit 215f96c084a2456ba9cc8717cb5758b5f04eef15
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Fri Sep 6 23:45:20 2013 +0000

    ObjectiveC migrator: When inferring a property,
    preserve getter's attribute. Also, do not attach
    an inferred NS_RETURNS_INNER_POINTER to the inferred
    property (it is illegal).
    
    llvm-svn: 190223

commit fdd91c92d0c9e47df97c2244831a43f05197e342
--
commit c24879e2de0e35b2f46bfd8068c323b7070737af
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Thu Sep 5 23:04:33 2013 +0000

    ObjectiveC migrator: tighten the rules for when
    inferring NS_RETURNS_RETAINED, etc., return annotations.
    Do not infer if these annotations are implicit
    from the naming convention. Also add inference for
    NS_CONSUMES_SELF annotation.
    
    llvm-svn: 190106

commit 53d0b492f57b3f7b28858c4d9c299ee8c72f9a02
--

commit 7d2abdf017b1d4573075ba75419f6fc62c415e3d
Author: Andrew Kaylor <andrew.kaylor@intel.com>
Date:   Wed Sep 4 16:06:04 2013 +0000

    Fixing a problem with inferior exit caused by signal
    
    llvm-svn: 189953

commit 9aa60fd6f807baa45f535f64ac0fde8542336e85
Author: Alexander Kornienko <alexfh@google.com>
--

commit ff3476e4999948bd8f986c284d1eba6e2e118ba9
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Fri Aug 30 17:46:01 2013 +0000

    ObjectiveC migrator: infer NS_ENUM even when user
    specified NSUInteger as the followup typedef.
    With this change, NS_OPTIONS is only inferred
    based on looking up how enumerators are speficied
    (if they her hexadecimal, power of 2, or have
     bitwise constant expressions).
    
    llvm-svn: 189682
--
commit a23f4fb5c90624ce66e276512ca4577a72a9527f
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Fri Aug 30 00:10:37 2013 +0000

    ObjectiveC migrator: User of hexadecimal enumerator
    should infer migration to NS_OPTIONS.
    
    llvm-svn: 189628

commit 676c404dec0c28651b1c568496f8fc1ed7231fa0
Author: Richard Smith <richard-llvm@metafoo.co.uk>
--

commit 55d6e6c93057ed7525d64e76a25a6be883ddbd70
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Aug 28 23:22:46 2013 +0000

    ObjectiveC migrator. This patch infers readonly properties for no-parameter
    instance methods returning non-void. This will be quite noisy. So, it is
    placed under a new migrator flag -objcmt-migrate-readonly-property.
    
    llvm-svn: 189537

--

commit 1a26c209f61b4b16aa4106185d87951b04518c6d
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Wed Aug 28 20:49:58 2013 +0000

    For methods where clang automatically infers instancetype from the selector
    (e.g., all -init* methods), no need to suggest "instancetype" because it
    is redundant.
    
    llvm-svn: 189514

--
    Makes functions with implicit calling convention compatible with
    function types with a matching explicit calling convention.  This fixes
    things like calls to qsort(), which has an explicit __cdecl attribute on
    the comparator in Windows headers.
    
    Clang will now infer the calling convention from the declarator.  There
    are two cases when the CC must be adjusted during redeclaration:
    1. When defining a non-inline static method.
    2. When redeclaring a function with an implicit or mismatched
    convention.
    
--
Author: Tom Stellard <thomas.stellard@amd.com>
Date:   Wed Aug 14 23:24:24 2013 +0000

    R600/SI: Choose the correct MOV instruction for copying immediates
    
    The instruction selector will now try to infer the destination register
    so it can decided whether to use V_MOV_B32 or S_MOV_B32 when copying
    immediates.
    
    llvm-svn: 188426

--

commit 21585fd9c15f2d95f557dfdaa1f2a54b5f313731
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Fri Aug 9 19:33:32 2013 +0000

    Add a overload to CostTable which allows it to infer the size of the table.
    
    Use it to avoid repeating ourselves too often. Also store MVT::SimpleValueType
    in the TTI tables so they can be statically initialized, MVT's constructors
    create bloated initialization code otherwise.
    
--
Author: Peter Collingbourne <peter@pcc.me.uk>
Date:   Fri Aug 2 22:34:30 2013 +0000

    Add a AttributeSetImpl::dump function.
    
    This is for the benefit of those of us with inferior debuggers which
    do not permit member function calls on value types.
    
    llvm-svn: 187685

commit 3bfc35e26a814196dd774abacf9fce80a5abf3ff
--
Author: Ed Maste <emaste@freebsd.org>
Date:   Mon Jul 29 20:58:06 2013 +0000

    Use flag instead of rwlock state to track process running state
    
    LLDB requires that the inferior process be stopped before, and remain
    stopped during, certain accesses to process state.
    
    Previously this was achieved with a POSIX rwlock which had a write lock
    taken for the duration that the process was running, and released when
    the process was stopped.  Any access to process state was performed with
--
Author: Ed Maste <emaste@freebsd.org>
Date:   Thu Jul 25 17:17:15 2013 +0000

    tests: Mark expected FreeBSD failures due to pr16696
    
    Live debugging for threaded inferiors is not yet implemented on FreeBSD
    
    llvm-svn: 187131

commit cb9afe9ad78d36ad8aa57965aa9b3f8f4f9c4baa
Author: Rafael Espindola <rafael.espindola@gmail.com>
--
Author: Ed Maste <emaste@freebsd.org>
Date:   Wed Jul 24 21:09:24 2013 +0000

    tests: Mark expected FreeBSD failures due to pr16696
    
    Live debugging of threaded inferiors is currently unimplemented for
    FreeBSD.
    
    llvm-svn: 187077

commit 5e5e297d160b7fa065421d792bda331c29b85dbc
--

commit c3ae8e63f9fb44c65b356efe07350cacd2bb9f04
Author: Ashok Thirumurthi <ashok.thirumurthi@intel.com>
Date:   Mon Jul 15 15:05:33 2013 +0000

    Adds a passing test for step-over and step-out when the inferior is about to call longjmp (non-local goto) in a single-threaded inferior.
    
    llvm-svn: 186325

commit 49a9448d957ece632a619d91221c82516233b75b
Author: Daniel Jasper <djasper@google.com>
--
Author: Ed Maste <emaste@freebsd.org>
Date:   Thu Jul 11 14:12:16 2013 +0000

    Add stub GetThreadName for FreeBSD, missed in r186033.
    
    On FreeBSD inferior thread names are available through ptrace, so we won't
    use Host::GetThreadName anyway.
    
    llvm-svn: 186086

commit 185de2499b9ff5cf0fa9df3010565373a4089cb8
--

commit fb6ab540008a418aaadd929ae0e5a6e41c80d324
Author: Matt Kopec <Matt.Kopec@intel.com>
Date:   Wed Jul 10 20:53:11 2013 +0000

    Add support for listing inferior thread names on Linux.
    
    llvm-svn: 186033

commit 10947502e5bf95be7a8438d3beb74c034c1419b2
Author: Stephen Lin <stephenwlin@gmail.com>
--
Date:   Tue Jul 9 17:36:18 2013 +0000

    Cleanup in TestConcurrentEvents.py
    - re-enable tests fixed by Matt's commit this morning (addressed llvm.org/pr16567)
    - disabled tests affected by new bug llvm.org/pr16575
    - removed some commented out code in inferior
    
    llvm-svn: 185951

commit dbdeb153d8f5817d49eb3d95709ec20088e9fc95
Author: Howard Hinnant <hhinnant@apple.com>
--

commit b3d41a278b9aa6d4601111a81556ca2c30e694f4
Author: Daniel Malea <daniel.malea@intel.com>
Date:   Tue Jul 9 00:08:01 2013 +0000

    Add TestConcurrentEvents test for LLDB's handling of inferior threads
    - Test verifies LLDB's handling of inferiors with threads that: hit breakpoints,
      modfiy variables that have watchpoints set, generate user signals, and crash.
    - Add a few "stress tests" (with ~100 threads) -- run these with "-l" dotest.py
      flag.
    - Fix stop_reason_to_str helper in lldbutil to handle eStopReasonThreadExited.
    - Add sort_stopped_threads helper to lldbutil to separate thread lists based
--
Author: Ed Maste <emaste@freebsd.org>
Date:   Tue Jul 2 16:45:16 2013 +0000

    Sync parts of FreeBSD Process plugin with Linux
    
    * Use PseudoTerminal to fix stdio handling / passthrough to the inferior
      process.
    * Add log messages equivalent to the Linux ones.
    * Port changes relating to process creation / termination.
    
    This revision contains changes equivalent to (parts of) SVN revisions
--

commit 7a32393bcf064c3ef019dc15a196bd18649d7fc4
Author: Jason Molenda <jmolenda@apple.com>
Date:   Tue Jun 25 06:42:09 2013 +0000

    If debugserver fails to interrogate the inferior process CPU type
    for any reason, use debugserver own's cputype as a best guess when
    we reply to the debugger's qProcessInfo packet or when initializing
    our register tables.
    <rdar://problem/13406879>
    
--
Date:   Tue Jun 11 22:06:06 2013 +0000

    <rdar://problem/13646047>
    
    Providing a Python helper SBData.CreateDataFromInt() to make an SBData out of a single integer number
    It tries to use the current target, if any, for endianness and pointer size, and it picks a reasonable size on your behalf - if there is no way it can infer anything reasonable it essentially picks a 64-bit Mac as the reference model
    
    llvm-svn: 183793

commit bc8fc0f5e0c00d2d09840c615b145e2e2ab35fb7
Author: Greg Clayton <gclayton@apple.com>
--
Author: Enrico Granata <egranata@apple.com>
Date:   Thu Jun 6 22:23:02 2013 +0000

    <rdar://problem/14083928>
    
    Making sure that if you invoke LLDB as lldb ./someBinary you can then launch the inferior with process launch —tty
    
    llvm-svn: 183453

commit d3480f585173a89dbc0fe1f8a30162fb54f4a447
Author: Jim Ingham <jingham@apple.com>
--
commit e244ceec2e365b3a9bc0c1ea6585977615885bd8
Author: Ashok Thirumurthi <ashok.thirumurthi@intel.com>
Date:   Thu Jun 6 19:22:05 2013 +0000

    Adding a test case for pr15415 - partial backtrace with -fomit-frame-pointer
    that is patterned after its parent TestInferiorCrashing.py.
    
    - The xfail decorator limits the xfail to tool-chains that support this compiler option.
    - Included a TODO concerning the platform-specific behavior when 'next' is issued after a crash.
    - Toggling -fomit-frame-pointer results in an xpass as mentioned in pr15415.
    
--
    [analyzer; new edges] Don't eliminate subexpr edge cycles if the line is long.
    
    Specifically, if the line is over 80 characters, or if the top-level
    statement spans mulitple lines, we should preserve sub-expression edges
    even if they form a simple cycle as described in the last commit, because
    it's harder to infer what's going on than it is for shorter lines.
    
    llvm-svn: 183163

commit 8c54b44fb3cb5c0e252ddd3ba7136a916f6ed3bf
Author: Jordan Rose <jordan_rose@apple.com>
--

commit 6f961239ae62bbefe9370b1b99322e1e7b3f7b4a
Author: Matt Kopec <Matt.Kopec@intel.com>
Date:   Mon Jun 3 17:40:20 2013 +0000

    Fix setting of watchpoints on inferior thread creation for Linux.
    
    llvm-svn: 183139

commit 94593ee8c378b37d145066a1ec7361917de77983
Author: Tom Stellard <thomas.stellard@amd.com>
--

commit 085d6cec1a5db8778998876aed46fc0cdcc222f1
Author: Matt Kopec <Matt.Kopec@intel.com>
Date:   Fri May 31 22:00:07 2013 +0000

    Add ability to attach/detach to multi-threaded inferiors on Linux.
    All running threads will be detected and stopped on attach and all threads get resumed on detach.
    
    llvm-svn: 183049

commit deac9ac54687adddce2eb852e7fbe5f981273afb
--

commit 93132f504f0d29ef1e1d90360977aa31c548d28e
Author: Andrew Kaylor <andrew.kaylor@intel.com>
Date:   Tue May 28 23:04:25 2013 +0000

    Adding support for stopping all threads of multithreaded inferiors on Linux.  Also adding multithreaded test cases.
    
    llvm-svn: 182809

commit 6477e97af73a6bc036888d68b79d919f8b11cd2a
Author: Anna Zaks <ganna@apple.com>
--
commit a360d7e7a322bf8478f0a0c6f071483e8d2d189b
Author: Matt Kopec <Matt.Kopec@intel.com>
Date:   Fri May 17 19:27:47 2013 +0000

    ProcessMonitor improvements for Linux.
    -Remove tracing of fork/vfork until we add support for tracing inferiors' children on Linux.
    -Add trace exec option for ptrace so that we don't receive legacy SIGTRAP signals on execve calls.
    -Add handling of SIGCHLD sent by kernel (for now, deliver the signal to the inferior).
    
    llvm-svn: 182153

commit 21b16cc752a3a344a1e9c9620277ed2965381f8d
Author: Daniel Malea <daniel.malea@intel.com>
--

commit b4e5134ff827baddac72c333e004ce5a640b811f
Author: Ashok Thirumurthi <ashok.thirumurthi@intel.com>
Date:   Fri May 17 15:35:15 2013 +0000

    Adds a test case for bugzilla #15671 patterned after TestInferiorCrashing.py.
    
    - On Linux, the partial back-trace after an assert can cause the basic test to fail as discussed on lldb-dev.
    - Uses SBFrame to walk up the stack to the assert site and tests expression evaluation of locals, globals and arguments.
    
    Thanks to Daniel for review and testing on OS/X.
--
    an ad hoc fashion previously, and then playing whack-a-mole whenever we found a place where we should
    have been doing this but weren't.  Really, it doesn't make sense to be poking at SBValues when the target
    is running, the dynamic and synthetic values can't really be computed, and the underlying memory may be
    incoherent.
    
    <rdar://problem/13819378> Sometimes when stepping fast, my inferior is killed by debugserver
    
    llvm-svn: 181863

commit 09cee97270bf54ea880f148343e097d0dda72a1d
Author: Arnold Schwaighofer <aschwaighofer@apple.com>
--

commit b5209bd8750ccf1b47ef2678df3ebe1ebdd67a15
Author: Ashok Thirumurthi <ashok.thirumurthi@intel.com>
Date:   Tue May 14 13:34:25 2013 +0000

    Avoid $rax for 32-bit inferiors to fix a failing i386 test on the darwin buildbots.
    
    llvm-svn: 181789

commit b33790d898e7c624874277b7bb796936b98efbd7
Author: Duncan Sands <baldrick@free.fr>
--

commit d4dc57930418dc32258f14503dd8b5ea1e2055d5
Author: Andrew Kaylor <andrew.kaylor@intel.com>
Date:   Mon May 13 23:47:25 2013 +0000

    Adding new test cases for inferior crashing.
    
    llvm-svn: 181742

commit 201284a8d3096078e74c14cc6352e2dfda27cbad
Author: Matt Kopec <Matt.Kopec@intel.com>
--
commit 083fcdb41448362b803c47fe85dfeb830d25220c
Author: Enrico Granata <egranata@apple.com>
Date:   Thu May 9 01:32:24 2013 +0000

    Providing a more interesting command template for LLDB
    This one actually exploits the SB API to obtain information about your inferior process
    
    llvm-svn: 181500

commit 04b2bfa3a965a66d864e51bf388979a8d2955851
Author: Sean Callanan <scallanan@apple.com>
--

commit 1b4259b53b24d42552f1242a80b07ddf12203940
Author: John McCall <rjmccall@apple.com>
Date:   Wed May 8 03:34:22 2013 +0000

    In block enum-return inference, don't die on loads of enum lvalues.
    
    More of rdar://13200889.
    
    llvm-svn: 181390

--
    Fixed LLDB to be able to correctly parse template parameters that have no name and no type. This can be triggered by the following LLVM/Clang code:
    
    template <typename T, typename = void>
    class SmallVectorTemplateCommon : public SmallVectorBase {
    
    The “typename = void” was emitting DWARF with an empty DW_AT_name and no DW_AT_type. We now correctly infer that no DW_AT_type means “void” and that an empty name is ok.
    
    This means you can now call functions on things that inherit from SmallVectorTemplateCommon.
    
    llvm-svn: 180155

--

commit 8971be89bb033d0c31a2af01708274a27028df2e
Author: Ashok Thirumurthi <ashok.thirumurthi@intel.com>
Date:   Thu Apr 18 20:11:55 2013 +0000

    Added unit tests for register read (should pass) and the expression interpreter (xfail) after the inferior has crashed.
    - Thanks to Samuel Jacob for the related reproducer.
    
    Reviewed by: Daniel Malea.
    
    llvm-svn: 179788
--
Date:   Wed Apr 17 18:03:48 2013 +0000

    [analyzer] Don't warn for returning void expressions in void blocks.
    
    This was slightly tricky because BlockDecls don't currently store an
    inferred return type. However, we can rely on the fact that blocks with
    inferred return types will have return statements that match the inferred
    type.
    
    <rdar://problem/13665798>
    
    llvm-svn: 179699
--

commit c9cb7d2462d9e849cd6bc80889637ce2b7b31706
Author: Jason Molenda <jmolenda@apple.com>
Date:   Tue Apr 16 21:42:58 2013 +0000

    Add warning messages for the cases where the inferior process shared cache
    differs from lldb's own shared cache, and where the inferior process shared
    cache does not match up with the on-disk shared cache file.
    
    Simplify the code where lldb gets its own shared cache uuid a little bit.
    
    llvm-svn: 179633
--
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Sun Apr 14 04:35:19 2013 +0000

    Use target flags for printing SPARC asm operands.
    
    64-bit code models need multiple relocations that can't be inferred from
    the opcode like they can in 32-bit code.
    
    llvm-svn: 179472

commit e0fc832b77c77750a4a98cb6ff2c3c383c60f5ef
--

commit 54d770cb1fedf23466eb75e7f34fa561e8d63d23
Author: Peter Collingbourne <peter@pcc.me.uk>
Date:   Tue Apr 9 04:35:11 2013 +0000

    If the user requested a zero-base-shadow sanitizer, infer -pie and -fPIC when appropriate.
    
    Differential Revision: http://llvm-reviews.chandlerc.com/D502
    
    llvm-svn: 179082

--
    We are going to use the same registers for 32-bit and 64-bit values, but
    in two different register classes. The I64Regs register class has a
    larger spill size and alignment.
    
    The addition of an i64 register class confuses TableGen's type
    inference, so it is necessary to clarify the type of some immediates and
    the G0 register.
    
    In 64-bit mode, pointers are i64 and should use the I64Regs register
    class. Implement getPointerRegClass() to dynamically provide the pointer
    register class depending on the subtarget. Use ptr_rc and iPTR for
--
    patterns:
    
      (sext_inreg i32:$src, i16)
    
    In a named leaf node like i32:$src, the value type simply provides the
    type of the node directly. This simplifies type inference a lot compared
    to the current practice of specifiying types indirectly with register
    classes.
    
    As an unnamed leaf node, like i16 above, the value type represents
    itself as an MVT::Other immediate.
--
commit 6566d4320731ff2b0693c155c3ed146748e3e499
Author: Jason Molenda <jmolenda@apple.com>
Date:   Sat Mar 23 05:35:57 2013 +0000

    Add two additional DNBLog's in places where we're about to kill
    off the inferior process so we stand a better chance of understanding
    what caused us to send a PT_KILL.
    <rdar://problem/12720340>
    
    llvm-svn: 177817

--

commit 6b6a161ccfe252b6c167b3a580b42aea0c4e10ab
Author: Meador Inge <meadori@codesourcery.com>
Date:   Thu Mar 21 00:55:59 2013 +0000

    Move library call prototype attribute inference to functionattrs
    
    The simplify-libcalls pass implemented a doInitialization hook to infer
    function prototype attributes for well-known functions.  Given that the
    simplify-libcalls pass is going away *and* that the functionattrs pass
    is already in place to deduce function attributes, I am moving this logic
    to the functionattrs pass.  This approach was discussed during patch
    review:
--

commit 097cd6262df477a61752bb0e96b3e93df93c1430
Author: Matt Kopec <Matt.Kopec@intel.com>
Date:   Mon Mar 11 22:31:31 2013 +0000

    Change Linux/POSIX to output inferior output in realtime.
    
    llvm-svn: 176833

commit 05e2aaadae63a2fa74023dcf5c657902346c9036
Author: Fariborz Jahanian <fjahanian@apple.com>
--

commit e4c11cc7e5309aa8c75052edabd2f6095bc0ab40
Author: John McCall <rjmccall@apple.com>
Date:   Sat Mar 9 00:54:31 2013 +0000

    Adjust the special non-C++ enum block return type inference
    so that it looks through certain syntactic forms and applies
    even if normal inference would have succeeded.
    
    There is potential for source incompatibility from this
    change, but overall we feel that it produces a much
    cleaner and more defensible result, and the block
    compatibility rules should curb a lot of the potential
--
    This is separate from the LLDB testsuite in test/ in that:
    a) this uses C++ instead of Python to avoid measures being affected by SWIG
    b) this is in very early development and needs lots of tweaking before it can be considered functionally complete
    c) this is not meant to test correctness but to help catch performance regressions
    
    There is a sample application built against the library (in darwin/sketch) that uses the famous sample app Sketch as an inferior to measure certain basic parameters of LLDB's behavior.
    The resulting output is a PLIST much like the following:
    
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
--

commit 3041286f64b0cf5a9e890af6dbec91d7c8c5807f
Author: Matt Kopec <Matt.Kopec@intel.com>
Date:   Tue Mar 5 17:23:57 2013 +0000

    Add support on POSIX to determine if an inferior has changed while debugging it.
    
    llvm-svn: 176492

commit af269a8b44d3ac55e63c3aef2d090c92f1dd1102
Author: Arnold Schwaighofer <aschwaighofer@apple.com>
--

commit ba342723214c76389ad7313728a1a330b9fc927e
Author: Anna Zaks <ganna@apple.com>
Date:   Mon Feb 25 22:10:34 2013 +0000

    [analyzer] Restrict ObjC type inference to methods that have related result type.
    
    This addresses a case when we inline a wrong method due to incorrect
    dynamic type inference. Specifically, when user code contains a method from init
    family, which creates an instance of another class.
    
    Use hasRelatedResultType() to find out if our inference rules should be triggered.
    
    llvm-svn: 176054

commit 0adc042392028828f6106cf2c1494db8ecfb7ced
Author: Chad Rosier <mcrosier@apple.com>
--

commit 951462911d7adfd3688b88bc3ed2e740a30b8f04
Author: Enrico Granata <egranata@apple.com>
Date:   Thu Feb 21 23:59:42 2013 +0000

    If the inferior program is compiled with libc++, you won't see libstdc++
    
    llvm-svn: 175832

commit d2f16e2c2dfb8a5b46c8e7222eb75d16c7453eb5
Author: Enrico Granata <egranata@apple.com>
--
Author: Enrico Granata <egranata@apple.com>
Date:   Thu Feb 21 01:29:04 2013 +0000

    If you say
    (lldb) frame variable
    without first launching the inferior, you get:
    error: invalid frame
    
    this is misleading and should probably hint that there is no process. Adding this flag makes sure that we get:
    error: invalid process
    
--

commit 6e9b7fc80288c1832f68f66bf82d5925789401ec
Author: Matt Kopec <Matt.Kopec@intel.com>
Date:   Tue Feb 19 19:06:16 2013 +0000

    Add i386 register support for the x86_64 RegisterContext plugin. This allows debugging a 32-bit inferior on 64-bit lldb/host.
    
    llvm-svn: 175543

commit 22954dbb7e9a8db1225c2ef891ee4905c22e0e00
Author: Dan Gohman <dan433584@gmail.com>
--

commit 5a52f2ec731ae61ecb939832a94b5dd3eaea080e
Author: Daniel Malea <daniel.malea@intel.com>
Date:   Wed Feb 13 22:05:18 2013 +0000

    Skip test that causes lldb to assert due to inferior getting a SIGSEGV with si_code == SI_KERNEL (PR-15258)
    - crash does not always reproduce
    
    llvm-svn: 175095

commit 5703bdcc49da01d0605c12e13e1f113bc9fa58d9
Author: Daniel Malea <daniel.malea@intel.com>
Date:   Wed Feb 13 22:00:44 2013 +0000

    Allow expression evaluation to work when multiple threads exist in the inferior (on Linux)
    - handle m_resume_state == eStateStopped || eStateSuspended in DoResume rather than asserting
    
    llvm-svn: 175094

commit 3ffeb68dd759d0d65cbfb5d2a90364ef305d8a59
--

commit 05abe9372bfe9213f4f511ea351ab9e6b7f000bc
Author: Daniel Dunbar <daniel@zuster.org>
Date:   Wed Feb 6 20:24:23 2013 +0000

    [tests] Infer the cxx_under_test (as clang++).
    
     - This is a reasonable default, and makes testing just work with no required
       parameters.
    
     - Add notes on all of the inferred or default values.
    
    llvm-svn: 174538

commit 94f0e1382a8e623ea128caa8a6c41d2cd694604d
Author: Daniel Jasper <djasper@google.com>
--

commit b6354a0767b9db3611f193a9203c619d5a247b0f
Author: Daniel Dunbar <daniel@zuster.org>
Date:   Tue Feb 5 22:28:03 2013 +0000

    [tests] If no explicit target triple is given, try to infer it.
    
    llvm-svn: 174454

commit a563f32c6aef7451ddbc2e34195539f848ad759e
Author: Daniel Dunbar <daniel@zuster.org>
--
    Reapply r174343, with a fix for a scary DAG combine bug where it failed to differentiate between the alignment of the
    base point of a load, and the overall alignment of the load.  This caused infinite loops in DAG combine with the
    original application of this patch.
    
    ORIGINAL COMMIT LOG:
    When the target-independent DAGCombiner inferred a higher alignment for a load,
    it would replace the load with one with the higher alignment.  However, it did
    not place the new load in the worklist, which prevented later DAG combines in
    the same phase (for example, target-specific combines) from ever seeing it.
    
    This patch corrects that oversight, and updates some tests whose output changed
--

commit 3753b28cd2ace328935ec15ca9dfd6d4a06def4f
Author: NAKAMURA Takumi <geek4civic@gmail.com>
Date:   Tue Feb 5 14:44:16 2013 +0000

    Revert r174343, "When the target-independent DAGCombiner inferred a higher alignment for a load,"
    
    It caused hangups in compiling clang/lib/Parse/ParseDecl.cpp and clang/lib/Driver/Tools.cpp in stage2 on some hosts.
    
    llvm-svn: 174374

--

commit a47fdbb032d342a2a13c665a060ca9a115ecd506
Author: Owen Anderson <resistor@mac.com>
Date:   Tue Feb 5 06:25:30 2013 +0000

    When the target-independent DAGCombiner inferred a higher alignment for a load,
    it would replace the load with one with the higher alignment.  However, it did
    not place the new load in the worklist, which prevented later DAG combines in
    the same phase (for example, target-specific combines) from ever seeing it.
    
    This patch corrects that oversight, and updates some tests whose output changed
--
      CGRect r3 = r2;
    
    Previously we only made this optimization if the struct did not begin with
    an aggregate member, to make sure that we weren't picking up an LCV for
    the first field of the struct. But since LazyCompoundVals are typed, we can
    make that inference directly by comparing types.
    
    This is a pure optimization; the test changes are to guard against possible
    future regressions.
    
    llvm-svn: 174211
--
Author: Tim Northover <Tim.Northover@arm.com>
Date:   Tue Jan 22 09:46:31 2013 +0000

    Make APFloat constructor require explicit semantics.
    
    Previously we tried to infer it from the bit width size, with an added
    IsIEEE argument for the PPC/IEEE 128-bit case, which had a default
    value. This default value allowed bugs to creep in, where it was
    inappropriate.
    
    llvm-svn: 173138
--
Author: Han Ming Ong <hanming@apple.com>
Date:   Fri Jan 18 23:11:53 2013 +0000

    <rdar://problem/12976277>
    
    Swap in index ids for thread ids in GDBRemoteCommunicationClient. Besides dealing with the async logic, I have to take care of the situation when the inferior paused as well.
    
    llvm-svn: 172869

commit 7431211214d54d0cd8cc0d069447abd22c5da0cb
Author: Nadav Rotem <nrotem@apple.com>
--

commit 2affc1ea6d27dbd9258cef614725f92c7d2770b3
Author: Jason Molenda <jmolenda@apple.com>
Date:   Fri Jan 18 23:07:45 2013 +0000

    Add code to retreive the mach port # for each thread in the inferior application's
    mach port namespace in addition to the mach port # in examine-threads' own port
    namespace, and print it (when -v is used).
    
    llvm-svn: 172867

--

commit 11dfe6fe3d0736d46c9cfc9de79bef60c671c097
Author: Douglas Gregor <dgregor@apple.com>
Date:   Mon Jan 14 17:57:51 2013 +0000

    Infer "link" lines for top-level frameworks. Essentially, a framework
    will have a shared library with the same name as its framework (and no
    suffix!) within its .framework directory. Detect this both when
    inferring the whole top-level framework and when parsing a module map.
    
    llvm-svn: 172439

commit 924c478827ee3a21b669c2f65f9a76b15567f852
Author: Bill Schmidt <wschmidt@linux.vnet.ibm.com>
--
Author: Han Ming Ong <hanming@apple.com>
Date:   Wed Jan 9 22:37:34 2013 +0000

    <rdar://problem/12975489>
    
    1. Using mach port number, just like when inferior is paused.
    2. Use key:value pair of thread used time instead of comma separated notation.
    
    llvm-svn: 172012

commit 5459754d33adcc114900ac5572fa9a182c43005c
--

commit 6217d2ae379b2c6b64bf558321eca40bf1368be4
Author: Daniel Malea <daniel.malea@intel.com>
Date:   Tue Jan 8 14:49:22 2013 +0000

    Implement -w flag to process launch (allow launching inferior process in different working directory) on Linux/FreeBSD
    - fixes test case TestProcessLaunch
    
    llvm-svn: 171854

commit 7daa1a22014c9b5a400dba5e6cfb0ff7cc94b443
--

    <rdar://problem/12602653>
    
    Add unconditional logging messages to every place in debugserver
    where we send a SIGKILL signal or do a ptrace PT_KILL call to
    terminate the inferior process.  When the debuggee is silently
    killed off, the console logging from debugserver can disambiguate
    whether debugserver killed off the process because it failed to
    completely set it up, becuase it was told to (via the "k" packet),
    or if some external daemon killed it.
    
--

commit 184c6591ecda872310e20aa6c213910afa6dfa9c
Author: Andrew Kaylor <andrew.kaylor@intel.com>
Date:   Fri Jan 4 23:27:36 2013 +0000

    Generalizing expected stop reason string checking in InferiorCrashing test case.
    
    llvm-svn: 171554

commit cd330348f54c2f3a18f242224c301eb9ecbb4df4
Author: Bill Wendling <isanbard@gmail.com>
--

commit 18f2675e9bb99557bf92f4153fc5b039ae83a1c4
Author: Craig Topper <craig.topper@gmail.com>
Date:   Wed Dec 26 21:04:30 2012 +0000

    Remove a special conditional setting of neverHasSideEffects if the instruction didn't have a pattern. This was leftover from when tablegen used to complain if things were already inferred from patterns.
    
    llvm-svn: 171117

commit 0bbf81e311c2b43d240da4fb1379542b0a7c20d7
Author: Nadav Rotem <nrotem@apple.com>
--

commit d362d910f3cd6c01124b8a00e883f1d434f43e9a
Author: Andrew Kaylor <andrew.kaylor@intel.com>
Date:   Thu Dec 20 00:19:27 2012 +0000

    Setting TestInferiorChanged.py to expectedFailureLinux because of bugzilla 14662.
    
    Note that the test actually fails before reaching the assertion described in that bug, but the failure is a trivial matter of adding OS-conditional expected stop reason strings (as noted by new comments in this patch).  However, with the stop reason strings changed, the test fails for the more substantial reason noted in bugzilla 14662.
    
    llvm-svn: 170619

--

commit c63dddd8007bbdf58ddfc649e74c65aa3bf7254d
Author: Daniel Malea <daniel.malea@intel.com>
Date:   Fri Dec 14 21:07:07 2012 +0000

    Avoid possible overflow when reading inferior memory (and logging is enabled)
    
    Patch by Matt Kopec!
    
    llvm-svn: 170242

--

commit 327c267a9561d52e691b732c0f0dcfea4ddebeae
Author: Andrew Kaylor <andrew.kaylor@intel.com>
Date:   Fri Dec 7 17:56:31 2012 +0000

    Set ThreadPlanCallFunction to private in ConstructorSetup.  This fixes a problem on Linux where 'continue' was misfiring after an expression evaluation when stopped at a breakpoint.  The problem was that InferiorCallMmap was not setting its ThreadPlanCallFunction to private and so the completion of that thread plan appeared to be the stop reason and therefore the 'continue' operation failed to step over the breakpoint.  The SetPrivate call is being put in ThreadPlanCallFunction rather than InferiorCallMmap to make the solution more general.
    
    llvm-svn: 169618

commit 131186c11a297eb67a46e5f0b6dff4a69eeaf394
Author: Eli Bendersky <eliben@google.com>
--

commit 69740d6869e63b6edd076edd707571fd6203cfdf
Author: Jason Molenda <jmolenda@apple.com>
Date:   Thu Dec 6 22:10:27 2012 +0000

    Add examples of how to set env vars for the inferior process from lldb.
    
    llvm-svn: 169552

commit 772b893e5d45984d4cfa4c856e5151fe1f3f6b58
Author: Jakub Staszak <kubastaszak@gmail.com>
--

commit 3e871d8cf686b911e2a66655a77252555b946c99
Author: Ted Kremenek <kremenek@apple.com>
Date:   Thu Dec 6 07:17:26 2012 +0000

    Use the BlockDecl captures list to infer the direct captures for a BlockDataRegion.  Fixes <rdar://problem/12415065>.
    
    We still need to do a recursive walk to determine all static/global variables
    referenced by a block, which is needed for region invalidation.
    
    llvm-svn: 169481
--
    This patch migrates the puts optimizations from the simplify-libcalls
    pass into the instcombine library call simplifier.
    
    All the simplifiers from simplify-libcalls have now been migrated to
    instcombine.  Yay!  Just a few other bits to migrate (prototype attribute
    inference and a few statistics) and simplify-libcalls can finally be put
    to rest.
    
    llvm-svn: 168925

commit 59aeece231d2ce6eb2552d140eec9a5b3642c24f
--
Author: Daniel Malea <daniel.malea@intel.com>
Date:   Fri Nov 23 18:09:58 2012 +0000

    Fix Linux bug that leaves lldb in invalid state after expression evaluation times out.
    - Handle EINVAL return code from ptrace(GETSIGINFO, ...): not an error, but 'group-stop' state on Linux
    - propagate SIGSTOP to inferior in above case
    - this commit resolves the failure in expression_command/timeout testcase
    
    Thanks to Sean Callanan & Matt Kopec for helping debug this problem
    
    llvm-svn: 168523
--

commit ab3b8b22a157f98bab6260ddf2b88b05dcb4cd1e
Author: Han Ming Ong <hanming@apple.com>
Date:   Sat Nov 17 00:21:04 2012 +0000

    <rdar://problem/12720514> Sub-TLF: Provide service to profile the inferior
    
    This allows client to query profiling states on the inferior.
    
    llvm-svn: 168228

commit f1b6177b62567cdda828b2cf25f04b7009274c91
Author: Evan Cheng <evan.cheng@apple.com>
--
    comes to struct types, however, and it is not possible to
    produce a type in the debugger's round-tripped AST which
    will really do anything useful during type-checking.
    Therefore we allow __unknown_anytype in these positions,
    which essentially disables type-checking for that argument.
    We infer the parameter type to be the unqualified type of
    the argument expression unless that expression is an
    explicit cast, in which case it becomes the type-as-written
    of that cast.
    
    rdar://problem/12565338
--
Author: Benjamin Kramer <benny.kra@googlemail.com>
Date:   Tue Nov 13 15:32:35 2012 +0000

    This patch makes the behavior of clang consistent with the behavior of gcc 4.6 in cases where both -fPIC and -fPIE is used.
    
    - Separately check if -fPIE was specified in the command line and define both __PIC__ and __PIE__ when -fPIE is used. We need to check this separately because -fPIE will infer -fPIC even if its not explicitly used.
    - Fixed existing tests.
    - Added new tests for cases where both -fPIC and -fPIE is used.
    
    Author: Tareq A. Siraj <tareq.a.siraj@intel.com>
    Fixes: PR13221
--

commit 9194a91dc928581ddef77c695a22820713c64a43
Author: Douglas Gregor <dgregor@apple.com>
Date:   Tue Nov 6 19:39:40 2012 +0000

    Introduce inferred framework modules into the module map file,
    allowing a module map to be placed one level above the '.framework'
    directories to specify that all .frameworks within that directory can
    be inferred as framework modules. One can also specifically exclude
    frameworks known not to work.
    
    This makes explicit (and more restricted) behavior modules have had
    "forever", where *any* .framework was assumed to be able to be built
    as a module. That's not necessarily true, so we white-list directories
--

commit a1fffcf73ab2575bc7089a5cecbb3c522d92027e
Author: Richard Osborne <richard@xmos.com>
Date:   Mon Nov 5 10:48:24 2012 +0000

    Don't infer whether a value is captured in the current function from the
    'nocapture' attribute.
    
    The nocapture attribute only specifies that no copies are made that
    outlive the function. This isn't the same as there being no copies at all.
    This fixes PR14045.
--
Author: Sean Silva <silvas@purdue.edu>
Date:   Thu Oct 11 23:30:49 2012 +0000

    Remove unnecessary classof()'s
    
    isa<> et al. automatically infer when the cast is an upcast (including a
    self-cast), so these are no longer necessary.
    
    llvm-svn: 165767

commit d73b2818a18d50c7f951abe09c83c6a123033c41
--
Author: NAKAMURA Takumi <geek4civic@gmail.com>
Date:   Wed Sep 19 00:56:20 2012 +0000

    llvm/test/MC/X86/x86_nop.s: Make sure -arch=x86 when -mcpu=geode.
    
    -mcpu doesn't infer -arch. Consider non-x86 host.
    
    llvm-svn: 164185

commit 6f4d8af713da3e06602f13ccc7e89ecc33b88f16
Author: Greg Clayton <gclayton@apple.com>
--
Author: Andrew Trick <atrick@apple.com>
Date:   Sat Sep 15 00:19:59 2012 +0000

    TableGen subtarget parser. Handle new machine model.
    
    Infer SchedClasses from variants defined by the target or subtarget.
    
    llvm-svn: 163952

commit 766864963bdb84897d23daea2da1a53b94c57327
Author: Andrew Trick <atrick@apple.com>
--

commit 6d44554cd471766286034ab560a2578ce5175c2f
Author: Craig Topper <craig.topper@gmail.com>
Date:   Mon Aug 27 07:04:50 2012 +0000

    Fold some patterns into instruction definitons so tablegen can infer flags removing the need for an explicit 'neverHasSideEffects = 1'
    
    llvm-svn: 162656

commit 0dd589c5f127455e324e48f08e68a7c9cc2cf184
Author: Anitha Boyapati <anitha.boyapati@gmail.com>
--

commit c2272df1be0bfdd31a89d2f6ca60bfbf5fd5be50
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Fri Aug 24 22:46:53 2012 +0000

    Infer instruction properties from single-instruction patterns.
    
    Previously, instructions without a primary patterns wouldn't get their
    properties inferred. Now, we use all single-instruction patterns for
    inference, including 'def : Pat<>' instances.
    
    This causes a lot of instruction flags to change.
    
    - Many instructions no longer have the UnmodeledSideEffects flag because
      their flags are now inferred from a pattern.
    
    - Instructions with intrinsics will get a mayStore flag if they already
      have UnmodeledSideEffects and a mayLoad flag if they already have
      mayStore. This is because intrinsics properties are linear.
    
--
    
    It's not clear that they should be marked as such, but tbb formation
    fails if t2LEApcrelJT is hoisted of of a loop.
    
    This doesn't change the flags on these instructions,
    UnmodeledSideEffects was already inferred from the missing pattern.
    
    llvm-svn: 162603

commit 175ea24e383d6277fb94434043e8d1059a89c22b
Author: Chad Rosier <mcrosier@apple.com>
--

commit f5dc1bcfe1ba92bde4922617b1e43605a9401327
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Fri Aug 24 21:08:09 2012 +0000

    Stop inferring isVariadic from instruction patterns.
    
    Instructions are now only marked as variadic if they use variable_ops in
    their ins list.
    
    A variadic SDNode is typically used for call nodes that have the call
--

commit 8a276c26bd43a3146fe13a197aff7d438f9cedff
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Fri Aug 24 17:08:41 2012 +0000

    Verify explicit instruction properties when they can be inferred.
    
    It is now allowed to explicitly set hasSideEffects, mayStore, and
    mayLoad on instructions with patterns.
    
    Verify that the patterns are consistent with the explicit flags.
--
Date:   Fri Aug 24 00:31:16 2012 +0000

    Heed guessInstructionProperties, and stop warning on redundant flags.
    
    Emit TableGen errors if guessInstructionProperties is 0 and
    instruction properties can't be inferred from patterns.
    
    Allow explicit instruction properties even when they can be inferred.
    
    This patch doesn't change the TableGen output. Redundant properties
    are not yet verified because the tree has errors.
    
    llvm-svn: 162516
--
Date:   Thu Aug 23 19:34:41 2012 +0000

    Add CodeGenTarget::guessInstructionProperties.
    
    Currently, TableGen just guesses instruction properties when it can't
    infer them form patterns.
    
    This adds a guessInstructionProperties flag to the instruction set
    definition that will be used to disable guessing. The flag is intended
    as a migration aid. It will be removed again when no more targets need
    their properties guessed.
--
Author: Anna Zaks <ganna@apple.com>
Date:   Mon Aug 6 23:58:16 2012 +0000

    [analyzer] DynTypes: Add a test for improper cast performed by  user.
    
    Dynamic type inference does the right thing in this case. However, as
    Jordan suggested, it would be nice to add a warning here as well.
    
    llvm-svn: 161365

commit 14f1aa70a9fae2e57f1eb91b6769cd92dc6dc0db
--
    Force the OS X version to 10.6 for old-style simulator builds.
    
    The hack of recognizing a -D__IPHONE_OS_VERSION_MIN_REQUIRED option
    in place of -mios-simulator-version-min leaves the Darwin version
    unspecified.  It can be set separately with -mmacosx-version-min (which
    makes no sense) or inferred to match the host version (which is unpredictable
    and usually wrong).  This really needs to get cleaned up, but in the
    meantime, force the OS X version to 10.6 so that the behavior is sane for
    the iOS simulator.  Thanks for Argyrios for the patch.
    <rdar://problem/11858187>
    
--
Author: Chad Rosier <mcrosier@apple.com>
Date:   Fri Jul 13 23:57:43 2012 +0000

    Add a per target max vector alignment field (e.g., 32-byte alignment for x86 due to
    AVX).  Currently, if no aligned attribute is specified the alignment of a vector is
    inferred from its size.  Thus, very large vectors will be over-aligned with no
    benefit.  Target owners should set this target max.
    
    llvm-svn: 160209

commit 1c5431af8138b6c1b847eae76aae66e60fa31e52
--
Author: Jason Molenda <jmolenda@apple.com>
Date:   Fri Jul 6 02:46:23 2012 +0000

    Change the "run" / "r" command alias to not use --shell for lldb
    running natively on arm - on iOS we have to do some extra work to
    track the inferior process if we launch with a shell intermediary.
    <rdar://problem/11719396>
    
    llvm-svn: 159803

commit 2ab73b13a585ae465f24bb33446a2f1db00aa67b
--

    In blocks, only pretend that enum constants have enum type if necessary.
    
    In C, enum constants have the type of the enum's underlying integer type,
    rather than the type of the enum. (This is not true in C++.) Thus, when a
    block's return type is inferred from an enum constant, it is incompatible
    with expressions that return the enum type.
    
    In r158899, I told block returns to pretend that enum constants have enum
    type, like in C++. Doug Gregor pointed out that this can break existing code.
    
--
Date:   Tue Jun 26 18:46:28 2012 +0000

    Teach TableGen to put chains on more instructions
    
    When generating selection tables for Pat instances, TableGen relied on
    an output Instruction's Pattern field being set to infer whether a
    chain should be added.
    
    This patch adds additional logic to check various flag fields so that
    correct code can be generated even if Pattern is unset.
    
--
Author: NAKAMURA Takumi <geek4civic@gmail.com>
Date:   Sun Jun 24 03:48:53 2012 +0000

    llvm/Support/IntegersSubset.h: Add a copy constructor on IntegersSubset to appease msvc.
    
    msvc mis-infers ParentTy(RHS) to (const RangesCollectionTy &).
    
    llvm-svn: 159101

commit 37d96f08625d09a5fac03a255dc73e4569aeb898
Author: NAKAMURA Takumi <geek4civic@gmail.com>
--

commit 422080f547c0841d18a44d6395dc28e10c8ab467
Author: Jordan Rose <jordan_rose@apple.com>
Date:   Thu Jun 21 05:54:55 2012 +0000

    Pretend that enum constants have enum type when inferring a block return type.
    
    In C, enum constants have the type of the enum's underlying integer type,
    rather than the type of the enum. (This is not true in C++.) This leads to
    odd warnings when returning enum constants directly in blocks with inferred
    return types. The easiest way out of this is to pretend that, like C++, enum
    constants have enum type when being returned from a block.
    
    <rdar://problem/11662489>
    
--
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri May 18 00:51:36 2012 +0000

    rdar://problem/11140741
    
    For "process attach", make the success criterion as the inferior changes its state to eStateStopped.
    Otherwise, mark it as a failure and say so.
    
    llvm-svn: 157036

commit cd492b0a989cea8c18f5858c6a91a23e42a808e5
--
    I have updated Clang to include support for Objective-C
    boxed expressions returning numbers and strings.
    
    I also added boxed expressions to our testcases, and
    enabled boxed expressions when libarclite is linked into
    the inferior.
    
    llvm-svn: 157026

commit 0bf70f4be8b24147f81ff0afda7a4b3fad8c3a63
Author: Douglas Gregor <dgregor@apple.com>
--

commit f761fe9d238894b8cefd79c380308b94ee021903
Author: Chad Rosier <mcrosier@apple.com>
Date:   Wed May 9 18:09:58 2012 +0000

    [driver] Use the iOS target triple to infer the deployment target.
    rdar://11409204
    
    llvm-svn: 156489

commit 951949723db7c8bb400a50a95ae7357d3c7652f2
--
    Add an MF argument to TRI::getPointerRegClass() and TII::getRegClass().
    
    The getPointerRegClass() hook can return register classes that depend on
    the calling convention of the current function (ptr_rc_tailcall).
    
    So far, we have been able to infer the calling convention from the
    subtarget alone, but as we add support for multiple calling conventions
    per target, that no longer works.
    
    Patch by Yiannis Tsiouris!
    
--
Date:   Mon Apr 16 18:55:15 2012 +0000

    Add the capability of supplying the pre/post-flight functions to the test suite such that
    the pre-flight code gets executed during setUp() after the debugger instance is available
    and the post-flight code gets executed during tearDown() after the debugger instance has
    done killing the inferior and deleting all the target programs.
    
    Example:
    
    [11:32:48] johnny:/Volumes/data/lldb/svn/ToT/test $ ./dotest.py -A x86_64 -v -c ../examples/test/.lldb-pre-post-flight  functionalities/watchpoint/hello_watchpoint
    config: {'pre_flight': <function pre_flight at 0x1098541b8>, 'post_flight': <function post_flight at 0x109854230>}
--
    For the types directory, we were running lldbtest.system() to execute the compiled program
    on the test host to collect golden output in order to compare with the output of various
    lldb debugger commands as performed later.  This won't work for the remote platform
    scenario where the architecture of the target and host platforms are different.
    
    Modify the AbstractBase class to use lldb to launch the inferior while specifying the
    output file, from which the golden output is collected and grokked.  How to bootstrap and
    to connect to the remote platform is still being worked at.
    
    llvm-svn: 154699

--
    <rdar://problem/11052174>
    <rdar://problem/11051056>
    
    Found a race condition when sending async packets in the ProcessGDBRemote.
    
    A little background: GDB remote clients can only send one packet at a time. You must send a packet and wait for a response. So when we continue, we obviously can't hold up the calling thread waiting for the process to stop again, so we have an async thread in the ProcessGDBRemote whose only job is to run packets that control the inferior process. When you send a continue packet, the only packet you can send is an interrupt packet (which consists of sending a CTRL+C (or a '\x03' byte)). This then stops the inferior and we can send the async packet, and then resume the target. There was a race condition that often happened during stepping where we are doing a source level single step which consists of many instruction steps and a few runs here and there when we step into a function. So the flow looks like:
    
    inst single step
    inst single step
    inst single step
    inst single step
--
commit d45a9c32c2ad1311c0131d8754bccf8b11c14e0a
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Thu Mar 22 20:04:07 2012 +0000

    Previous check-ins allow to hit the arm hardware watchpoint, with a workaound to handle the issue
    that the inferior cannot execute past the watchpoint-triggering instruction.
    
    The solution is disable the watchpoint before resuming the inferior and make it hardware single step;
    when the inferior stops again due to single step, re-enable the watchpoint and disable the single step
    to make the inferior able to continue again without obstacle.
    
    rdar://problem/9667960
    
    llvm-svn: 153273

--
commit e344486e631b2a1d5bc14efcd0a92570dd89d7c1
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Tue Mar 20 00:33:51 2012 +0000

    Add a '-E' option to the test driver for the purpose of specifying some extra CFLAGS
    to pass to the toolchain in order to build the inferior programs to be run/debugged
    duirng the test suite.  The architecture might dictate some special CFLAGS which are
    more easily specified in a central place (like the command line) instead of inside
    make rules.
    
    For Example,
--
    new directory named '/shared/phone'.  The particular incarnation of the architecture-compiler combination of the
    test support files are therefore to be found under:
    
    /shared/phone.arch=armv7-compiler=clang/functionalities/watchpoint/hello_watchpoint
    
    The building of the inferior programs under testing is now working.
    
    The actual launching/debugging of the inferior programs are not yet working,
    neither is the setting of a watchpoint on the phone.
    
    llvm-svn: 153070

commit 230e015b909c4fa58aacfcf53ca54eb7d3a34b92
--

    [AST/etc] Mark {getSourceRange(),getStartLoc(),getEndLoc()} as LLVM_READONLY.
     - The theory here is that we have these functions sprinkled in all over the
       place. This should allow the optimizer to at least realize it can still do
       load CSE across these calls.
     - I blindly marked all instances as such, even though the optimizer can infer
       this attribute in some instances (some of the inline ones) as that was easier
       and also, when given the choice between thinking and not thinking, I prefer
       the latter.
    
    You might think this is mere frivolity, but actually this is good for a .7 -
--

commit 934c05d2844991aed8ba687f0e24ccb3a03cccf4
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Mar 9 02:11:37 2012 +0000

    Add the capability on OS X to utilize 'xcrun' to locate the compilers used for building the inferior programs
    to be debugged while running the test suite.  By default, compilers is set to ['clang'] and can be overridden
    using the "-C compilerA^compilerB" option.
    
    llvm-svn: 152367

--
commit 5a9a9883be8a6ad90d7eb18e72f6bf4041c26a20
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Mar 9 00:44:59 2012 +0000

    Change the test driver so that, by default, it takes into consideration of both 'x86_64' and 'i386' architectures
    when building the inferior programs.
    
    Example:
    
    /Volumes/data/lldb/svn/ToT/test $ ./dotest.py -v functionalities/watchpoint
    LLDB build dir: /Volumes/data/lldb/svn/ToT/build/Debug
--
Date:   Tue Feb 28 23:06:21 2012 +0000

    [analyzer diagnostics] start prototyping stripping PathDiagnostics of unnecessary cruft caused by path inlining.
    
    This introduces a concept of a "prunable" PathDiagnosticEvent.  Currently this is a flag, but
    we may evolve the concept to make this more dynamically inferred.
    
    llvm-svn: 151663

commit 265a421dd977210ebd2cb2ffc5675336e321805e
Author: Fariborz Jahanian <fjahanian@apple.com>
--

    Previoously the expression parser had to rely on the
    JIT when printing the values of registers (e.g.,
    "expr $pc").  Now the expression parser can do this
    in the IR interpreter without running code in the
    inferior process.
    
    llvm-svn: 150554

commit 84f454ec5c1e1d255428b26d5c7b2d60bbf1787d
Author: Lang Hames <lhames@gmail.com>
--

commit f4a75d880d4b3be92fd17694726fd6b1c93d9bf3
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Thu Feb 9 20:29:11 2012 +0000

    Fix compile time warnings for the inferior program.
    
    llvm-svn: 150205

commit 25b0742603808470660680f1d87c066ea1e5b59c
Author: Eli Friedman <eli.friedman@gmail.com>
--

commit 3397e7cd224a5651656ee78245bec7cfd8c896ed
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Mon Feb 6 21:07:21 2012 +0000

    Fix a typo in specifying the error path when launching the inferior.
    
    llvm-svn: 149899

commit 1fc2eac062deb7c27bd229f329e3cb49409f1927
Author: Bill Wendling <isanbard@gmail.com>
--
    single attribute ("system") that allows us to mark a module as being a
    "system" module. Each of the headers that makes up a system module is
    considered to be a system header, so that we (for example) suppress
    warnings there.
    
    If a module is being inferred for a framework, and that framework
    directory is within a system frameworks directory, infer it as a
    system framework.
    
    llvm-svn: 149143

commit 63fe5697f4d9f760fef8ec828d535deec296d119
--
    Add a CoveredBySubRegs property to Register descriptions.
    
    When set, this bit indicates that a register is completely defined by
    the value of its sub-registers.
    
    Use the CoveredBySubRegs property to infer which super-registers are
    call-preserved given a list of callee-saved registers.  For example, the
    ARM registers D8-D15 are callee-saved.  This now automatically implies
    that Q4-Q7 are call-preserved.
    
    Conversely, Win64 callees save XMM6-XMM15, but the corresponding
--

commit 3a5999bc1cc661a0f71e0a186d12a8cbb3c9223c
Author: Douglas Gregor <dgregor@apple.com>
Date:   Fri Jan 13 22:31:52 2012 +0000

    When inferring a module for a framework, first determine whether that
    framework is actually a subframework within a top-level framework. If
    so, only infer a module for the top-level framework and then dig out
    the appropriate submodule.
    
    This helps us cope with an amusing subframeworks anti-pattern, where
    one uses -F <framework>/Frameworks to get direct include access to the
    subframeworks of a framework (which otherwise would not be
--

commit 09a22f071bae8320c322645d1ff0bc86fadfe1b4
Author: Douglas Gregor <dgregor@apple.com>
Date:   Fri Jan 13 16:54:27 2012 +0000

    Don't infer a submodule for a framework's private header, at least for now.
    
    llvm-svn: 148117

commit bd53f597de987fabd8f504baaef1a320d2246303
Author: Alexander Potapenko <glider@google.com>
--

commit da4fda73647f7ab8cdf2e5d76d6ad8825db62dfe
Author: Douglas Gregor <dgregor@apple.com>
Date:   Fri Jan 13 01:20:43 2012 +0000

    When inferring a module map for a framework, add the 'private'
    requirement to headers under PrivateHeaders. We don't want to build
    them as part of the module (yet).
    
    llvm-svn: 148082

--
Date:   Thu Jan 12 00:29:46 2012 +0000

    rdar://problem/10492827
    SBProcess.GetSTDERR() not getting stderr of the launched process
    
    Since we are launch the inferior with:
    
        process = target.LaunchSimple(None, None, os.getcwd())
    
    i.e., without specifying stdin/out/err.  A pseudo terminal is used for
    handling the process I/O, and we are satisfied once the expected output
--

commit 224d8a74ae4087519f07479bb23de4a3ae53e24f
Author: Douglas Gregor <dgregor@apple.com>
Date:   Fri Jan 6 17:19:32 2012 +0000

    When inferring a submodule ID during module creation, look up the
    include stack to find the first file that is known to be part of the
    module. This copes with situations where the module map doesn't
    completely specify all of the headers that are involved in the module,
    which can come up when there are very strange #include_next chains
    (e.g., with weird compiler/stdlib headers like stdarg.h or float.h).
--
commit c1b312a5c3aa062d9ccf2a548b79163e003404e0
Author: Sean Callanan <scallanan@apple.com>
Date:   Thu Jan 5 02:00:14 2012 +0000

    Fixed a potential hang while trying to execute
    a function in the inferior.
    
    llvm-svn: 147592

commit 8fca6b268b952d39842149658bd3431c1f7ad272
Author: Chad Rosier <mcrosier@apple.com>
--
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Mon Dec 19 16:53:34 2011 +0000

    Emit a getMatchingSuperRegClass() implementation for every target.
    
    Use information computed while inferring new register classes to emit
    accurate, table-driven implementations of getMatchingSuperRegClass().
    
    Delete the old manual, error-prone implementations in the targets.
    
    llvm-svn: 146873
--
    cstr = lldb.process.ReadCStringFromMemory (0x1000, max_cstr_len, error)
    if error.Success():
        ....
    
    The other two functions behave as expteced. This will make it easier to get integer values
    from the inferior process that are correctly byte swapped. Also for pointers, the correct
    pointer byte size will be used.
    
    Also cleaned up a few printf style warnings for the 32 bit lldb build on darwin.
    
    llvm-svn: 146636
--

commit 4dc71835f5c1fc2ce9fb04645d0c7093482c9a70
Author: Douglas Gregor <dgregor@apple.com>
Date:   Mon Dec 12 23:55:05 2011 +0000

    Set umbrella directory correctly when we infer a framework module
    
    llvm-svn: 146451

commit 12eae8085cb9e0c4b3517d1cd6066f69825a44e1
Author: Nick Lewycky <nicholas@mxc.ca>
--

commit 8ca0c6408e537e70dddbd8f4d7fd11c5eb019c71
Author: Douglas Gregor <dgregor@apple.com>
Date:   Sat Dec 10 01:22:52 2011 +0000

    Make sure that we infer __strong, etc. when we instantiate variables
    under ARC. Fixes <rdar://problem/10530209>.
    
    llvm-svn: 146307

commit 036e2bd07acf2dab2a46382627c48f84943dac4b
--

commit 9458f82df748a3b79ef8cf3beb5f1c499959f9c6
Author: Douglas Gregor <dgregor@apple.com>
Date:   Wed Dec 7 22:05:21 2011 +0000

    Implement inference for the "Private" submodule corresponding to
    private headers in a framework.
    
    llvm-svn: 146082

commit 6820eebde13e8630973204a45d71fc49a708aaf6
--

commit e89dbc1d98196da68f1b2e74e7bdede1b3a22f19
Author: Douglas Gregor <dgregor@apple.com>
Date:   Tue Dec 6 19:39:29 2011 +0000

    When inferring a module map for a framework, infer subframework
    modules for each of its subframeworks.
    
    llvm-svn: 145957

commit 1594618c39b45bae8dbb26c09a03c58ab96ba6eb
--

commit dd005f69f0b25f7a65ba4f08db175d66b029c4ef
Author: Douglas Gregor <dgregor@apple.com>
Date:   Tue Dec 6 17:34:58 2011 +0000

    Allow inferred submodules for any (sub)module that has an umbrella header
    
    llvm-svn: 145945

commit ac35a4d0f7a5f9445b68b143b67ac72f38ddeee6
Author: Sebastian Pop <spop@codeaurora.org>
--

commit a89c5ac4a66c12306460d04aa09573dfa94e779d
Author: Douglas Gregor <dgregor@apple.com>
Date:   Tue Dec 6 01:10:29 2011 +0000

    Implement inferred submodules support, which (when requested)
    implicitly generates submodules corresponding to the headers that fall
    within a module.
    
    llvm-svn: 145887

--

commit 734410916a6d83c70dffcecae1686a15f8a50d71
Author: Douglas Gregor <dgregor@apple.com>
Date:   Mon Dec 5 22:27:44 2011 +0000

    Parse inferred submodules in module maps, track their contents in
    Module, and (de-)serialize this information. Semantics of inferred
    submodules to follow.
    
    llvm-svn: 145864

commit b8c719ccc6af14b1ba4d19f406a20e0b2b87bf88
--

commit d8bd7537ec31090a1b0f4300d76da5fa21eea93f
Author: Douglas Gregor <dgregor@apple.com>
Date:   Mon Dec 5 17:40:25 2011 +0000

    Inferred framework modules automatically export anything they import
    (i.e., 'export *'), to better match the semantics of headers.
    
    llvm-svn: 145813

commit 8c7c83522bd43949f369bb0dbf28b81f9c81f68c
--

commit 5c12ca8a258d4abb43894d99e5891618f07c254d
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Sat Dec 3 23:53:56 2011 +0000

    Move block return type inference diagnostic to a common place where
    Function or array lvalue conversions happens.
    
    llvm-svn: 145782

commit 965e0c6de25ff985c56563fba5ccf7c937fda132
--
commit dd5eb9df0cd248bc20fdca01f007f7119633a7d7
Author: Fariborz Jahanian <fjahanian@apple.com>
Date:   Sat Dec 3 17:47:53 2011 +0000

    If block literal return type is not specified, return type of the block is
    inferred from return types. All the return statements have to agree about the type.
    // rdar://10466373
    
    llvm-svn: 145774

commit 71ba18c1e08ea0a323974be32bebffeaa60808da
--

commit 5daa6de433d663293fea730ec12e3b04785de895
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Sat Dec 3 00:16:59 2011 +0000

    Let's also record the compiler version used for compiling the inferior into the session info
    
    llvm-svn: 145732

commit e03fe83d985c5ed73788f2eb95e4eb1cd2ea0ab0
Author: Pete Cooper <peter_cooper@apple.com>
--

commit a28bcddef6cacb8abe660840aa7190dcaef7b35b
Author: Douglas Gregor <dgregor@apple.com>
Date:   Thu Dec 1 02:07:58 2011 +0000

    Infer the submodule ID for a given declaration based on the location
    of that declaration, and encode the submodule ID in each declaration
    stored in an AST file.
    
    llvm-svn: 145555

--
commit f545f67de3a1bfdbbfad88acde5b540ce3b82f4f
Author: Douglas Gregor <dgregor@apple.com>
Date:   Tue Nov 29 21:59:16 2011 +0000

    Switch on-demand module building over to use module maps, always. When
    we infer the module map, we'll just print the module map to a
    temporary file and generate the module using that.
    
    llvm-svn: 145436

commit 9c978444049decdd2cd0abb917fd7e0d92dd1db7
--
Date:   Mon Nov 28 23:16:06 2011 +0000

    When attempting to load a module that is not in the module cache,
    return the module itself (in the module map) rather than returning the
    umbrella header used to build the module. While doing this, make sure
    that we're inferring modules for frameworks to build that module.
    
    llvm-svn: 145310

commit 67f5d88869de1262fa766ff16d7338861d194c68
Author: Chandler Carruth <chandlerc@gmail.com>
--

commit e7ab1a2f0fea39a2a26291d944bccb4523a0e865
Author: Eli Friedman <eli.friedman@gmail.com>
Date:   Mon Nov 28 22:48:22 2011 +0000

    Make SelectionDAG::InferPtrAlignment use llvm::ComputeMaskedBits instead of duplicating the logic for globals.  Make llvm::ComputeMaskedBits handle GlobalVariables slightly more aggressively, to match what InferPtrAlignment knew how to do.
    
    llvm-svn: 145304

commit 2679f3cb12aaf5b848fd14bb802a507fc7a262b0
Author: Chandler Carruth <chandlerc@gmail.com>
--

commit 4a5b2040e20295e0f03fdbf15609ad5c137a6e3a
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Mon Nov 28 22:37:34 2011 +0000

    Revert r145273 and fix in SelectionDAG::InferPtrAlignment() instead.
    Conservatively returns zero when the GV does not specify an alignment nor is it
    initialized. Previously it returns ABI alignment for type of the GV. However, if
    the type is a "packed" type, then the under-specified alignments is attached to
    the load / store instructions. In that case, the alignment of the type cannot be
    trusted.
--
commit 0fddfb2ceb6efd3144ca2579f4292904075de34d
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Thu Nov 17 19:57:27 2011 +0000

    Add an option '-S' to skip the build and cleanup while running the test.
    Use this option with care as you would need to build the inferior(s) by hand
    and build the executable(s) with the correct name(s).  This option can be used
    with '-# n' to stress test certain test cases for n number of times.
    
    An example:
    
--
Author: Douglas Gregor <dgregor@apple.com>
Date:   Thu Nov 17 01:41:17 2011 +0000

    When we're loading a framework header, first try to turn the framework
    into a module. This module can either be loaded from a module map in
    the framework directory (which isn't quite working yet) or inferred
    from an umbrella header (which does work, and replaces the existing
    hack).
    
    llvm-svn: 144877

--

commit 0ca7ce389c5b721bb2add92333a237ae71923c0a
Author: Bob Wilson <bob.wilson@apple.com>
Date:   Wed Nov 16 17:09:59 2011 +0000

    Fix tablegen warning: hasSideEffects is inferred for eh_sjlj_dispatchsetup.
    
    llvm-svn: 144798

commit 4332b32c5ea9a6c404c20a3d911acfda6e1c8aaa
Author: Douglas Gregor <dgregor@apple.com>
--

commit f031bb192f7e2cf198f101ddbdfa18cdc1a682b4
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Tue Nov 15 22:42:53 2011 +0000

    Fix objc runtime warnings from the inferior program.
    
    llvm-svn: 144717

commit 7cdcbe3788a0e72493d907b09ccefcbfb3cdbade
Author: Chris Lattner <sabre@nondot.org>
--
    RegisterContextLLDBs it contains.
    
    Previously RegisterContextLLDB objects had a pointer to their "next"
    frame down the stack.  e.g. stack starts at frame 0; frame 3 has a
    pointer to frame 2.  This is used to retreive callee saved register
    values.  When debugging an inferior that has blown out its own stack,
    however, this could result in lldb blowing out its own stack while
    recursing down to retrieve register values.
    
    RegisterContextLLDB no longer has a pointer to its next frame; it
    has a reference to the UnwindLLDB which contains it.  When it needs
--
commit 66d362e9bfcee8638cae392fe16040b6c477fd2d
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Wed Oct 26 22:58:02 2011 +0000

    Establish a baseline for bench.py score by using a fixed lldb executable as the
    inferior program for the lldb debugger to operate on.  The fixed lldb executable
    corresponds to r142902.
    
    Plus some minor modifications to the test benchmark to conform to way bench.py
    is meant to be invoked.
    
--
commit 31fdfb1f33cb328ef06d596a4483339143b1cd5e
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Oct 21 20:19:51 2011 +0000

    Add a benchmark for measuring the response time of the 'frame variable' command.
    Example (start the lldb inferior, break at the Driver::MainLoop() function, and
    issue 'frame variable'):
    
     $ ./dotest.py -v +b -x '-F Driver::MainLoop()' -n -p TestFrameVariableResponse.py
    ----------------------------------------------------------------------
    Collected 1 test
--
    
    Right now, the portion that runs the LLDB test
    suite is commented out because of code-signing
    problems (specifically, on Mac OS 10.7 a UI dialog
    appears asking for the user's permission to attach
    to the inferior process).
    
    You can use the buildbot like this:
    
    ./scripts/buildbot.py -b /tmp/lldb-build -l /tmp/lldb.log
    
--
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Fri Oct 14 01:00:49 2011 +0000

    Ban rematerializable instructions with side effects.
    
    TableGen infers unmodeled side effects on instructions without a
    pattern.  Fix some instruction definitions where that was overlooked.
    
    Also raise an error if a rematerializable instruction has unmodeled side
    effects. That doen't make any sense.
    
--
    However, now FindExternalVisibleDecls is called for
    nested namespaces as well, which means that it is
    called not once but many times (once per module in
    which the parent namespace appears).  This means that
    the namespace mapping is built up across many calls
    to the inferior FindExternalVisibleDecls, so I moved
    it into a data structure (the search context) that is
    shared by all calls.
    
    I also added some logging to make it easier to see
    what is happening during a namespace search, and
--
    before running the benchmarking logic.  An example,
    
    ./dotest.py -v -t +b -k 'process attach -n Mail' -k 'thread backtrace all' -p TestRunHooksThenSteppings.py
    
    spawns lldb, attaches to the 'Mail' application, does a backtrace for all threads, and then
    runs the benchmark to step the inferior multiple times.
    
    llvm-svn: 141740

commit 4035859cb80c1c2bfe8c76c051d2c023df9bf9d5
Author: Eric Christopher <echristo@apple.com>
--

commit 03efe84d0a82085b97f9e3c04472a0f27116f034
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Tue Oct 4 15:28:49 2011 +0000

    Teach TableGen to infer missing register classes.
    
    The set of register classes should be closed under sub-register
    operations and intersections. That will allow the register allocator to
    model combinations of constraints accurately.
    
    This patch implements the easiest form of register class inference:  For
    every register class, and for every sub-register SubIdx, the subset of
    registers in RC that have a SubIdx sub-register should also be a register
    class.
    
    This does create some new register classes for the targets in the tree:
--
    
      -Immediately before the arguments: -(id)first:(int)x second:(int)y;
      -With a space between the arguments: -(id)first: (int)x second: (int)y;
      -For nullary selectors, immediately before ';': -(void)release;
    
    In such cases we infer the locations instead of storing them.
    
    llvm-svn: 140989

commit b98e3714f2197ef0bb510c0143c369ac125da0c7
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
--
    
      -Immediately before the arguments: [foo first:1 second:2]
      -With a space between the arguments: [foo first: 1 second: 2]
      -For nullary selectors, immediately before ']': [foo release]
    
    In such cases we infer the locations instead of storing them.
    
    llvm-svn: 140987

commit 59ad1e3f574a33f2a2d3a1d80a1a22b657deba09
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
--

commit 9925f197cce894e8913d38e9b259935219a69fc6
Author: Bill Wendling <isanbard@gmail.com>
Date:   Fri Sep 30 23:19:55 2011 +0000

    When inferring the pointer alignment, if the global doesn't have an initializer
    and the alignment is 0 (i.e., it's defined globally in one file and declared in
    another file) it could get an alignment which is larger than the ABI allows for
    that type, resulting in aligned moves being used for unaligned loads.
    
    For instance, in file A.c:
--
    
    - hasSubClassEq() and friends become O(1) instead of O(N).
    
    - getCommonSubClass() becomes O(N) instead of O(N^2).
    
    In the future, TableGen will infer register classes.  This makes it
    cheap to add them.
    
    llvm-svn: 140898

commit 8153f6c39fa78f240813a28d3807a489f655d69f
--
commit f25c37e384abbe0b6c2f3cd0c8f1ac29986a3079
Author: Akira Hatanaka <ahatanak@gmail.com>
Date:   Thu Sep 22 23:31:54 2011 +0000

    Make changes in instruction and pattern definitions so that tablegen does not
    complain it cannot infer types in patterns. Fix a mistake in definition of
    SDT_MipsExtractElementF64.
    
    llvm-svn: 140354

commit adea3f0c0175a2f119a0fdfb270299061aef89c2
--
Date:   Thu Sep 8 01:46:34 2011 +0000

    Implement the Objective-C 'instancetype' type, which is an alias of
    'id' that can be used (only!) via a contextual keyword as the result
    type of an Objective-C message send. 'instancetype' then gives the
    method a related result type, which we have already been inferring for
    a variety of methods (new, alloc, init, self, retain). Addresses
    <rdar://problem/9267640>.
    
    llvm-svn: 139275

--
    Add a virtual method GetHardwareWatchpointHit() to the DNBArchProtocol base class
    which consults the architecture to return the watchpoint hit; otherwise return an
    invalid index.
    
    Add impl. of the method to X86_64 and I386 subclasses, plus reset the debug status
    register before we resume execution of the inferior thread.
    
    llvm-svn: 139034

commit 7aa58f1eea3fec17ce82a2d21a3571a5976527b8
Author: Richard Trieu <rtrieu@google.com>
--

commit b7abce9f8bed3b7bc19a71a596463505fe353df8
Author: Jordy Rose <jediknil@belkadan.com>
Date:   Tue Aug 30 01:51:13 2011 +0000

    Remove obsolete ObjCInferRelatedReturnType from LangOptions...the correct option is ObjCInferRelatedResultType.
    
    llvm-svn: 138793

commit 3480ef24d1c85e7a44a12c29c73723307af0233c
Author: John McCall <rjmccall@apple.com>
--

commit 9f4f5d94cd9a7245b8dfe36a94790beae5da7c41
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Aug 12 20:19:22 2011 +0000

    Add TestInferiorChanged.py to test that lldb reloads the inferior after it was changed during the debug session.
    First, main.c causes a crash, the inferior then gets re-built with main2.c which is not crashing.
    
    Add Base.cleanup(self, dictionary=None) for platform specfic way to do cleanup after build.
    This plugin method is used by the above test case to cleanup the main.c build before rebuild for main2.c.
    
    llvm-svn: 137500
--

commit 49b236a705d8d7619a4b5fcc12329e32e75b2a46
Author: Douglas Gregor <dgregor@apple.com>
Date:   Thu Aug 4 15:46:00 2011 +0000

    The AST reader was forgetting to parse ObjCInferRelatedReturnType
    
    llvm-svn: 136879

commit 00f39c152113908898499a6aba912b8ee7c785d9
Author: Duncan Sands <baldrick@free.fr>
--
    declared in protocols and categories.  There are mismatches
    that we would like to diagnose but aren't yet, but this
    is fine for now.
    
    I looked at approaches that avoided doing this lookup
    unless we needed it, but the infer-related-result-type
    checks were doing it anyway, so I left it with the same
    fast-path check for no previous declartions of that
    selector.
    
    llvm-svn: 135743
--

commit af6e82f6110f71d89e960109bfe7b1bc028cd16a
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Tue Jul 12 23:18:03 2011 +0000

    Add a test case to exercise 'target variable' command before and after running the inferior.
    Currently it fails after the inferior is run.
    
    rdar://problem/9763907
    
    llvm-svn: 135009

--

    In ARC mode, consider Objective-C lifetime types (object pointers and
    block pointers) that don't have any qualification to be POD types. We
    were previously considering them to be non-POD types, because this was
    convenient in C++ for is_pod-like traits. However, we now end up
    inferring lifetime in such cases (template arguments infer __strong),
    so it is not necessary.
    
    Moreover, we want rvalues of object type (which have their lifetime
    stripped) to be PODs to allow, e.g., va_arg(arglist, id) to function
    properly. Fixes <rdar://problem/9758798>.
--
commit 1d3e880c2cd462ac3e9c4f547043636503af14cd
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Mon Jul 11 23:38:23 2011 +0000

    Passing in os.ctermid() as the arg for SBTarget.Launch(...) for stdin_path, stdout_path, and stderr_path
    is just wrong and resulted in the inferior's output getting mixed into the GDB remote communication's
    log file.  Change all test cases to not pass os.ctermid() and either use SBTarget.LaunchSimple() or
    SBTarget.Launch() and pass None as stdin_path/stdout_path/srderr_path to use a pseudo terminal.
    
    rdar://problem/9716499 program output is getting mixed into the GDB remote communications
    
--

commit 56b92a7b04f4d8a3c30a11470833ec2cba32df96
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Mon Jul 11 19:15:11 2011 +0000

    Update the test scenario for find_global_variables() to now start the inferior process
    before issuing API calls to find the global variable and to get its value.
    
    rdar://problem/9700873 has been updated to reflect the latest status.  The dwarf case
    now does not seg fault if the inferior is not started; instead, for dwarf case, the
    value retrieved from the global variable is None.
    
    llvm-svn: 134909

commit 39c0482680d4f59127242c796c94950d8d40e939
--
commit 24fc0decfe337258a3dacc7936a9da84e2406cdc
Author: John McCall <rjmccall@apple.com>
Date:   Wed Jul 6 00:26:06 2011 +0000

    Change the driver's logic about Objective-C runtimes:  abstract out a
    structure to hold inferred information, then propagate each invididual
    bit down to -cc1.  Separate the bits of "supports weak" and "has a native
    ARC runtime";  make the latter a CodeGenOption.
    
    The tool chain is still driving this decision, because it's the place that
    has the required deployment target information on Darwin, but at least it's
--

commit 9ab661b163feda9ad40d07464a66c1c48360e238
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
Date:   Fri Jul 1 22:23:05 2011 +0000

    Use transferARCOwnershipToDeclaratorChunk in inferARCWriteback, no functionality change.
    
    llvm-svn: 134277

commit ea57a9be176fcf0f88e3349d7ca0793c04329a08
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
Date:   Fri Jul 1 22:23:03 2011 +0000

    Fix assertion hit in inferARCWriteback.
    
    llvm-svn: 134276

commit 7192a3b84118114e65128bd2c4a6d9c0be6413e9
Author: Argyrios Kyrtzidis <akyrtzi@gmail.com>
--

commit fd70999bb4934fb89ea26baea4472d5d25a5b032
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Mon Jun 27 18:25:00 2011 +0000

    Move top level test dirs platform and inferior-crashing to reside under functionalities and order to reside under macosx.
    
    llvm-svn: 133919

commit 85f21f2029a9be360c734c8ce09a8f01bd7ee3f6
Author: Johnny Chen <johnny.chen@apple.com>
--
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Tue Jun 21 19:47:11 2011 +0000

    Add a test file "TestFailures.py" to try to capture test failures which occur when running
    with no delay between successive test cases.  This one happend to capture a test failure where
    the inferior shoud stop at a breakpoint but did not (radar will be filed to capture the log files
    as well as the test session files):
    
    [12:40:37] johnny:/Volumes/data/lldb/svn/trunk/test $ DEBUG_LLDB_LOG=/tmp/lldb.log DEBUG_GDB_REMOTE_LOG=/tmp/gdb-remote.log ./dotest.py -v -p TestFailures.py
    LLDB-63
    Path: /Volumes/data/lldb/svn/trunk
--
    Simplify the the generic AbstractBase.py test base for testing variable types.
    We still have the the issue where running:
    
        ./dotest.py -v types
    
    we have test failures where the inferior either runs to exited with status 0 or
    the inferior stops but not because of breakpoint (for example):
    
    runCmd: process status
    output: Process 90060 stopped
    * thread #1: tid = 0x2d03, 0x000000010000e2ca, stop reason = EXC_BAD_ACCESS (code=2, address=0x10000e2ca)
      frame #0: 0x000000010000e2ca
    
    There are two cases where the inferior stops for the breakpoint (good), but the expression parser
    prints out the wrong information.  The two failures are:
    
    Failure-TestFloatTypesExpr.FloatTypesExprTestCase.test_double_type_with_dsym.log
    Failure-TestFloatTypesExpr.FloatTypesExprTestCase.test_double_type_with_dwarf.log
    
    I'll file a radar on the two expression parser misbehave, while continue investigating why the
    inferior stops for the wrong reason or does not stop at all.
    
    For now, you'll need to do:
    
        ./dotest.py -v -w types
    
--
Date:   Fri Jun 17 22:26:49 2011 +0000

    Objective-C++ ARC: do not mangle __unsafe_unretained lifetime
    qualifiers, so that an __unsafe_unretained-qualified type T in ARC code
    will have the same mangling as T in non-ARC code, improving ABI
    interoperability. This works now because we infer or require a
    lifetime qualifier everywhere one can appear in an external
    interface. Another part of <rdar://problem/9595486>.
    
    llvm-svn: 133306

--

commit e46db90c9aa00cbe1cbc6211ab4c5181ce287ce4
Author: Douglas Gregor <dgregor@apple.com>
Date:   Fri Jun 17 22:11:49 2011 +0000

    Objective-ARC++: infer template type arguments of
    ownership-unqualified retainable object type as __strong. This allows
    us to write, e.g.,
    
      std::vector<id>
    
    and we'll infer that the vector's element types have __strong
    ownership semantics, which is far nicer than requiring:
    
      std::vector<__strong id>
    
    Note that we allow one to override the ownership qualifier of a
--
      struct X {
        typedef __weak T type;
      };
    
    X<id> is treated the same as X<__strong id>. At instantiation type,
    the __weak in "__weak T" overrides the (inferred or specified)
    __strong on the template argument type, so that we can still provide
    metaprogramming transformations.
    
    This is part of <rdar://problem/9595486>.
    
--
    
      Add stronger assertTrue for frame0's args.
    
    o TestPrintStackTraces.py:
    
      Launch the inferior with ["abc", "xyz"] and expect '(int)argc=3' in the stack traces, since
      by design the inferior is built with debug info.
    
    llvm-svn: 133204

commit 4f5f84c7e7beb4caa222b835227cccc653d820f4
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
--
commit a860e6aebcdc7fd7edfe9aaa302d1e64fe6e493e
Author: Douglas Gregor <dgregor@apple.com>
Date:   Tue Jun 14 23:20:43 2011 +0000

    Introduce a -cc1-level option to turn off related result type
    inference, to be used (only) by the Objective-C rewriter.
    
    llvm-svn: 133025

commit 192ed0b7eebcdf7905f595591496c22ced5a7042
Author: Ted Kremenek <kremenek@apple.com>
--

commit 933f6f617dc047c410a8a472ea3a4ae41450ab9e
Author: Peter Collingbourne <peter@pcc.me.uk>
Date:   Tue Jun 14 03:55:34 2011 +0000

    Add license header to InferiorCallPOSIX.cpp
    
    llvm-svn: 132966

commit 91322f1938427bda82b4cd7b095f747b72c46f50
Author: Peter Collingbourne <peter@pcc.me.uk>
--

commit c9224d6714b1902ef661f6c9a3dbad7faa18fedd
Author: Douglas Gregor <dgregor@apple.com>
Date:   Mon Jun 13 16:42:53 2011 +0000

    Eliminate the -f[no]objc-infer-related-result-type flags; there's no
    reason to allow the user to control these semantics through a flag.
    
    llvm-svn: 132919

commit bf31c4e4ca1fb09884b5c2030718ab4772320c7d
--

commit 53cad081e31c30db31f357b03743c4e2b840bdbf
Author: Douglas Gregor <dgregor@apple.com>
Date:   Sat Jun 11 04:42:58 2011 +0000

    Extra test for related result type inference
    
    llvm-svn: 132874

commit 2720dc656bca9f9a4b1c115e85481af5c07536e3
Author: Douglas Gregor <dgregor@apple.com>
--
          receiver
          type ('NSArray *')
    - (id)init;
    ^
    
    It also means that we get decent type inference when writing code in
    Objective-C++0x:
    
      auto array = [[NSMutableArray alloc] initWithObjects:@"one",  @"two",nil];
      //    ^ now infers NSMutableArray* rather than id
    
    llvm-svn: 132868

commit 3d4e64b082717170ef918cb88b337087fb461b35
Author: Andrew Trick <atrick@apple.com>
--

commit 0aa91e0a666003b7b48d80cd65146ba3cf752310
Author: Douglas Gregor <dgregor@apple.com>
Date:   Sun Jun 5 05:04:23 2011 +0000

    When inferring the result type of a block based on a return statement
    with a type-dependent expression, infer the placeholder type
    'Context.DependentTy' to indicate that this is just a
    placeholder. Fixes PR9982 / <rdar://problem/9486685>.
    
    llvm-svn: 132657

--

commit c95f5de211e12271951a01e576327344daf2f0cf
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Jun 3 21:27:28 2011 +0000

    Add InferiorCallPOSIX.cpp/.h into the xcode project file to fix build error.
    
    llvm-svn: 132594

commit 967ea7ca6b784ee2d6c8ab8bc2e38ffa4657ee23
Author: Alexis Hunt <alercah@gmail.com>
--

commit 70969ef10270d3be63498be123ef98ac5dcf2f57
Author: Peter Collingbourne <peter@pcc.me.uk>
Date:   Fri Jun 3 20:40:44 2011 +0000

    Implement ProcessLinux::Do{Allocate,Deallocate}Memory using inferior mmap/munmap calls
    
    llvm-svn: 132585

commit 99f9aa02c21c3de012e2c4b75059bcef01cd4587
Author: Peter Collingbourne <peter@pcc.me.uk>
Date:   Fri Jun 3 20:40:38 2011 +0000

    Move inferior mmap/munmap call code into their own functions in utility lib
    
    llvm-svn: 132584

commit 1740be7cd970f7d19143c9dd9003bca43c91d3fb
Author: Peter Collingbourne <peter@pcc.me.uk>
--

commit 2dda91690f9f8ca6fcdf1ef2624007f1bfd64968
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Wed May 25 22:01:16 2011 +0000

    Add a little twist to the disasm.py script so that it is possible to terminate the inferior process
    by entering 'Ctrl-D' or 'quit'.
    
    llvm-svn: 132088

commit 84b64a3e926f5daffe9eb09207ce028e13c883c5
--
    Some ABIs or architectures have fixed width instructions and must be aligned
    to a 2 or 4 byte boundary. "pc" can be an opcode or a callable address which
    means the load address might be decorated with extra bits (such as bit zero
    to indicate a thumb function call for ARM targets), so take this into account
    when returning true or false. The address should also be validated to ensure
    it is a valid address for the address size of the inferior process. 32 bit
    targets should make sure the address is less than UINT32_MAX.
    
    Modified UnwindLLDB to use the new ABI functions to help it properly terminate
    stacks.
    
--
    Fixed ThreadPlanCallFunction::ReportRegisterState(...) to only dump when
    verbose logging is enabled and fixed the function to use the new
    RegisterValue method of reading registers.
    
    Fixed the GDB remote client to not send a continue packet after receiving
    stdout or stderr from the inferior process.
    
    llvm-svn: 131628

commit 41025dc95bd215cf5aeb5e3eb675f835183e1f7e
Author: Cameron Zwarich <zwarich@apple.com>
--
commit 775022652b91213bf86fe8c93e8cd477e5374c7f
Author: Sean Callanan <scallanan@apple.com>
Date:   Thu May 12 23:54:16 2011 +0000

    Introduced support for UnknownAnyTy, the Clang type
    representing variables whose type must be inferred
    from the way they are used.  Functions without debug
    information now return UnknownAnyTy and must be cast.
    
    Variables with no debug information are not yet using
    UnknownAnyTy; instead they are assumed to be void*.
--
Date:   Sat May 7 21:22:39 2011 +0000

    Teach TableGen to automatically generate missing SubRegIndex instances.
    
    The RegisterInfo.td file should only specify the indexes that sources need to
    refer to. The rest is inferred.
    
    llvm-svn: 131058

commit 9ca5465500f6351909a32039007373a367d7bca3
Author: Douglas Gregor <dgregor@apple.com>
--

commit d545d9cbbc4edfd4e83aa9dd04b40b948b325103
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Apr 22 00:33:09 2011 +0000

    Make the test case more robust by installing a teardown hook to kill the inferior
    rather than calling "process kill" explicitly at the end of the test.
    
    The test might not even reach the end because it could have failed prematurely.
    
    llvm-svn: 129963
--
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Tue Apr 19 19:04:38 2011 +0000

    Add a TraceOn(self) method to the base test class, which returns True if we are
    currently in trace mode (-t to dotest.py), i.e., tracing the lldb command execution.
    Change TestInferiorCrashing.inferior_crashing_python(self) to check this flag in
    order to print the stack trace of the inferior thread.
    
    llvm-svn: 129785

commit 4a2283a95499a163dddf372d9541f9db72177dde
Author: Johnny Chen <johnny.chen@apple.com>
--

commit 2c40561743fe50a98f35804a324b7d7e44bab8ed
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Thu Apr 14 22:20:36 2011 +0000

    Add a test to check that lldb reliably catches a crashing inferior (both command and Python API).
    
    llvm-svn: 129542

commit 02e85f3bc5fcb784c44851b2d557cdeb63a7ca0b
Author: Richard Smith <richard-llvm@metafoo.co.uk>
--

    While SimplifyDemandedBits constant folds this, we can't rely on it here.
    
    It's possible to craft an input that hits the recursion limits in a way
    that SimplifyDemandedBits doesn't simplify the icmp but ComputeMaskedBits
    can infer which bits are zero.
    
    No test case as it depends on too many other things. Fixes PR9609.
    
    llvm-svn: 128777

--
Date:   Wed Mar 30 15:55:52 2011 +0000

    linux: initial support for 'real' signal handling
    
    This patch upgrades the Linux process plugin to handle a larger range of signal
    events.  For example, we can detect when the inferior has "crashed" and why,
    interrupt a running process, deliver an arbitrary signal, and so on.
    
    llvm-svn: 128547

commit 8564e0de96d18eba9d8501611591c7c3ef9d8be3
--

commit f6ce2fb1b3e94ba7e99fc7093f5ad6402fab64ab
Author: Joerg Sonnenberger <joerg@bec.de>
Date:   Wed Mar 16 20:15:43 2011 +0000

    Refactor program name logic. Extend it to infer the target triple from
    the program name, if it includes it as proper prefix. This makes calling
    clang with -ccc-host-triple x86_64-linux the same as calling it with the
    name x86_64-linux-clang.
    
    llvm-svn: 127753
--
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Tue Mar 15 05:09:26 2011 +0000

    - Add "Bitcast" target instruction property for instructions which perform
    nothing more than a bitcast.
    - Teach tablegen to automatically infer "Bitcast" property.
    
    llvm-svn: 127667

commit c8c4e5f37103d9b66ba95e40a027e98fa3cb41e4
Author: Ted Kremenek <kremenek@apple.com>
--
    Add a test directory stop-hook to test the newly added "target stop-hook" command.
    This uses pexpect module to spawn a 'lldb' program and uses pseudo-TTY to talk to
    the child application.
    
    The test cases test setting breakpoints, adding a stop-hook with line range, and
    verifies that when the inferior stops, the stop-hook will fire off when it is
    within range and will not fire off when it is out of range.
    
    llvm-svn: 127519

commit 174d872702ce4879bea6db9e03f32333dd7a75c6
--

commit d648135902e94fe8ec1e3387b8a6b21fb476b8fd
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Mon Mar 7 22:46:30 2011 +0000

    Add an extra twist of stopping the inferior in a breakpoint, and then continue till it's done.
    We should still see the entire stdout redirected once the process is finished.
    
    llvm-svn: 127184

commit bc1f48f6547a2043a7b9516356d7caa394e2d029
--

commit 75625aa1187096849c42f003d3f7801feaa4dee6
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Mon Mar 7 22:29:04 2011 +0000

    Add test cases for SBTarget.Launch() API with the stdout of the inferior redirected to a file.
    
    llvm-svn: 127179

commit a367d80763c96f2cecf31017162ae62b77170c9e
Author: Carl Norum <carl.norum@apple.com>
--
commit e0ec9ea5cee77e0b59c91a4afff16b54c1c383a1
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Mar 4 01:35:22 2011 +0000

    Add the ability for the test suite to specify a list of compilers and a list of architectures
    on the command line.  For example, use '-A x86_64^i386' to launch the inferior use both x86_64
    and i386.
    
    This is an example of building the debuggee using both clang and gcc compiers:
    
    [17:30:46] johnny:/Volumes/data/lldb/svn/trunk/test $ ./dotest.py -C clang^gcc -v -f SourceManagerTestCase.test_modify_source_file_while_debugging
--

commit 86bc21ffcf1d4875818c9631bbd95152780655a9
Author: John McCall <rjmccall@apple.com>
Date:   Wed Mar 2 11:33:24 2011 +0000

    Provide an attribute, objc_method_family, to allow the inferred family
    of an Objective-C method to be overridden on a case-by-case basis.  This
    is a higher-level tool than ns_returns_retained &c.;  it lets users specify
    that not only does a method have different retain/release semantics, but
    that it semantically acts differently than one might assume from its name.
    This in turn is quite useful to static analysis.
--
commit 90eb2cbaee2e410585c44d57b2d5bcb9b9d9c3e1
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Feb 25 23:15:09 2011 +0000

    Add a test case to exercise the process launch flag of '-w <path>' which sets the
    current working directory when running the inferior.  Radar filed:
    
        # rdar://problem/9056462
        # The process launch flag '-w' for setting the current working directory not working?
    
    llvm-svn: 126529
--
    We can also specify if we want to debug a program where shared libraries
    are dynamically loaded using a DynamicLoader plug-in
    (target.execution-mode = dynamic), or wether we will treat all symbol files
    as already linked at the correct address (target.execution-mode = static).
    
    We can also specify if the inferior we are debugging is being debugged on
    a bare board (target.execution-os-type = none), or debugging an OS where
    we have a JTAG or other direct connection to the inferior stops the entire
    OS (target.execution-os-type = halted), or if we are debugging a program on
    something that has live debug services (target.execution-os-type = live).
    
    For the "target.execution-os-type = halted" mode, we will need to create
    ProcessHelper plug-ins that allow us to extract the process/thread and other
--
commit 6b657aed3365d6bf77b0eda4020eeea5661535e7
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Feb 10 05:36:31 2011 +0000

    Enhance a bunch of transformations in instcombine to start generating
    exact/nsw/nuw shifts and have instcombine infer them when it can prove
    that the relevant properties are true for a given shift without them.
    
    Also, a variety of refactoring to use the new patternmatch logic thrown
    in for good luck.  I believe that this takes care of a bunch of related
    code quality issues attached to PR8862.
--
commit ab62873b63523dfa16826dfeab61adab475d3202
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Wed Feb 2 00:56:40 2011 +0000

    Fix test function breakpoint_command_script_parameters()'s expect-pattern so that
    it passes when using clang as the compiler to build the inferior.
    
    llvm-svn: 124707

commit 03dbf2e2a5241f37789f4cc9ee8b7ae538bee685
Author: Greg Clayton <gclayton@apple.com>
--
    "off", or "0" for false.
    
    Fixed debugserver to properly handle files for STDIN, STDOUT and STDERR that are not
    already opened. Previous to this fix debugserver would only correctly open and dupe
    file handles for the slave side of a pseudo terminal. It now correctly handles
    getting STDIN for the inferior from a file, and spitting STDOUT and STDERR out to
    files. Also made sure the file handles were correctly opened with the NOCTTY flag
    for terminals.
    
    llvm-svn: 124060

--
    Fixed "StateType Process::WaitForProcessStopPrivate (...)" to correctly pass
    the timeout along to WaitForStateChangedEventsPrivate() and made the function
    behave correctly with respect to timing out.
    
    Added separate STDIN, STDOUT, and STDERR support to debugserver. Also added
    the start of being able to set the working directory for the inferior process.
    
    llvm-svn: 124049

commit 5a72fdb05b6474d02bc22444240d6b7fc7acb6fe
Author: Anders Carlsson <andersca@mac.com>
--
commit 4dc72284b254925713e08f5cf8d992d28a4a6412
Author: Greg Clayton <gclayton@apple.com>
Date:   Thu Jan 20 07:53:45 2011 +0000

    Fixed the async packets (packets that need to be sent to the GDB server
    while the inferior is running) to be fast. The previous code would always
    cause the sender to timeout, yet still return success due to the way we
    were waiting for a value (incorrect value) to change. Now the ProcessGDBRemote
    plug-in has a public and private "is running" predicate. This allows things
    that need to send async packets to interrupt and wait for the private "is running"
    state to be flipped to false, and then resume quickly with no timeout.
--

commit e3296308730ce840f8ce2240d260ab54f430215c
Author: Stephen Wilson <wilsons@start.ca>
Date:   Wed Jan 19 01:30:44 2011 +0000

    Timeout if we fail to receive a state change event when destroying an inferior.
    
    llvm-svn: 123796

commit 9f71f0cb667422d6778768b101e56e15b528e2ca
Author: Stephen Wilson <wilsons@start.ca>
--
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Mon Jan 17 22:35:39 2011 +0000

    Terminate the current process being debugged.
    The test framework was relying on detecting either "run" or
    "process launch" command to automatically kill the inferior.
    
    llvm-svn: 123683

commit 283e89dd22c69d6fd584924cb434ff5c08d0e72a
Author: Devang Patel <dpatel@apple.com>
--
    element in this vector contains the (possibly dynamic) entry address of the
    process.  One does not need to walk the stack to find this information as it is
    also available under /proc/<pid>/auxv.  The new AuxVector class provides a
    convenient read-only view of this auxiliary vector information.  We use the
    dynamic entry address and the address as specified in the object file to compute
    the actual load address of the inferior image.  This strategy works for both
    normal executables and PIE's.
    
    llvm-svn: 123592

commit ec517cdf24a44bce1e4342578703c1449025d18a
--

commit 2f8e0f24dde1832809c4aa8e39be76685168655d
Author: Stephen Wilson <wilsons@start.ca>
Date:   Sat Jan 15 00:13:27 2011 +0000

    Set the ID of a ProcessLinux instance to the PID of the inferior on launch.
    
    llvm-svn: 123503

commit 57740ecedbc8e6eda7cd74659204a35b5a190d00
Author: Stephen Wilson <wilsons@start.ca>
--
Date:   Fri Jan 14 21:08:59 2011 +0000

    Extend the ObjectFile interface to support dynamic loading on ELF platforms.
    
    Debuggers on ELF platforms hook into the runtime linker by monitoring a special
    "rendezvous" embedded in the address space of the inferior process.  The exact
    location of this structure is filled in by the runtime linker and can be
    resolved by locating the DT_DEBUG entry in the processes .dynamic section.  The
    new GetImageInfoAddress() method (morally equivalent to
    Process::GetImageInfoAddress) provides the mechanism to locate this information.
    
    GetEntryPoint() simply returns the address of the start symbol in the executable
    if present.  It is useful to the dynamic loader plugin for ELF systems as this
    is the earliest point where LLDB can break and probe the inferiors .dynamic
    section and rendezvous structure.  Also, this address can be used in the
    computation of the virtual base address for position independent executables.
    
    llvm-svn: 123466

--

commit 29e14edc8da9f9687f858db045931daa16c40ecb
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Dec 26 23:42:51 2010 +0000

    implement enough of the memset inference algorithm to recognize and insert
    memsets.  This is still missing one important validity check, but this is enough
    to compile stuff like this:
    
    void test0(std::vector<char> &X) {
      for (std::vector<char>::iterator I = X.begin(), E = X.end(); I != E; ++I)
--
    values or persistent expression variables. Now if an expression consists of
    a value that is a child of a variable, or of a persistent variable only, we
    will create a value object for it and make a ValueObjectConstResult from it to
    freeze the value (for program variables only, not persistent variables) and
    avoid running JITed code. For everything else we still parse up and JIT code
    and run it in the inferior.
    
    There was also a lot of clean up in the expression code. I made the
    ClangExpressionVariables be stored in collections of shared pointers instead
    of in collections of objects. This will help stop a lot of copy constructors on
    these large objects and also cleans up the code considerably. The persistent
--
commit 8d846daa81396c888d754156b189dfea9574d81c
Author: Greg Clayton <gclayton@apple.com>
Date:   Wed Dec 8 22:23:24 2010 +0000

    Any arguments that are not options to the "lldb" command line driver, now get
    used as the arguments for the inferior program. So for example you can do
    
    % lldb /bin/ls /tmp ~/Documents
    
    And "lldb" will use "/bin/ls" as the program and send arguments "/tmp" and
    "~/Documents" as the launch args.
--
    If you specify a file, then all remaining args after option parsing
    will be used for program arguments:
    
    % lldb -f /bin/ls /tmp ~/Documents
    
    If you need to pass option values to your inferior program, just terminate
    the "lldb" command line driver options with "--":
    
    % lldb -- /bin/ls -AFl /tmp
    
    The arguments are placed into the "settings" variable named
--
commit f8da863196a173ed90c627e468d42381bf48675d
Author: Caroline Tice <ctice@apple.com>
Date:   Fri Dec 3 18:46:09 2010 +0000

    Add '-no-stdio' option to 'process launch' command, which  causes the
    inferior to be launched without setting up terminal stdin/stdout for it
    (leaving the lldb command line accessible while the program is executing).
    Also add a user settings variable, 'target.process.disable-stdio' to allow
    the user to set this globally rather than having to use the command option
    each time the process is launched.
    
--
    update the process state, and then produce a new event with the interrupted
    bit set and send it. Anyone listening to the event would get the stopped event
    with a process that whose state was set to "running".
    
    Fixed debugserver to not have to be spawned with the architecture of the
    inferior process. This worked fine for launching processes, but when attaching
    to processes by name or pid without a file in lldb, it would fail.
    
    Now debugserver can support multiple architectures for a native debug session
    on the current host. This currently means i386 and x86_64 are supported in
    the same binary and a x86_64 debugserver can attach to a i386 executable.
    This change involved a lot of changes to make sure we dynamically detect the
    correct registers for the inferior process.
    
    llvm-svn: 119680

commit 19ca5608db90bf06bfaba3e1b28af6ed68165d7d
Author: Sean Callanan <scallanan@apple.com>
--
commit 5e254d37a64c30b3b909c79807e64d0c556560c8
Author: Caroline Tice <ctice@apple.com>
Date:   Fri Nov 5 22:37:44 2010 +0000

    If debugserver is running on the local machine, pass it a
    pseudoterminal to pass to the inferior for the inferior's I/O
    (to allow direct writing, rather than passing all the I/O around
    via packets).
    
    llvm-svn: 118308

--
Date:   Fri Oct 22 23:25:16 2010 +0000

    Added a temporary hack to allow casting of Objective-C
    method results to int.  This will only last until we
    get accurate type information for Objective-C methods
    or some way of making their types inferred by the
    parser.
    
    llvm-svn: 117178

commit c372775cc89a82e45dbd28f4e3dde3bf08b64176
--

commit bc095dbe688df9bf4e83bba336742ff05f552673
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Fri Oct 22 19:51:42 2010 +0000

    The test should remove 'output.txt' if it exists before launching the inferior
    process which is supposed to create the file.
    
    llvm-svn: 117136

commit 9d0122af7d0989ba391de5c4d9fa5b896ae70c2c
--
commit 6162f9774a0dd84f1c72f43d4ad11880f36cae7d
Author: Greg Clayton <gclayton@apple.com>
Date:   Tue Oct 19 18:15:50 2010 +0000

    Fixed all known race conditions with starting a process in a new terminal.
    We now spawn a thread to accept a unix socket connection from the inferior
    when it spawns in the terminal, then we launch the process, then we get
    the pid back through the unix socket, and then wait for it to SIGSTOP.
    
    darwin-debug now clears the terminal screen and prints out the program and
    arguments that are about to be launched.
--

commit add29982be9435be3ce7815e96d6dcb238207584
Author: Greg Clayton <gclayton@apple.com>
Date:   Tue Oct 19 17:03:58 2010 +0000

    Use AppleScript when lauching inferior in terminal so the command that
    is being run is visible in the terminal as opposed to just seeing a path
    to a .command file.
    
    llvm-svn: 116814

--
    
    Added support for connecting to named sockets (unix IPC sockets) in
    ConnectionFileDescriptor.
    
    Modified the Host::LaunchInNewTerminal() for MacOSX to return the process
    ID of the inferior process instead of the process ID of the Terminal.app. This
    was done by modifying the "darwin-debug" executable to connect to lldb through
    a named unix socket which is passed down as an argument. This allows a quick
    handshake between "lldb" and "darwin-debug" so we can get the process ID
    of the inferior and then attach by process ID and avoid attaching to the
    inferior by process name since there could be more than one process with
    that name. This still has possible race conditions, those will be fixed
    in the near future. This fixes the SIGPIPE issues that were sometimes being
    seen when task_for_pid was failing.
    
    llvm-svn: 116792
--
commit 58d1c9a44f9c3a0b2813e2a63f912d3fe8ec3840
Author: Greg Clayton <gclayton@apple.com>
Date:   Mon Oct 18 04:14:23 2010 +0000

    Still trying to get detach to work with debugserver. Got a bit closer,
    but something is still killing our inferior.
    
    Fixed an issue with darwin-debug where it wasn't passing all needed arguments
    to the inferior.
    
    Fixed a race condition with the attach to named process code.
    
    llvm-svn: 116697

--
    } PathType;
    
    All places that were finding executables are and python paths are now updated
    to use this Host call.
    
    Added another new host call to launch the inferior in a terminal. This ability
    will be very host specific and doesn't need to be supported on all systems.
    MacOSX currently will create a new .command file and tell Terminal.app to open
    the .command file. It also uses the new "darwin-debug" app which is a small
    app that uses posix to exec (no fork) and stop at the entry point of the
    program. The GDB remote plug-in is almost able launch a process and attach to
--

commit b7fd763369f8e10a1d0dcab85351572dea374ace
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Thu Oct 14 15:58:53 2010 +0000

    Add more comments and wait a little bit after resuming the inferior process before
    sending it a signal.
    
    llvm-svn: 116481

commit 5816ccd4b5736d69d8f510bd71fc07b796bf68cb
--

commit b6da2be7e8b81f327164635b8b02ec0388960824
Author: Chris Lattner <sabre@nondot.org>
Date:   Wed Oct 6 05:20:57 2010 +0000

    refactor things a bit, now the REX_W and OpSize prefix bytes are inferred from the type info.
    
    llvm-svn: 115745

commit 7bbd809b6ce49b50de30f8695e8c3a7ad292949f
Author: Chris Lattner <sabre@nondot.org>
--

commit 6b2aaf1a364d0be8779cce04fbd82c7bc473e587
Author: Daniel Dunbar <daniel@zuster.org>
Date:   Mon Sep 27 20:12:58 2010 +0000

    Hard to imagine there are still people using inferior compilers.
    
    llvm-svn: 114862

commit d116d8a4e9120bc8e431154f40964f9332074071
Author: Daniel Dunbar <daniel@zuster.org>
--

commit ea952f05a5a95265febb082b7203b175be3d3f22
Author: Chris Lattner <sabre@nondot.org>
Date:   Tue Sep 21 17:24:05 2010 +0000

    fix the code that infers SV info to be correct when dealing
    with an indexed load/store that has an offset in the index.
    
    llvm-svn: 114449

commit 1ccded77c0923c3582f7d3953c8cf99f1c748096
--
commit 15d84c460a10b6e344a5231e16af0a97c74ed35e
Author: Chris Lattner <sabre@nondot.org>
Date:   Tue Sep 21 04:53:42 2010 +0000

    chagne interface to SelectionDAG::getAtomic to take a MachinePointerInfo,
    eliminating some weird "infer a frame address" logic which was dead.
    
    llvm-svn: 114396

commit 3b5dc0cdad467ea4f3052336dd5beefe7fda794d
Author: Chris Lattner <sabre@nondot.org>
--
commit a52c155e01bcfe39d18ca8bf31f8065c07fbc321
Author: Greg Clayton <gclayton@apple.com>
Date:   Tue Sep 14 03:47:41 2010 +0000

    Fixed an issue that was always causing an extra empty argument to be sent
    to any inferior process because the code was checking if no run args were
    set and then adding and empty string. This was happening for environment
    vars as well.
    
    llvm-svn: 113831

--
    static class array. It turns out that gcc 4.2 will emit DWARF that correctly
    describes the PointType, but it will incorrectly emit debug info for the
    "g_points" array where the following things are wrong:
     - the DW_TAG_array_type won't have a subrange info
     - the DW_TAG_variable for "g_points" won't have a valid byte size, so even
       though we know the size of PointType, we can't infer the actual size
       of the array by dividing the size of the variable by the number of
       elements.
    
    We want to make sure clang and llvm-gcc handle this correctly.
    
--

commit 63dfb276472b925d3b865dd6bd1940db8b299c6c
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Wed Sep 1 00:15:19 2010 +0000

    Avoid killing the inferior process twice by passing a setCookie=False keyword
    argument when issuing a "run" lldb command within the test case meant to
    exercise the Python APIs, but is using the command interface due to certain
    reason (such as target.LaunchProcess() does not reliably bring up the inferior).
    
    llvm-svn: 112682

commit f9e43cef544d33c6d86ce82d9e82e2f3b6152098
Author: Douglas Gregor <dgregor@apple.com>
--

commit b695c83de9e07fe030f423ea92656ae126ec8bb1
Author: Owen Anderson <resistor@mac.com>
Date:   Tue Aug 24 21:59:42 2010 +0000

    Add support for inferring values for the default cases of switches.
    
    llvm-svn: 111971

commit b44eb0b900a0c35024c7691f00d1a8cce6b865b4
Author: Daniel Dunbar <daniel@zuster.org>
--

commit da34de159984fd3dcc7d9665fcd7fe9f651a1b61
Author: Owen Anderson <resistor@mac.com>
Date:   Tue Aug 24 20:47:29 2010 +0000

    Add support for inferring that a load from a pointer implies that it is not null.
    
    llvm-svn: 111959

commit 6b900c5dcd8425d432fc4ca61c4fc2e95371632e
Author: Johnny Chen <johnny.chen@apple.com>
--

commit 6ca006c7c13da67cd3aa19c2067e6990ac97c8d8
Author: Johnny Chen <johnny.chen@apple.com>
Date:   Mon Aug 16 21:28:10 2010 +0000

    Factored the "continue" command execution of the inferior process as part of the
    cleanup before finish into the test fixture in lldbtest.TestBase.tearDown().
    
    Derivatives of TestBase is responsible for setting self.runStarted to True if an
    inferior process has been started.
    
    llvm-svn: 111188

commit df239670d403fb18a338f1a47ad1326e4a3b9a73
Author: Douglas Gregor <dgregor@apple.com>
--

commit ce25f33e2a825c9260c834f029ff206672645d7c
Author: Daniel Dunbar <daniel@zuster.org>
Date:   Tue Aug 10 17:39:05 2010 +0000

    Driver/FreeBSD: Infer the right arch name in the presence of -m32,-m64, for the
    cases we care about.
     - This is eventually going to be unified outside the host specific code.
    
    llvm-svn: 110693

--

    Abtracted the old "lldb_private::Thread::StopInfo" into an abtract class.
    This will allow debugger plug-ins to make any instance of "lldb_private::StopInfo"
    that can completely describe any stop reason. It also provides a framework for
    doing intelligent things with the stop info at important times in the lifetime
    of the inferior.
    
    Examples include the signal stop info in StopInfoUnixSignal. It will check with
    the process to see that the current action is for the signal. These actions
    include wether to stop for the signal, wether the notify that the signal was
    hit, and wether to pass the signal along to the inferior process. The
    StopInfoUnixSignal class overrides the "ShouldStop()" method of StopInfo and
    this allows the stop info to determine if it should stop at the signal or
    continue the process.
    
    
--
    
    
    StopInfo subclasses can override the following functions:
    
    
        // If the subclass returns "false", the inferior will resume. The default
        // version of this function returns "true" which means the default stop
        // info will stop the process. The breakpoint subclass will check if
        // the breakpoint wants us to stop by calling any installed callback on
        // the breakpoint, and also checking if the breakpoint is for the current
        // thread. Signals will check if they should stop based off of the
--
            return false;
        }
    
        // Allow subclasses to do something intelligent right before we resume.
        // The signal class will figure out if the signal should be propagated
        // to the inferior process and pass that along to the debugger plug-ins.
        virtual void
        WillResume (lldb::StateType resume_state)
        {
            // By default, don't do anything
        }
--

commit 8601a7511869e0f91f16c60a45e07bca9b5b8593
Author: John McCall <rjmccall@apple.com>
Date:   Tue Aug 3 22:46:07 2010 +0000

    Do a very simple pass over every function we emit to infer whether we can
    mark it nounwind based on whether it contains any non-nounwind calls.
    <rdar://problem/8087431>
    
    llvm-svn: 110163

--

commit 4200fe4e50ad6e0f3e63764470fb85adadf9fd8d
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Jul 29 04:56:46 2010 +0000

    move the 'pretty 16-byte vector' inferring code up to be shared
    with return values, improving stuff that returns __m128 etc.
    
    llvm-svn: 109731

commit ce1bd754d8e51b01c7e6eafde6bc6a83c37cb1dd
--
commit 6dde30e964aa65c5173c00dd72ae70c31d052ab6
Author: Sean Callanan <scallanan@apple.com>
Date:   Fri Jul 23 02:19:15 2010 +0000

    Added extensive logging of the code that is actually going
    to be executed by the inferior.  This required explicit support
    from RecordingMemoryManager for finding the address range
    belonging to a particular function.
    
    Also fixed a bug in DisassemblerLLVM where the disassembler
    assumed there was an AddressRange available even when it was
--

commit bbc25ff5ccc551cc3b78bc9a57a64d6ef4472d8a
Author: Chris Lattner <sabre@nondot.org>
Date:   Mon Jul 12 00:47:34 2010 +0000

    if jump threading is able to infer interesting values on both
    the LHS and RHS of an and/or instruction, don't multiply add
    known predecessor values.  This fixes the crash on testcase
    from PR7498
    
    llvm-svn: 108114
--

commit f3aeb2c22c9e898955450f38bd0d128ac9ce8809
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Sun Jul 4 18:52:05 2010 +0000

    Infer alignments of fixed frame objects when they are constructed. This ensures remat'ed loads from fixed slots have the right alignments.
    
    llvm-svn: 107591

commit 238bc001ca934cbbb059614ec8b358c68859c639
Author: Nick Kledzik <kledzik@apple.com>
--

commit 375387d1f81872a991f52edcedc0730d1b90f937
Author: Tom Care <tcare@apple.com>
Date:   Fri Jun 25 18:22:31 2010 +0000

    Change RegionStoreManager::Retrieve to infer the type of a symbolic region from the context when it is not already available.
    
    llvm-svn: 106868

commit e76c0b13b9133dba8f7af05ec091744b1460d77a
Author: Bruno Cardoso Lopes <bruno.cardoso@gmail.com>
--
    iterative SCC passmanager juice that kicks in when the
    scc passmgr detects that a function pass has devirtualized
    a call.  In this case, it will rerun all the passes it
    manages on the SCC, up to the iteration count limit (4). This
    is useful because a function pass may devirualize a call, and
    we want the inliner to inline it, or pruneeh to infer stuff
    about it, etc.
    
    The second patch is to add *all* call sites to the
    DevirtualizedCalls list the inliner uses.  This list is
    about to get renamed, but the jist of this is that the
--
commit 4c014c892a36ac9a8423573b132408009d0738ae
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Thu Apr 1 18:19:11 2010 +0000

    - Avoid using floating point stores to implement memset unless the value is zero.
    - Do not try to infer GV alignment unless its type is sized. It's not possible to infer alignment if it has opaque type.
    
    llvm-svn: 100118

commit 1a55ef0427f242827f37e80c5c48baba756ba46d
Author: Devang Patel <dpatel@apple.com>
--

commit 3b9af40938733d296c1f815cfa53dfcc86d5c575
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Tue Mar 30 20:04:01 2010 +0000

    Add cross-block inference to SSEDomainFix.
    
    llvm-svn: 99916

commit 7a4413a3129716cbc7e4b0cff29668b0625c1470
Author: Dan Gohman <gohman@apple.com>
--
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Mon Mar 29 23:24:21 2010 +0000

    Basic implementation of SSEDomainFix pass.
    
    Cross-block inference is primitive and wrong, but the pass is working otherwise.
    
    llvm-svn: 99848

commit decbb74d68919f51af76da8788ec983003331e1e
Author: Bill Wendling <isanbard@gmail.com>
--

commit bb34b4e10f78be6f585dfdc4e4a5e447e1e9c84b
Author: Chris Lattner <sabre@nondot.org>
Date:   Fri Mar 19 05:34:15 2010 +0000

    resolve fixme: we now infer the instruction-level 'isvariadic' bit
    from the pattern if present, and we use it instead of the bit.
    
    llvm-svn: 98938

commit 0433699ef01aec2bf834b8d9274ff8ef07e7d626
--

commit fdc20711e865cdc5fa918eff6134d1c4d9f4ce73
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Mar 18 23:15:10 2010 +0000

    infer results of a pattern from implicit defs.  This allows you to do something
    like this:
    
     def : Pat<(add ...),
               (FOOINST)>;
    
--

commit 0db1d6500ac67c372fe55f2a82daadecc873df98
Author: Chris Lattner <sabre@nondot.org>
Date:   Mon Mar 15 06:03:22 2010 +0000

    eliminate some #if 0 code I added in r96905, type inference
    now enforces that input/output named values have hte same type.
    
    llvm-svn: 98535

commit cabe037b2d98d4d9796828b0e31f531affe1e54f
Author: Chris Lattner <sabre@nondot.org>
Date:   Mon Mar 15 06:00:16 2010 +0000

    Completely rewrite tblgen's type inference mechanism,
    changing the primary datastructure from being a
    "std::vector<unsigned char>" to being a new TypeSet class
    that actually has (gasp) invariants!
    
    This changes more things than I remember, but one major
--

commit dac58bd094bb771d972ad221c0a8ba1c5f403988
Author: Chris Lattner <sabre@nondot.org>
Date:   Mon Mar 8 18:44:04 2010 +0000

    Fix a bunch of ambiguous patterns which tblgen happens to infer types
    for, due to a bug.
    
    llvm-svn: 97953

commit e96802e6ed4b58c7927f18cbcea36b8a7ab87331
--
Author: Jakob Stoklund Olesen <stoklund@2pi.dk>
Date:   Tue Feb 23 22:43:58 2010 +0000

    Keep track of phi join registers explicitly in LiveVariables.
    
    Previously, LiveIntervalAnalysis would infer phi joins by looking for multiply
    defined registers. That doesn't work if the phi join is implicitly defined in
    all but one of the predecessors.
    
    llvm-svn: 96994

--
Author: Chris Lattner <sabre@nondot.org>
Date:   Tue Feb 23 07:50:58 2010 +0000

    add some #if 0'd out code for checking that named values in
    input/output patterns have the same type.  It turns out that
    this triggers all the time because we don't infer types
    between these boundaries.  Until we do, don't turn this on.
    
    llvm-svn: 96905

commit 5b0e24902bfa6435664b2f62fd63a7c8aceac015
--
      - When type-checking implicit base or member initializers within a
        dependent context, don't add the generated initializers into the
        AST, because they'll look like they were explicit.
    
      - Record in CXXConstructExpr when the constructor call is to
      initialize a base class, so that CodeGen does not have to infer it
      from context. This ensures that we call the right kind of
      constructor.
    
    There are also a few "opportunity" fixes here that were needed to not
    regress, for example:
--
commit ba2d0b89ffdbe5c22f01e598f0b603e6a0ae6cc5
Author: Chris Lattner <sabre@nondot.org>
Date:   Sat Jan 23 19:16:25 2010 +0000

    add an early out to ProcessBranchOnXOR to speed it up,
    handle the case when we can infer an input to the xor
    from all inputs that agree, instead of going into an
    infinite loop.  Another part of PR6199
    
    llvm-svn: 94321

--

commit 641fdce2359763bbc831255c2f88cfa19e960831
Author: Nuno Lopes <nunoplopes@sapo.pt>
Date:   Thu Dec 17 10:15:49 2009 +0000

    revert part of my last patch, and mark only the c++ global new operator as noalias. the rest will be infered by llvm optz
    
    llvm-svn: 91600

commit ff22e5e8cbced39f609384be02eb3713728abf9c
Author: Nuno Lopes <nunoplopes@sapo.pt>
--

commit d938faff4b27248e0c2eac9858562ba778097ea6
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Wed Dec 9 01:53:58 2009 +0000

    Teach InferPtrAlignment to infer GV+cst alignment and use it to simplify x86 isl lowering code.
    
    llvm-svn: 90925

commit 85d9968533265d159ff34802170712cccebca1c9
Author: Mike Stump <mrs@apple.com>
--

commit 2d412f0cb861a843d747b7da63553a5232644b39
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Wed Dec 9 01:17:24 2009 +0000

    Infer alignment for non-fixed stack object.
    
    llvm-svn: 90919

commit 1750009f38f9e2df7544deb0a60c8c5a238841f3
Author: Evan Cheng <evan.cheng@apple.com>
--

commit 34a23ea371c3be0e3f040d7d2497cd42f43b9b4a
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Wed Dec 9 01:04:59 2009 +0000

    Refactor InferAlignment out of DAGCombine.
    
    llvm-svn: 90917

commit 11da6b0050896cc072af73bd7136dc2188216f47
Author: Chris Lattner <sabre@nondot.org>
--

commit 773587859185937b683951a8d6285a52bf78cc9d
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Nov 15 20:02:12 2009 +0000

    teach LVI to infer edge information from switch instructions.
    This allows JT to eliminate a ton of infeasible edges when
    handling code like the templates in PatternMatch.h
    
    llvm-svn: 88869

--

commit dc2beaa05ed72115568bd2770fb01af0ac5079c3
Author: Anton Korobeynikov <asl@math.spbu.ru>
Date:   Sun Nov 8 12:14:54 2009 +0000

    It is invalid to infer the value type from the result #0 of the node
    since the instruction might use the other result of different type.
    
    llvm-svn: 86462

commit afb8be743d1488cae3173103c8aa3adc5a5e024a
--

commit 0f38d989bd720e0a64dd70bb5fdc3c772c1559a5
Author: Anton Korobeynikov <asl@math.spbu.ru>
Date:   Mon Nov 2 00:11:39 2009 +0000

    Do not infer the target type for COPY_TO_REGCLASS from dest regclass, this won't work if it can contain several types. Require explicit result type for the node for now. This fixes PR5364.
    
    PS: It seems that blackfin usage of copy_to_regclass is completely bogus!
    llvm-svn: 85766

commit 8cce1eb6aa562b991e4841d3d6605e4790de7da0
--

commit dae17dbbed0c7b8e39cb63ca4cfab001ea785a06
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Oct 25 18:21:37 2009 +0000

    simplify interface to ConvertDeclSpecToType, check for inferred
    block return types only when a TST isn't specified, not every time
    through GetTypeForDeclarator.
    
    llvm-svn: 85062

--
      knows about.
    - The JIT calls a function marked noinline that GDB knows about and has put an
      internal breakpoint in.
    - GDB catches the breakpoint and reads the global descriptor to look for new
      code.
    - When sees there is new code, it reads the ELF from the inferior's memory and
      adds it to itself as an object file.
    - The JIT continues, and the next time we stop the program, we are able to
      produce a proper backtrace.
    
    Consider running the following program through the JIT:
--
commit 57b946c94be7a225e61e9ad2c4b9cae45881e1a2
Author: Bob Wilson <bob.wilson@apple.com>
Date:   Sat Aug 29 05:53:25 2009 +0000

    PR4795: Remove EEVT::isFP, isInt and isVec types used by TableGen's type
    inferencing.  As far as I can tell, these are equivalent to the existing
    MVT::fAny, iAny and vAny types, and having both of them makes it harder
    to reason about and modify the type inferencing code.
    
    The specific problem in PR4795 occurs when updating a vAny type to be fAny
    or iAny, or vice versa.  Both iAny and fAny include vector types -- they
    intersect with the set of types represented by vAny.  When merging them,
    choose fAny/iAny to represent the intersection.  This is not perfect, since
    fAny/iAny also include scalar types, but it is good enough for TableGen's
    type inferencing.
    
    llvm-svn: 80423

commit 705539441b467c089fcba17ab58317af7982cdaa
Author: Anders Carlsson <andersca@mac.com>
--
    
    Other unrelated changes conflated into this patch:
    
    1. REmove EH stuff from llvm-dis and llvm-as, the try blocks
       are dead.
    2. Simplify the filename inference code in llvm-as/llvm-dis,
       because raw_fd_ostream does the right thing with '-'.
    3. Switch machine verifier to use raw_ostream instead of ostream
       (Which is the thing that needed append in the first place).
    
    llvm-svn: 79807
--
Author: Bob Wilson <bob.wilson@apple.com>
Date:   Wed Aug 12 17:04:56 2009 +0000

    Fix TableGen warnings.  This partly reverts my previous change to this file,
    leaving the mayLoad and mayStore settings around only the load/store
    instructions where those can't be inferred from the patterns.
    
    llvm-svn: 78815

commit 09b311f42fe2f172619d253174a09e33fd300bb6
Author: Dan Gohman <gohman@apple.com>
--
    
     3. Improved a few of the mechanisms to at least successfully flatten / tokenize
        the assembly strings for PowerPC and ARM.
    
     4. The comment at the top of AsmMatcherEmitter.cpp explains the approach I'm
        moving towards for handling ambiguous instructions. The high-bit is to infer
        a partial ordering of the operand classes (and force the user to specify one
        if we can't) and use that to resolve ambiguities.
    
    llvm-svn: 78378

--

commit 26f704669c3389e3663c2669d2b5b819183db29d
Author: Chris Lattner <sabre@nondot.org>
Date:   Fri Jul 24 16:50:24 2009 +0000

    split the ELF-specific section flag inference-from-name code out
    into its own helper function.
    
    llvm-svn: 76974

commit a5ca93cdd5994fce9bf13ee36fc8665742bd79b2
--
    3. This removes isRIPRel from X86ISelAddressMode, representing it with
       a basereg of RIP instead.
    4. The addressing mode matching logic in isel is greatly simplified.
    5. The asmprinter is greatly simplified, notably the "NotRIPRel" predicate
       passed through various printoperand routines is gone now.
    6. The various symbol printing routines in asmprinter now no longer infer
       when to emit (%rip), they just print the symbol.
    
    I think this is a big improvement over the previous situation.  It does have
    two small caveats though: 1. I implemented a horrible "no-rip" modifier for
    the inline asm "P" constraint modifier.  This is a short term hack, there is
--

commit 06a7f372651bb791e9d6935e4157d3606e116276
Author: Chris Lattner <sabre@nondot.org>
Date:   Wed Apr 15 16:55:46 2009 +0000

    don't infer diag class from parenting relations, make it an explicit field
    in the record.
    
    llvm-svn: 69176

commit 1b595624a841305ba3c982e380f887951de879a0
--
    
    t.cpp:8:13: error: unknown type name 'X'
    static foo::X  P;
           ~~~~~^
    
    instead of the woefully inferior:
    
    t.cpp:8:13: error: unknown type name 'X'
    static foo::X  P;
           ~~~~ ^
    
--

commit 34fc92fdc22763d005f005ac514c2a50aa828094
Author: Daniel Dunbar <daniel@zuster.org>
Date:   Tue Jan 20 23:17:32 2009 +0000

    Add -analyze action to run static analyzer, instead of inferring from
    individual checker options.
    
    llvm-svn: 62634

commit 6bbacbe37293bd401de9eec01f557f646b81d7c3
--

commit 123e7d1c2a8d04d43d146b55d1b6ef716ac3f526
Author: Daniel Dunbar <daniel@zuster.org>
Date:   Tue Sep 30 21:20:51 2008 +0000

    ccc: Infer action type upfront.
     - More straightforward, e.g. -E should always imply action =
       'preprocess' (I think).
     - Pass another option through for OS X.
    
    llvm-svn: 56884
--
     - Add environment variable CCC_FALLBACK. If set and non-empty then
       ccc will try and compile using the regular compiler if compilation
       with clang fails.
    
     - A few other tweaks to add options, flush stdout, recognize .mm as
       objective-c++, and infer languages for compile+link style
       invocations.
    
    llvm-svn: 55547

commit f0a88d6b2a54e06fc822bab4599cf50c4f56cced
--

commit 837c13a0299ea152724a7cff7af5261015a44f3d
Author: Dan Gohman <gohman@apple.com>
Date:   Wed Aug 20 16:30:28 2008 +0000

    Disable DAGCombine's alignment inference in "fast" codegen mode.
    
    llvm-svn: 55059

commit 2da2bedc72614dde92d9a3deeebe83fe2e8f9893
Author: Dan Gohman <gohman@apple.com>
--

commit 37d6f5801852d60fd9e5203bb985267cd5d71167
Author: Ted Kremenek <kremenek@apple.com>
Date:   Sat May 24 16:14:34 2008 +0000

    Don't use inferlanguage to override the default language for all files.
    
    llvm-svn: 51547

commit 55842bd269689db1d49f1c287e501d3273f5f544
Author: Ted Kremenek <kremenek@apple.com>
--
Date:   Tue May 6 04:20:12 2008 +0000

    Use EvalSummary to process message expressions, thereby unifying the checker
    logic for function calls and message expressions.
    
    Use the following heuristic to infer "allocating" instance methods:
    
      [ClassName classWithXXX]  allocates an object
    
    Update testcase to reflect this heuristic.
    
--

commit fc4ad7de66088ae23397198a777976f18e3ddec4
Author: Dan Gohman <gohman@apple.com>
Date:   Thu Apr 3 00:02:49 2008 +0000

    Move instruction flag inference out of InstrInfoEmitter and into
    CodeGenDAGPatterns, where it can be used in other tablegen backends.
    This allows the inference to be done for DAGISelEmitter so that it
    gets accurate mayLoad/mayStore/isSimpleLoad flags.
    
    This brings MemOperand functionality back to where it was before
    48329. However, it doesn't solve the problem of anonymous patterns
    which expand to code that does loads or stores.
--

commit d62964a7d8dc55b3fed1edfa906d7c3c6dd6e20b
Author: Chris Lattner <sabre@nondot.org>
Date:   Fri Mar 28 06:45:13 2008 +0000

    make memset inference significantly more powerful: it can now handle
    memsets that initialize "structs of arrays" and other store sequences
    that are not sequential.  This is still only enabled if you pass
    -form-memset-from-stores.  The flag is not heavily tested and I haven't
    analyzed the perf regressions when -form-memset-from-stores is passed
    either, but this causes no make check regressions.
--

commit 0faed2a9a60d470569529eebf46aa8092ff8911c
Author: Christopher Lamb <christopher.lamb@gmail.com>
Date:   Mon Mar 10 04:13:41 2008 +0000

    Add support in TableGen for unknown operands that infer their type from the pattern their used in. This will be used to allow insert/extract subreg patterns in .td files!
    
    llvm-svn: 48125

commit b73a43cc01ee4984b0c74c117348280e8b9ee5ae
Author: Ted Kremenek <kremenek@apple.com>
--

commit ace55dac39e4a34d3e87ed43eaef5297a2836364
Author: Lauro Ramos Venancio <lauro.venancio@gmail.com>
Date:   Fri Feb 15 22:35:25 2008 +0000

    Add c++ to "inferlanguage"
    
    llvm-svn: 47185

commit 8db4b110c35c7d9f2009006d3cbb5871b4107f8c
Author: Ted Kremenek <kremenek@apple.com>
--

commit 250789f1bdd6081c8182a0500bbafb7498666efc
Author: Chris Lattner <sabre@nondot.org>
Date:   Sat Jan 26 20:07:42 2008 +0000

    Remove some code for inferring alignment info from the x86 backend
    now that the dag combiner does it.
    
    llvm-svn: 46404

commit 596704405f6b140ee23397a7b550b3d77246c5db
Author: Chris Lattner <sabre@nondot.org>
Date:   Sat Jan 26 20:06:45 2008 +0000

    New test to verify that "merging 4 loads into a vec load" continues to work and
    continues to infer alignment info.
    
    llvm-svn: 46403

commit 1472c7fe76d59900a71b861bb0adcd331d417d3d
Author: Chris Lattner <sabre@nondot.org>
--

commit e30e33af4ff2f939d1fb5e0871fa57c9e91cfe12
Author: Chris Lattner <sabre@nondot.org>
Date:   Sat Jan 26 19:45:50 2008 +0000

    Infer alignment of loads and increase their alignment when we can tell they are
    from the stack.  This allows us to compile stack-align.ll to:
    
    _test:
            movsd   LCPI1_0, %xmm0
            movapd  %xmm0, %xmm1
--
commit 2d7a830ff3010f15680da05f62daf4eeedfe1e23
Author: Chris Lattner <sabre@nondot.org>
Date:   Fri Jan 25 07:20:16 2008 +0000

    Add skeletal code to increase the alignment of loads and stores when
    we can infer it.  This will eventually help stuff, though it doesn't
    do much right now because all fixed FI's have an alignment of 1.
    
    llvm-svn: 46349

commit 6068832dbebd836217fb1651fae897da0474a643
--
    0) a non-zero constant-expr for the number of arguments the overloaded
       functions will take
    1) the arguments to pass to the matching overloaded function
    2) a list of functions to match.
    
    The return type of __builtin_overload is inferred from the function whose args
    match the types of the arguments passed to the builtin.  For example:
    
    float a;
    float sinf(float);
    int   sini(int);
--

commit 8c5cdddfb9bfc461542649fa87ed2177558ad88f
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Jan 13 22:30:28 2008 +0000

    simplify some code.  If we can infer alignment for source and dest that are
    greater than memcpy alignment, and if we lower to load/store, use the best
    alignment info we have.
    
    llvm-svn: 45943

--

commit 317332fc2a7af92b1b574e84d52c9dbfc55539fc
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Jan 10 07:59:24 2008 +0000

    Start inferring side effect information more aggressively, and fix many bugs in the
    x86 backend where instructions were not marked maystore/mayload, and perf issues where
    instructions were not marked neverHasSideEffects.  It would be really nice if we could
    write patterns for copy instructions.
    
    I have audited all the x86 instructions down to MOVDQAmr.  The flags on others and on
--
commit aca7ca3730d0283e83775dd6f1cdb3eebf6832fa
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Jan 10 05:45:39 2008 +0000

    remove explicit sets of 'neverHasSideEffects' that can now be
    inferred from the instr patterns.
    
    llvm-svn: 45824

commit 86c458a1784b609b7d3726efadb53a9811e06fb9
Author: Chris Lattner <sabre@nondot.org>
--

commit 42c63ef96e053bfa64aa0cd0b0dadbf806c8649f
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Jan 10 05:39:30 2008 +0000

    start inferring 'no side effects'.
    
    llvm-svn: 45822

commit 94de7bc3aad46136ea5818b4364ae1cb8ee11912
Author: Chris Lattner <sabre@nondot.org>
--

commit 9e696544618107764dccc5fa8e523bc07c2cf75e
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Jan 10 04:44:48 2008 +0000

    Infer mayload
    
    llvm-svn: 45819

commit c72335878db438718518a28315dd431844312b11
Author: Chris Lattner <sabre@nondot.org>
--
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Jan 10 00:30:57 2008 +0000

    Fix PR1845 and rdar://5676945.  Generic vectors smaller
    than hardware supported type will be scalarized, so we
    can infer their alignment from that info.
    
    We now codegen pr1845 into:
    
    _boolVectorSelect:
            lbz r2, 0(r3)
--

commit a348f55ec6008862d242a0df41baae4ec5ec5c27
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Jan 6 06:44:58 2008 +0000

    Change the 'isStore' inferrer to look for 'SDNPMayStore'
    instead of "ISD::STORE".  This allows us to mark target-specific dag
    nodes as storing (such as ppc byteswap stores).  This allows us to remove
    more explicit isStore flags from the .td files.
    
    Finally, add a warning for when a .td file contains an explicit
    isStore and tblgen is able to infer it.
    
    llvm-svn: 45654

commit f4d55ec4e8456fcd52270d3aa5b7261c07b187ba
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Jan 6 05:55:01 2008 +0000

    remove explicit isStore flags that are now inferrable.
    
    llvm-svn: 45653

commit e20f380fbf9bc758ecafcbba73a43202d3a8864e
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Jan 6 05:53:26 2008 +0000

    remove some isStore flags that are now inferred automatically.
    
    llvm-svn: 45652

commit e9dba0920b0d192ac8eff1dc2dc75be236e0705e
Author: Chris Lattner <sabre@nondot.org>
--

commit e457fd1e9b45470466219de23f6291d421105b68
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Jan 6 02:16:26 2008 +0000

    remove some old hacky code that tried to infer whether a store
    occured in a pattern, but failed miserably.  The new code works for
    any instruction that has a store in its pattern, including all the
    x86 mem op mem instructions.
    
    The only target-independent code that uses this is branch folding,
--

commit 27a4c1515a6e1fd6bb752a72e88c07be66539c2f
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Jan 6 01:53:37 2008 +0000

    rearrange some code to allow inferring instr info from the pattern of the instr, but don't do so yet.
    
    llvm-svn: 45647

commit d5326def4a375de166065066e710a62b927164e2
Author: Chris Lattner <sabre@nondot.org>
--
Author: Ted Kremenek <kremenek@apple.com>
Date:   Fri Nov 2 18:04:20 2007 +0000

    Added overloaded version of Deserializer::ReadOwnedPtr which allows
    the target pointer to be passed by reference.  This can result in less
    typing, as the object to be deserialized can be inferred from the
    argument.
    
    llvm-svn: 43647

commit 2b93a20b097b25313b8c65c46c7f751351bcd24e
--

commit e45ac2ab119fc37c24634d3111b52023aaa18cee
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Mon Dec 18 08:52:59 2006 +0000

    Remove the createInferredCast methods now that their last uses have been
    removed. All casting is now explicit and not inferred by VMCore.
    
    llvm-svn: 32655

commit 668d90f2892ed5700faa78951c5686923f2a9d6e
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Mon Dec 18 08:47:13 2006 +0000

    Convert the last uses of CastInst::createInferredCast to a normal cast
    creation. These changes are still temporary but at least this pushes
    knowledge of signedness out closer to where it can be determined properly
    and allows signedness to be removed from VMCore.
    
    llvm-svn: 32654

commit 4800c38a7546a8fc2435722b9e05470edb15d03e
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Mon Dec 18 08:18:46 2006 +0000

    Remove the two-argument (inferred cast) form of ConstantExpr::getCast now
    that its last uses have been removed.
    
    llvm-svn: 32653

commit b83593e3eae45216cc741c9818285786017765bc
--

commit bfe26ffcfc6e23e0c43e9a8de02c5d656403e872
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Wed Dec 13 00:50:17 2006 +0000

    Replace CastInst::createInferredCast calls with more accurate cast
    creation calls.
    
    llvm-svn: 32521

commit d845dc00c710f30b1449466bbf41afaf8536ed07
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Wed Dec 13 00:47:58 2006 +0000

    Change createInferredCast calls to more accurate cast creation calls.
    
    llvm-svn: 32520

commit 08bed59d59d1ae4d68a71f328374f147fd42516e
Author: Devang Patel <dpatel@apple.com>
--

commit bb65ebf9a115340e9359dfb955be89164d16d432
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Tue Dec 12 23:36:14 2006 +0000

    Replace inferred getCast(V,Ty) calls with more strict variants.
    Rename getZeroExtend and getSignExtend to getZExt and getSExt to match
    the the casting mnemonics in the rest of LLVM.
    
    llvm-svn: 32514

--

commit 13bc5d7b579393d0528d7cf1212f36d80d783b06
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Tue Dec 12 09:18:51 2006 +0000

    Fix numerous inferred casts.
    
    llvm-svn: 32479

commit 1ac0ab08505f861bd9b3d8f91c845b0a452c9752
Author: Reid Spencer <rspencer@reidspencer.com>
--

commit b341b0861dcfdfd4453b32169a86302a275b81c9
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Tue Dec 12 05:05:00 2006 +0000

    Change inferred getCast into specific getCast. Passes all tests.
    
    llvm-svn: 32469

commit 6e5fe376ec898e651526107485d2a0f6e4000789
Author: Chris Lattner <sabre@nondot.org>
--

commit 3c49edcaa11f056c58f70e7374932625a4019f3a
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Tue Dec 12 01:17:41 2006 +0000

    Change inferred cast creation calls to more specific cast creations.
    
    llvm-svn: 32460

commit 9fa0a268082d11c09275cd0770dcb3aaec08e833
Author: Rafael Espindola <rafael.espindola@gmail.com>
--
commit 2d73fe7fadc17c763988953a7a952cc344452509
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Mon Dec 11 23:20:20 2006 +0000

    Create the cast constant expression that was read instead of attempting
    to infer the cast from its operand and type. This fixes:
    test/Regression/Bytecode/2006-12-11-Cast-ConstExpr.ll
    
    llvm-svn: 32450

commit 840cc9e1a9947223dbf638328652e3c587e865c2
--

commit 216c3028e63f00f00cf166216a874118a4604040
Author: Chris Lattner <sabre@nondot.org>
Date:   Sun Dec 10 23:56:50 2006 +0000

     * Eliminate calls to CastInst::createInferredCast.
     * Add support for promoting unions with fp values in them.  This produces
       our new int<->fp bitcast instructions, implementing
       Transforms/ScalarRepl/union-fp-int.ll
    
    As an example, this allows us to compile this:
--

commit f37dc65b08163be73d72958d31c343c57aa4836f
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Tue Dec 5 19:14:13 2006 +0000

    Bail on the getInferredCast idea. Remove the function and convert
    remaining uses to more specific casts.
    
    llvm-svn: 32231

commit c20b7e878a0742a9a427828049fc0090ce604576
--

commit 27720a962d9596c9cc8be1d79a5b39490e9bfedc
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Tue Dec 5 03:30:09 2006 +0000

    Remove the last inferred casts from VMCore.
    
    llvm-svn: 32213

commit d5a3f0dd1b87552ac5ff4527c3b3a5137ef09f40
Author: Reid Spencer <rspencer@reidspencer.com>
--
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Mon Dec 4 20:17:56 2006 +0000

    Implement new cast creation functions for both instructions and constant
    expressions. These will get used to reduce clutter as we replace various
    calls to createInferredCast and getCast.
    
    llvm-svn: 32191

commit 332109374a628563c43036561c49a0cee0447237
Author: Reid Spencer <rspencer@reidspencer.com>
--

commit 1ba24bb1e47b23bc64dab005a92293f555f06098
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Mon Dec 4 17:05:42 2006 +0000

    Fix inferred casts.
    
    llvm-svn: 32180

commit 561bb367563eff4a7c2f3dfed15976b0d5a891df
Author: Reid Spencer <rspencer@reidspencer.com>
--

commit 1a06389f06c07a8e1005c038f0494269267c770f
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Mon Dec 4 02:46:44 2006 +0000

    Change inferred casts to explicit casts.
    
    llvm-svn: 32165

commit c4dacf24553383b975de34ec44485141c47863df
Author: Reid Spencer <rspencer@reidspencer.com>
Date:   Mon Dec 4 02:43:42 2006 +0000

    Take a baby step towards getting rid of inferred casts. Provide methods on
    CastInst and ConstantExpr that allow the signedness to be explicitly passed
    in and reliance on signedness removed from getCastOpcode. These are
    temporary measures useful during the conversion of inferred casts.
    
    llvm-svn: 32164

commit 3c3fed62bf90d3801bf146b6fc5136b56f3df44a
Author: Reid Spencer <rspencer@reidspencer.com>
--

commit 9500b343db4be8e7a7ef6881bd68d65b7244d24e
Author: Chris Lattner <sabre@nondot.org>
Date:   Tue Jun 20 00:18:02 2006 +0000

    Make sure to use the result of the pattern to infer the result type of the
    instruction, and the result type of the instruction to refine the pattern.
    This allows us to write things like this:
    
    def : Pat<(v2i64 (bitconvert (v16i8 VR128:$src))), (v2i64 VR128:$src)>;
    
--

commit a7d9db2fa5af15dba650e1b4bb8b03e56e60a6f6
Author: Chris Lattner <sabre@nondot.org>
Date:   Fri Jun 16 18:50:48 2006 +0000

    Remove the -darwin and -aix llc options, inferring darwinism and aixism from
    the target triple & subtarget info.  woo.
    
    llvm-svn: 28835

commit 8a417a2fde00f7a8546909faaac32b70d3437ca5
--

commit 726df0bb825bf4c3e81b0aecb8dc48810ba85dc4
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Apr 6 20:36:51 2006 +0000

    Infer element types for shuffle masks
    
    llvm-svn: 27456

commit 09575a9b0a79d0d25da6d771141f4d25be02d374
Author: Chris Lattner <sabre@nondot.org>
--

commit 7d587f37ec1467598d58f5e03d7258c99dfefb17
Author: Chris Lattner <sabre@nondot.org>
Date:   Fri Mar 10 22:39:48 2006 +0000

    Remove UnixLocalInferiorProcess: debugging via the JIT isn't a good idea.
    
    Perhaps llvm-db will turn into a read debugger someday.
    
    llvm-svn: 26700

--

commit a039d439dc04a8bf49b28d8a35bb1e598b47e8cf
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Sun Jan 15 10:04:45 2006 +0000

    Type inferencing bug
    
    llvm-svn: 25337

commit c8817d28575102a326b14b4a5520703dd2707dc9
Author: Duraid Madina <duraid@octopus.com.au>
--
commit 672578bd94fed6ff36b876b59770696cffe155b6
Author: Nate Begeman <natebegeman@mac.com>
Date:   Fri Dec 16 09:19:13 2005 +0000

    Add a second vector type to the VRRC register class, and fix some patterns
    so that tablegen can infer all types.
    
    llvm-svn: 24746

commit 9f2c3a7c4e584643f5c481561faa48d40233c0aa
Author: Chris Lattner <sabre@nondot.org>
--

commit c0c190239dacf886cec9af938e13ecb153c90c99
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Mon Dec 5 23:09:43 2005 +0000

    Remove unnecessary let hasCtrlDep=1 now it can be inferred.
    
    llvm-svn: 24611

commit 0fe76d1585045d397715c45c6ecebfbc7bf51e45
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Mon Dec 5 23:08:55 2005 +0000

    * Infer instruction property hasCtrlDep from pattern if it has one.
    * Fixed a bug related to hasCtrlDep property use.
    
    llvm-svn: 24610

commit 5bfcd1e63aee5b481ff701465f56984b82d5194b
--

commit f02bb9af8b769733d430e5d91c58a6820d4903ea
Author: Evan Cheng <evan.cheng@apple.com>
Date:   Sun Dec 4 08:18:16 2005 +0000

    * Commit the fix (by Chris) for a tblgen type inferencing bug.
    * Enhanced tblgen to handle instructions which have chain operand and writes a
    chain result.
    * Enhanced tblgen to handle instructions which produces no results. Part of
    the change is a temporary hack which relies on instruction property (e.g.
    isReturn, isBranch). The proper fix would be to change the .td syntax to
--

commit 59e96143a2d9110a5a2756c7499fec12bbdc66b2
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Sep 15 22:23:50 2005 +0000

    teach the type inference code how to infer types for instructions and node
    xforms.  Run type inference on result patterns, so we always have fully typed
    results (and to catch errors in .td files).
    
    llvm-svn: 23369

commit fedd9a5e1d195adba821736e6406676366868bf9
--

commit d7d31f3b06a2e5137a54ebc19223c98037967235
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Sep 8 23:22:48 2005 +0000

    Implement a complete type inference system for dag patterns, based on the
    constraints defined in the DAG node definitions in the .td files.  This
    allows us to infer (and check!) the types for all nodes in the current
    ppc .td file.  For example, instead of:
    
    Inst pattern EQV:       (set GPRC:i32:$rT, (xor (xor GPRC:i32:$rA, GPRC:i32:$rB), (imm)<<Predicate_immAllOnes>>))
    
    we now fully infer:
    
    Inst pattern EQV:       (set:void GPRC:i32:$rT, (xor:i32 (xor:i32 GPRC:i32:$rA, GPRC:i32:$rB), (imm:i32)<<Predicate_immAllOnes>>))
    
    from:  (set GPRC:$rT, (not (xor GPRC:$rA, GPRC:$rB)))
    llvm-svn: 23284
--

commit 0ec8fa0880d717fd4cb55338ae6cf842448d4027
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Sep 8 19:50:41 2005 +0000

    Add a bunch of stuff needed for node type inference.  Move 'BLR' down with
    the rest of the instructions, add comment markers to seperate portions of
    the file into logical parts
    
    llvm-svn: 23277

--

commit a6d34d9e192d01918d824cadaeb828f820bba46e
Author: Chris Lattner <sabre@nondot.org>
Date:   Sat Aug 21 19:42:03 2004 +0000

    Infer the spillsize/alignment of a register based on the register classes
    it is embedded into.
    
    llvm-svn: 15966

commit d3244d9cecb5fd9abde43d30c31c806d87783e6a
--

commit 2ed0642a955ac35202e58affb7d29e08f1195f85
Author: Chris Lattner <sabre@nondot.org>
Date:   Tue Oct 14 20:52:55 2003 +0000

    Eliminate the bugpoint -mode option, by making bugpoint automatically infer the root of all of your problems
    
    llvm-svn: 9115

commit fdfe3704069e1dc3c81190387ad8663edcb5b15f
Author: Chris Lattner <sabre@nondot.org>
--
Author: Chris Lattner <sabre@nondot.org>
Date:   Mon Aug 11 21:29:40 2003 +0000

    add frameidx support
    Make load work
    Make type inference infer from Arg1 to arg0 as well as from arg0 to arg1
    
    llvm-svn: 7754

commit e021bceb18034da76519a68e95568ff4f97e72f8
Author: Chris Lattner <sabre@nondot.org>
--

commit 19630d41f8c40eaa45ef7983938104243bf788d6
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Aug 7 21:02:56 2003 +0000

    Implement type-inference/checking for non-terminal references
    
    llvm-svn: 7686

commit acf3dbe0c583be3156ce87b03948d08099196457
Author: Chris Lattner <sabre@nondot.org>
--
commit ca89a11494663c3aeaf25c75dae0c3eb8b514d2d
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Aug 7 19:59:42 2003 +0000

    Add support for "cast" nodes, which are required when there is not enough information
    to infer type type of all nodes, e.g. (ret imm)
    
    llvm-svn: 7684

commit bd1ffb4ea1fa0552441590a6fa7dc53413c6c643
Author: Chris Lattner <sabre@nondot.org>
--

commit ccb9f8ed5467da8410c90c8b20f856633bd6fb7d
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Aug 7 06:02:15 2003 +0000

    Finish implementation of the type inference engine.
    Start working on reading in nonterminals
    
    llvm-svn: 7671

commit da2e1dcc2bbc3f723cd1014bec19468d93b2e6f3
--

commit c01182c716c87540a9b18c46018c4adf6bbf1a0e
Author: Chris Lattner <sabre@nondot.org>
Date:   Thu Aug 7 05:40:14 2003 +0000

    Initial checkin of tree pattern parser and type inference engine (which still needs work).
    
    llvm-svn: 7668

commit 40842f4c8b640540e09d37db79291bad11bfa2da
Author: Chris Lattner <sabre@nondot.org>
